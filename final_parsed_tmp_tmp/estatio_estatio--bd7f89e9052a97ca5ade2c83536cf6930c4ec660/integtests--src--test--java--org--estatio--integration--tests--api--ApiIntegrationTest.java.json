[
    {
        "repo_name": "estatio_estatio",
        "commit": "bd7f89e9052a97ca5ade2c83536cf6930c4ec660",
        "rev_path": "integtests/src/test/java/org/estatio/integration/tests/api/ApiIntegrationTest.java",
        "definition": "@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class ApiIntegrationTest extends EstatioIntegrationTest {\n\n    private static final LocalDate START_DATE = new LocalDate(2012, 1, 1);\n    private Api api;\n    private Leases leases;\n    private Properties properties;\n    private Parties parties;\n    private CommunicationChannels communicationChannels;\n    private Units<?> units;\n    private Occupancies leaseUnits;\n    private AgreementRoleTypes agreementRoleTypes;\n    private ClockService clockService;\n    private PostalAddresses postalAddresses;\n    private PhoneOrFaxNumbers phoneOrFaxNumbers;\n    private EmailAddresses emailAddresses;\n    private Countries countries;\n    private States states;\n    private Taxes taxes;\n    private ChargeGroups chargeGroups;\n    private Charges charges;\n\n    @BeforeClass\n    public static void setupTransactionalData() {\n        scenarioExecution().install(new EstatioTransactionalObjectsFixture());\n    }\n\n    @Before\n    public void setUp() throws Exception {\n        api = service(Api.class);\n        leases = service(Leases.class);\n        properties = service(Properties.class);\n        states = service(States.class);\n        chargeGroups = service(ChargeGroups.class);\n        charges = service(Charges.class);\n        parties = service(Parties.class);\n        communicationChannels = service(CommunicationChannels.class);\n        units = (Units<?>) service(Units.class);\n        leaseUnits = service(Occupancies.class);\n        agreementRoleTypes = service(AgreementRoleTypes.class);\n        clockService = service(ClockService.class);\n        phoneOrFaxNumbers = service(PhoneOrFaxNumbers.class);\n        emailAddresses = service(EmailAddresses.class);\n        postalAddresses = service(PostalAddresses.class);\n        countries = service(Countries.class);\n        taxes = service(Taxes.class);\n\n    }\n\n    @Test\n    public void t00_refData() throws Exception {\n\n        // country\n        api.putCountry(\"NLD\", \"NL\", \"Netherlands\");\n\n        Country netherlands = countries.findCountry(\"NLD\");\n        Assert.assertNotNull(netherlands);\n        assertThat(netherlands.getReference(), is(\"NLD\"));\n        assertThat(netherlands.getAlpha2Code(), is(\"NL\"));\n        assertThat(netherlands.getName(), is(\"Netherlands\"));\n\n        // state\n        api.putState(\"NH\", \"North Holland\", \"NLD\");\n        State state = states.findState(\"NH\");\n        Assert.assertNotNull(state);\n        assertThat(state.getReference(), is(\"NH\"));\n        assertThat(state.getName(), is(\"North Holland\"));\n        assertThat(state.getCountry(), is(netherlands));\n\n        api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21.0), new LocalDate(1980, 1, 1));\n        api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21), new LocalDate(1980, 1, 1));\n\n        final Tax tax = taxes.findTaxByReference(\"APITAXREF\");\n        Assert.assertNotNull(tax);\n        assertThat(tax.getReference(), is(\"APITAXREF\"));\n        assertThat(tax.getName(), is(\"APITAX Name\"));\n        Assert.assertNotNull(tax.percentageFor(LocalDate.now()));\n\n        api.putCharge(\"APICHARGEREF\", \"APICHARGENAME\", \"API CHARGE\", \"APITAXREF\", \"APICHARGEGROUP\");\n\n        final ChargeGroup chargeGroup = chargeGroups.findChargeGroup(\"APICHARGEGROUP\");\n        Assert.assertNotNull(chargeGroup);\n        assertThat(chargeGroup.getReference(), is(\"APICHARGEGROUP\"));\n        assertThat(chargeGroup.getName(), is(\"APICHARGEGROUP\"));\n\n        final Charge charge = charges.findCharge(\"APICHARGEREF\");\n        Assert.assertNotNull(charge);\n        assertThat(charge.getReference(), is(\"APICHARGEREF\"));\n        assertThat(charge.getName(), is(\"APICHARGENAME\"));\n        assertThat(charge.getDescription(), is(\"API CHARGE\"));\n        assertThat(charge.getTax(), is(tax));\n        assertThat(charge.getGroup(), is(chargeGroup));\n    }\n\n    @Test\n    public void t01_putAsset() throws Exception {\n        api.putProperty(\"APIPROP\", \"Apiland\", \"NLD\", \"ApiCity\", \"SHOPPING_CENTER\", null, null, null, \"HELLOWORLD\", \"APIFORMAT\");\n        api.putUnit(\"APIUNIT\", \"APIPROP\", \"APIONWER\", \"Name\", \"BOUTIQUE\", new LocalDate(1999, 6, 1), null, null, null, null, null, null, null, null, null, null, null);\n        Assert.assertThat(properties.findProperties(\"APIPROP\").size(), Is.is(1));\n    }\n\n    @Test\n    public void t02_putOrganisation() {\n        api.putOrganisation(\"APITENANT\", \"API Tenant\", \"vat\", \"fiscal\");\n        api.putOrganisation(\"APILANDLORD\", \"API Landlord\", \"vat\", \"fiscal\");\n        Assert.assertThat(parties.findParties(\"API*\").size(), Is.is(2));\n    }\n\n    @Test\n    public void t03_putPartyCommunicationChannels() {\n        api.putPartyCommunicationChannels(\"APITENANT\", \"APITENANT\", \"Address1\", \"Address2\", \"CITY\", \"Postal Code\", \"NH\", \"NLD\", \"+31987654321\", \"+31876543210\", \"test@api.local\");\n        Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.POSTAL_ADDRESS));\n        Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.FAX_NUMBER));\n        Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.PHONE_NUMBER));\n    }\n\n    @Test\n    public void t03_putPartyCommunicationChannelsWithoutReference() {\n        api.putPartyCommunicationChannels(\"APITENANT\", null, \"NewAddress1\", \"NewAddress2\", \"NewCity\", \"NewPostCode\", \"NH\", \"NLD\", \"+31222222222\", \"+31333333333\", \"test@example.com\");\n        Party party = parties.findPartyByReference(\"APITENANT\");\n        Assert.assertNotNull(postalAddresses.findByAddress(party, \"NewAddress1\", \"NewPostCode\", \"NewCity\", countries.findCountry(\"NLD\")));\n        Assert.assertNotNull(phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, \"+31222222222\"));\n        Assert.assertNotNull(emailAddresses.findByEmailAddress(party, \"test@example.com\"));\n    }\n\n    @Test\n    public void t04_putLeaseWorks() throws Exception {\n        api.putLease(\"APILEASE\", \"Lease\", \"APITENANT\", \"APILANDLORD\", \"APILEASETYPE\", START_DATE, new LocalDate(2021, 12, 31), null, \"APIPROP\");\n        Lease lease = leases.findLeaseByReference(\"APILEASE\");\n        Assert.assertNotNull(lease);\n        Assert.assertThat(lease.getRoles().size(), Is.is(2));\n    }\n\n    @Test\n    public void t05_putLeaseUnitWorks() throws Exception {\n        api.putOccupancy(\"APILEASE\", \"APIUNIT\", START_DATE, null, null, null, \"APISIZE\", \"ABIBRAND\", \"APISECTOR\", \"APIACTIVITY\", \"YES\", \"YES\", \"YES\");\n        Lease l = leases.findLeaseByReference(\"APILEASE\");\n        Unit u = units.findUnitByReference(\"APIUNIT\");\n        Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n        Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n    }\n\n    @Test\n    public void t05b_putLeasePostalAddress() throws Exception {\n        api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n        final Lease l = leases.findLeaseByReference(\"APILEASE\");\n        final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n        final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n        Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n    }\n\n    @Test\n    public void t05b_putLeasePostalAddress_idempotent() throws Exception {\n        api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n        final Lease l = leases.findLeaseByReference(\"APILEASE\");\n        final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n        final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n        Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n    }\n\n    @Test\n    public void t06_putLeaseItemWorks() throws Exception {\n        api.putLeaseItem(\"APILEASE\", \"APITENANT\", \"APIUNIT\", LeaseItemType.RENT.name(), BigInteger.valueOf(1), START_DATE, new LocalDate(2012, 12, 31), \"APICHARGEREF\", null, InvoicingFrequency.QUARTERLY_IN_ADVANCE.name(), PaymentMethod.DIRECT_DEBIT.name(), LeaseItemStatus.APPROVED.name());\n        Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getItems().size(), Is.is(1));\n    }\n\n    @Test\n    public void t07_putLeaseTermWorks() throws Exception {\n        api.putLeaseTermForIndexableRent(\n                \"APILEASE\",\n                \"APITENANT\",\n                \"APIUNIT\",\n                BigInteger.valueOf(1),\n                LeaseItemType.RENT.name(),\n                START_DATE,\n                BigInteger.valueOf(1),\n                START_DATE,\n                new LocalDate(2012, 12, 31),\n                LeaseTermStatus.NEW.name(),\n                IndexationStatus.NEXT.name(),\n                null,\n                null,\n                BigDecimal.valueOf(12345),\n                BigDecimal.valueOf(12345),\n                null,\n                null,\n                null,\n                \"APIINDEX\",\n                LeaseTermFrequency.YEARLY.name(),\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null);\n        api.putLeaseTermForIndexableRent(\"APILEASE\",\n                \"APITENANT\",\n                \"APIUNIT\",\n                BigInteger.valueOf(1),\n                LeaseItemType.RENT.name(),\n                START_DATE,\n                BigInteger.valueOf(2),\n                new LocalDate(2013, 1, 1),\n                new LocalDate(2013, 12, 31),\n                LeaseTermStatus.NEW.name(),\n                IndexationStatus.NEXT.name(),\n                null,\n                null,\n                BigDecimal.valueOf(12345),\n                BigDecimal.valueOf(12345),\n                null,\n                null,\n                null,\n                \"APIINDEX\",\n                LeaseTermFrequency.YEARLY.name(),\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null, \n                null);\n        Lease lease = leases.findLeaseByReference(\"APILEASE\");\n        Assert.assertThat(lease.getItems().first().getTerms().size(), Is.is(2));\n    }\n\n    @Test\n    public void t08_putBreakOptionWorks() throws Exception {\n        api.putBreakOption(\"APILEASE\", \"FIXED\", \"TENANT\", new LocalDate(2015, 1, 1), new LocalDate(2014, 7, 1), null, \"Test\");\n        api.putBreakOption(\"APILEASE\", \"ROLLING\", \"MUTUAL\", new LocalDate(2019, 1, 1), null, \"6m\", \"Test\");\n        Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getBreakOptions().size(), Is.is(2));\n    }\n\n}",
        "package": "package org.estatio.integration.tests.api;",
        "tree_path": "ApiIntegrationTest",
        "name": "ApiIntegrationTest",
        "modifiers": "@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic",
        "superclass": "extends EstatioIntegrationTest",
        "super_interfaces": null,
        "body": "{\n\n    private static final LocalDate START_DATE = new LocalDate(2012, 1, 1);\n    private Api api;\n    private Leases leases;\n    private Properties properties;\n    private Parties parties;\n    private CommunicationChannels communicationChannels;\n    private Units<?> units;\n    private Occupancies leaseUnits;\n    private AgreementRoleTypes agreementRoleTypes;\n    private ClockService clockService;\n    private PostalAddresses postalAddresses;\n    private PhoneOrFaxNumbers phoneOrFaxNumbers;\n    private EmailAddresses emailAddresses;\n    private Countries countries;\n    private States states;\n    private Taxes taxes;\n    private ChargeGroups chargeGroups;\n    private Charges charges;\n\n    @BeforeClass\n    public static void setupTransactionalData() {\n        scenarioExecution().install(new EstatioTransactionalObjectsFixture());\n    }\n\n    @Before\n    public void setUp() throws Exception {\n        api = service(Api.class);\n        leases = service(Leases.class);\n        properties = service(Properties.class);\n        states = service(States.class);\n        chargeGroups = service(ChargeGroups.class);\n        charges = service(Charges.class);\n        parties = service(Parties.class);\n        communicationChannels = service(CommunicationChannels.class);\n        units = (Units<?>) service(Units.class);\n        leaseUnits = service(Occupancies.class);\n        agreementRoleTypes = service(AgreementRoleTypes.class);\n        clockService = service(ClockService.class);\n        phoneOrFaxNumbers = service(PhoneOrFaxNumbers.class);\n        emailAddresses = service(EmailAddresses.class);\n        postalAddresses = service(PostalAddresses.class);\n        countries = service(Countries.class);\n        taxes = service(Taxes.class);\n\n    }\n\n    @Test\n    public void t00_refData() throws Exception {\n\n        // country\n        api.putCountry(\"NLD\", \"NL\", \"Netherlands\");\n\n        Country netherlands = countries.findCountry(\"NLD\");\n        Assert.assertNotNull(netherlands);\n        assertThat(netherlands.getReference(), is(\"NLD\"));\n        assertThat(netherlands.getAlpha2Code(), is(\"NL\"));\n        assertThat(netherlands.getName(), is(\"Netherlands\"));\n\n        // state\n        api.putState(\"NH\", \"North Holland\", \"NLD\");\n        State state = states.findState(\"NH\");\n        Assert.assertNotNull(state);\n        assertThat(state.getReference(), is(\"NH\"));\n        assertThat(state.getName(), is(\"North Holland\"));\n        assertThat(state.getCountry(), is(netherlands));\n\n        api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21.0), new LocalDate(1980, 1, 1));\n        api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21), new LocalDate(1980, 1, 1));\n\n        final Tax tax = taxes.findTaxByReference(\"APITAXREF\");\n        Assert.assertNotNull(tax);\n        assertThat(tax.getReference(), is(\"APITAXREF\"));\n        assertThat(tax.getName(), is(\"APITAX Name\"));\n        Assert.assertNotNull(tax.percentageFor(LocalDate.now()));\n\n        api.putCharge(\"APICHARGEREF\", \"APICHARGENAME\", \"API CHARGE\", \"APITAXREF\", \"APICHARGEGROUP\");\n\n        final ChargeGroup chargeGroup = chargeGroups.findChargeGroup(\"APICHARGEGROUP\");\n        Assert.assertNotNull(chargeGroup);\n        assertThat(chargeGroup.getReference(), is(\"APICHARGEGROUP\"));\n        assertThat(chargeGroup.getName(), is(\"APICHARGEGROUP\"));\n\n        final Charge charge = charges.findCharge(\"APICHARGEREF\");\n        Assert.assertNotNull(charge);\n        assertThat(charge.getReference(), is(\"APICHARGEREF\"));\n        assertThat(charge.getName(), is(\"APICHARGENAME\"));\n        assertThat(charge.getDescription(), is(\"API CHARGE\"));\n        assertThat(charge.getTax(), is(tax));\n        assertThat(charge.getGroup(), is(chargeGroup));\n    }\n\n    @Test\n    public void t01_putAsset() throws Exception {\n        api.putProperty(\"APIPROP\", \"Apiland\", \"NLD\", \"ApiCity\", \"SHOPPING_CENTER\", null, null, null, \"HELLOWORLD\", \"APIFORMAT\");\n        api.putUnit(\"APIUNIT\", \"APIPROP\", \"APIONWER\", \"Name\", \"BOUTIQUE\", new LocalDate(1999, 6, 1), null, null, null, null, null, null, null, null, null, null, null);\n        Assert.assertThat(properties.findProperties(\"APIPROP\").size(), Is.is(1));\n    }\n\n    @Test\n    public void t02_putOrganisation() {\n        api.putOrganisation(\"APITENANT\", \"API Tenant\", \"vat\", \"fiscal\");\n        api.putOrganisation(\"APILANDLORD\", \"API Landlord\", \"vat\", \"fiscal\");\n        Assert.assertThat(parties.findParties(\"API*\").size(), Is.is(2));\n    }\n\n    @Test\n    public void t03_putPartyCommunicationChannels() {\n        api.putPartyCommunicationChannels(\"APITENANT\", \"APITENANT\", \"Address1\", \"Address2\", \"CITY\", \"Postal Code\", \"NH\", \"NLD\", \"+31987654321\", \"+31876543210\", \"test@api.local\");\n        Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.POSTAL_ADDRESS));\n        Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.FAX_NUMBER));\n        Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.PHONE_NUMBER));\n    }\n\n    @Test\n    public void t03_putPartyCommunicationChannelsWithoutReference() {\n        api.putPartyCommunicationChannels(\"APITENANT\", null, \"NewAddress1\", \"NewAddress2\", \"NewCity\", \"NewPostCode\", \"NH\", \"NLD\", \"+31222222222\", \"+31333333333\", \"test@example.com\");\n        Party party = parties.findPartyByReference(\"APITENANT\");\n        Assert.assertNotNull(postalAddresses.findByAddress(party, \"NewAddress1\", \"NewPostCode\", \"NewCity\", countries.findCountry(\"NLD\")));\n        Assert.assertNotNull(phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, \"+31222222222\"));\n        Assert.assertNotNull(emailAddresses.findByEmailAddress(party, \"test@example.com\"));\n    }\n\n    @Test\n    public void t04_putLeaseWorks() throws Exception {\n        api.putLease(\"APILEASE\", \"Lease\", \"APITENANT\", \"APILANDLORD\", \"APILEASETYPE\", START_DATE, new LocalDate(2021, 12, 31), null, \"APIPROP\");\n        Lease lease = leases.findLeaseByReference(\"APILEASE\");\n        Assert.assertNotNull(lease);\n        Assert.assertThat(lease.getRoles().size(), Is.is(2));\n    }\n\n    @Test\n    public void t05_putLeaseUnitWorks() throws Exception {\n        api.putOccupancy(\"APILEASE\", \"APIUNIT\", START_DATE, null, null, null, \"APISIZE\", \"ABIBRAND\", \"APISECTOR\", \"APIACTIVITY\", \"YES\", \"YES\", \"YES\");\n        Lease l = leases.findLeaseByReference(\"APILEASE\");\n        Unit u = units.findUnitByReference(\"APIUNIT\");\n        Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n        Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n    }\n\n    @Test\n    public void t05b_putLeasePostalAddress() throws Exception {\n        api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n        final Lease l = leases.findLeaseByReference(\"APILEASE\");\n        final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n        final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n        Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n    }\n\n    @Test\n    public void t05b_putLeasePostalAddress_idempotent() throws Exception {\n        api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n        final Lease l = leases.findLeaseByReference(\"APILEASE\");\n        final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n        final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n        Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n    }\n\n    @Test\n    public void t06_putLeaseItemWorks() throws Exception {\n        api.putLeaseItem(\"APILEASE\", \"APITENANT\", \"APIUNIT\", LeaseItemType.RENT.name(), BigInteger.valueOf(1), START_DATE, new LocalDate(2012, 12, 31), \"APICHARGEREF\", null, InvoicingFrequency.QUARTERLY_IN_ADVANCE.name(), PaymentMethod.DIRECT_DEBIT.name(), LeaseItemStatus.APPROVED.name());\n        Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getItems().size(), Is.is(1));\n    }\n\n    @Test\n    public void t07_putLeaseTermWorks() throws Exception {\n        api.putLeaseTermForIndexableRent(\n                \"APILEASE\",\n                \"APITENANT\",\n                \"APIUNIT\",\n                BigInteger.valueOf(1),\n                LeaseItemType.RENT.name(),\n                START_DATE,\n                BigInteger.valueOf(1),\n                START_DATE,\n                new LocalDate(2012, 12, 31),\n                LeaseTermStatus.NEW.name(),\n                IndexationStatus.NEXT.name(),\n                null,\n                null,\n                BigDecimal.valueOf(12345),\n                BigDecimal.valueOf(12345),\n                null,\n                null,\n                null,\n                \"APIINDEX\",\n                LeaseTermFrequency.YEARLY.name(),\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null);\n        api.putLeaseTermForIndexableRent(\"APILEASE\",\n                \"APITENANT\",\n                \"APIUNIT\",\n                BigInteger.valueOf(1),\n                LeaseItemType.RENT.name(),\n                START_DATE,\n                BigInteger.valueOf(2),\n                new LocalDate(2013, 1, 1),\n                new LocalDate(2013, 12, 31),\n                LeaseTermStatus.NEW.name(),\n                IndexationStatus.NEXT.name(),\n                null,\n                null,\n                BigDecimal.valueOf(12345),\n                BigDecimal.valueOf(12345),\n                null,\n                null,\n                null,\n                \"APIINDEX\",\n                LeaseTermFrequency.YEARLY.name(),\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null, \n                null);\n        Lease lease = leases.findLeaseByReference(\"APILEASE\");\n        Assert.assertThat(lease.getItems().first().getTerms().size(), Is.is(2));\n    }\n\n    @Test\n    public void t08_putBreakOptionWorks() throws Exception {\n        api.putBreakOption(\"APILEASE\", \"FIXED\", \"TENANT\", new LocalDate(2015, 1, 1), new LocalDate(2014, 7, 1), null, \"Test\");\n        api.putBreakOption(\"APILEASE\", \"ROLLING\", \"MUTUAL\", new LocalDate(2019, 1, 1), null, \"6m\", \"Test\");\n        Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getBreakOptions().size(), Is.is(2));\n    }\n\n}",
        "start_point": {
            "row": 73,
            "column": 0
        },
        "end_point": {
            "row": 311,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@BeforeClass\npublic static void setupTransactionalData() {\n    scenarioExecution().install(new EstatioTransactionalObjectsFixture());\n}",
                "name": "setupTransactionalData",
                "modifiers": "@BeforeClass\n    public static",
                "return_type": null,
                "parameters": [],
                "body": "{\n    scenarioExecution().install(new EstatioTransactionalObjectsFixture());\n}",
                "start_point": {
                    "row": 95,
                    "column": 4
                },
                "end_point": {
                    "row": 98,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Before\npublic void setUp() throws Exception {\n    api = service(Api.class);\n    leases = service(Leases.class);\n    properties = service(Properties.class);\n    states = service(States.class);\n    chargeGroups = service(ChargeGroups.class);\n    charges = service(Charges.class);\n    parties = service(Parties.class);\n    communicationChannels = service(CommunicationChannels.class);\n    units = (Units<?>) service(Units.class);\n    leaseUnits = service(Occupancies.class);\n    agreementRoleTypes = service(AgreementRoleTypes.class);\n    clockService = service(ClockService.class);\n    phoneOrFaxNumbers = service(PhoneOrFaxNumbers.class);\n    emailAddresses = service(EmailAddresses.class);\n    postalAddresses = service(PostalAddresses.class);\n    countries = service(Countries.class);\n    taxes = service(Taxes.class);\n\n}",
                "name": "setUp",
                "modifiers": "@Before\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api = service(Api.class);\n    leases = service(Leases.class);\n    properties = service(Properties.class);\n    states = service(States.class);\n    chargeGroups = service(ChargeGroups.class);\n    charges = service(Charges.class);\n    parties = service(Parties.class);\n    communicationChannels = service(CommunicationChannels.class);\n    units = (Units<?>) service(Units.class);\n    leaseUnits = service(Occupancies.class);\n    agreementRoleTypes = service(AgreementRoleTypes.class);\n    clockService = service(ClockService.class);\n    phoneOrFaxNumbers = service(PhoneOrFaxNumbers.class);\n    emailAddresses = service(EmailAddresses.class);\n    postalAddresses = service(PostalAddresses.class);\n    countries = service(Countries.class);\n    taxes = service(Taxes.class);\n\n}",
                "start_point": {
                    "row": 100,
                    "column": 4
                },
                "end_point": {
                    "row": 120,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t00_refData() throws Exception {\n\n    // country\n    api.putCountry(\"NLD\", \"NL\", \"Netherlands\");\n\n    Country netherlands = countries.findCountry(\"NLD\");\n    Assert.assertNotNull(netherlands);\n    assertThat(netherlands.getReference(), is(\"NLD\"));\n    assertThat(netherlands.getAlpha2Code(), is(\"NL\"));\n    assertThat(netherlands.getName(), is(\"Netherlands\"));\n\n    // state\n    api.putState(\"NH\", \"North Holland\", \"NLD\");\n    State state = states.findState(\"NH\");\n    Assert.assertNotNull(state);\n    assertThat(state.getReference(), is(\"NH\"));\n    assertThat(state.getName(), is(\"North Holland\"));\n    assertThat(state.getCountry(), is(netherlands));\n\n    api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21.0), new LocalDate(1980, 1, 1));\n    api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21), new LocalDate(1980, 1, 1));\n\n    final Tax tax = taxes.findTaxByReference(\"APITAXREF\");\n    Assert.assertNotNull(tax);\n    assertThat(tax.getReference(), is(\"APITAXREF\"));\n    assertThat(tax.getName(), is(\"APITAX Name\"));\n    Assert.assertNotNull(tax.percentageFor(LocalDate.now()));\n\n    api.putCharge(\"APICHARGEREF\", \"APICHARGENAME\", \"API CHARGE\", \"APITAXREF\", \"APICHARGEGROUP\");\n\n    final ChargeGroup chargeGroup = chargeGroups.findChargeGroup(\"APICHARGEGROUP\");\n    Assert.assertNotNull(chargeGroup);\n    assertThat(chargeGroup.getReference(), is(\"APICHARGEGROUP\"));\n    assertThat(chargeGroup.getName(), is(\"APICHARGEGROUP\"));\n\n    final Charge charge = charges.findCharge(\"APICHARGEREF\");\n    Assert.assertNotNull(charge);\n    assertThat(charge.getReference(), is(\"APICHARGEREF\"));\n    assertThat(charge.getName(), is(\"APICHARGENAME\"));\n    assertThat(charge.getDescription(), is(\"API CHARGE\"));\n    assertThat(charge.getTax(), is(tax));\n    assertThat(charge.getGroup(), is(chargeGroup));\n}",
                "name": "t00_refData",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n\n    // country\n    api.putCountry(\"NLD\", \"NL\", \"Netherlands\");\n\n    Country netherlands = countries.findCountry(\"NLD\");\n    Assert.assertNotNull(netherlands);\n    assertThat(netherlands.getReference(), is(\"NLD\"));\n    assertThat(netherlands.getAlpha2Code(), is(\"NL\"));\n    assertThat(netherlands.getName(), is(\"Netherlands\"));\n\n    // state\n    api.putState(\"NH\", \"North Holland\", \"NLD\");\n    State state = states.findState(\"NH\");\n    Assert.assertNotNull(state);\n    assertThat(state.getReference(), is(\"NH\"));\n    assertThat(state.getName(), is(\"North Holland\"));\n    assertThat(state.getCountry(), is(netherlands));\n\n    api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21.0), new LocalDate(1980, 1, 1));\n    api.putTax(\"APITAXREF\", \"APITAX Name\", BigDecimal.valueOf(21), new LocalDate(1980, 1, 1));\n\n    final Tax tax = taxes.findTaxByReference(\"APITAXREF\");\n    Assert.assertNotNull(tax);\n    assertThat(tax.getReference(), is(\"APITAXREF\"));\n    assertThat(tax.getName(), is(\"APITAX Name\"));\n    Assert.assertNotNull(tax.percentageFor(LocalDate.now()));\n\n    api.putCharge(\"APICHARGEREF\", \"APICHARGENAME\", \"API CHARGE\", \"APITAXREF\", \"APICHARGEGROUP\");\n\n    final ChargeGroup chargeGroup = chargeGroups.findChargeGroup(\"APICHARGEGROUP\");\n    Assert.assertNotNull(chargeGroup);\n    assertThat(chargeGroup.getReference(), is(\"APICHARGEGROUP\"));\n    assertThat(chargeGroup.getName(), is(\"APICHARGEGROUP\"));\n\n    final Charge charge = charges.findCharge(\"APICHARGEREF\");\n    Assert.assertNotNull(charge);\n    assertThat(charge.getReference(), is(\"APICHARGEREF\"));\n    assertThat(charge.getName(), is(\"APICHARGENAME\"));\n    assertThat(charge.getDescription(), is(\"API CHARGE\"));\n    assertThat(charge.getTax(), is(tax));\n    assertThat(charge.getGroup(), is(chargeGroup));\n}",
                "start_point": {
                    "row": 122,
                    "column": 4
                },
                "end_point": {
                    "row": 165,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t01_putAsset() throws Exception {\n    api.putProperty(\"APIPROP\", \"Apiland\", \"NLD\", \"ApiCity\", \"SHOPPING_CENTER\", null, null, null, \"HELLOWORLD\", \"APIFORMAT\");\n    api.putUnit(\"APIUNIT\", \"APIPROP\", \"APIONWER\", \"Name\", \"BOUTIQUE\", new LocalDate(1999, 6, 1), null, null, null, null, null, null, null, null, null, null, null);\n    Assert.assertThat(properties.findProperties(\"APIPROP\").size(), Is.is(1));\n}",
                "name": "t01_putAsset",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putProperty(\"APIPROP\", \"Apiland\", \"NLD\", \"ApiCity\", \"SHOPPING_CENTER\", null, null, null, \"HELLOWORLD\", \"APIFORMAT\");\n    api.putUnit(\"APIUNIT\", \"APIPROP\", \"APIONWER\", \"Name\", \"BOUTIQUE\", new LocalDate(1999, 6, 1), null, null, null, null, null, null, null, null, null, null, null);\n    Assert.assertThat(properties.findProperties(\"APIPROP\").size(), Is.is(1));\n}",
                "start_point": {
                    "row": 167,
                    "column": 4
                },
                "end_point": {
                    "row": 172,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t02_putOrganisation() {\n    api.putOrganisation(\"APITENANT\", \"API Tenant\", \"vat\", \"fiscal\");\n    api.putOrganisation(\"APILANDLORD\", \"API Landlord\", \"vat\", \"fiscal\");\n    Assert.assertThat(parties.findParties(\"API*\").size(), Is.is(2));\n}",
                "name": "t02_putOrganisation",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putOrganisation(\"APITENANT\", \"API Tenant\", \"vat\", \"fiscal\");\n    api.putOrganisation(\"APILANDLORD\", \"API Landlord\", \"vat\", \"fiscal\");\n    Assert.assertThat(parties.findParties(\"API*\").size(), Is.is(2));\n}",
                "start_point": {
                    "row": 174,
                    "column": 4
                },
                "end_point": {
                    "row": 179,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t03_putPartyCommunicationChannels() {\n    api.putPartyCommunicationChannels(\"APITENANT\", \"APITENANT\", \"Address1\", \"Address2\", \"CITY\", \"Postal Code\", \"NH\", \"NLD\", \"+31987654321\", \"+31876543210\", \"test@api.local\");\n    Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.POSTAL_ADDRESS));\n    Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.FAX_NUMBER));\n    Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.PHONE_NUMBER));\n}",
                "name": "t03_putPartyCommunicationChannels",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putPartyCommunicationChannels(\"APITENANT\", \"APITENANT\", \"Address1\", \"Address2\", \"CITY\", \"Postal Code\", \"NH\", \"NLD\", \"+31987654321\", \"+31876543210\", \"test@api.local\");\n    Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.POSTAL_ADDRESS));\n    Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.FAX_NUMBER));\n    Assert.assertNotNull(communicationChannels.findByReferenceAndType(\"APITENANT\", CommunicationChannelType.PHONE_NUMBER));\n}",
                "start_point": {
                    "row": 181,
                    "column": 4
                },
                "end_point": {
                    "row": 187,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t03_putPartyCommunicationChannelsWithoutReference() {\n    api.putPartyCommunicationChannels(\"APITENANT\", null, \"NewAddress1\", \"NewAddress2\", \"NewCity\", \"NewPostCode\", \"NH\", \"NLD\", \"+31222222222\", \"+31333333333\", \"test@example.com\");\n    Party party = parties.findPartyByReference(\"APITENANT\");\n    Assert.assertNotNull(postalAddresses.findByAddress(party, \"NewAddress1\", \"NewPostCode\", \"NewCity\", countries.findCountry(\"NLD\")));\n    Assert.assertNotNull(phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, \"+31222222222\"));\n    Assert.assertNotNull(emailAddresses.findByEmailAddress(party, \"test@example.com\"));\n}",
                "name": "t03_putPartyCommunicationChannelsWithoutReference",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putPartyCommunicationChannels(\"APITENANT\", null, \"NewAddress1\", \"NewAddress2\", \"NewCity\", \"NewPostCode\", \"NH\", \"NLD\", \"+31222222222\", \"+31333333333\", \"test@example.com\");\n    Party party = parties.findPartyByReference(\"APITENANT\");\n    Assert.assertNotNull(postalAddresses.findByAddress(party, \"NewAddress1\", \"NewPostCode\", \"NewCity\", countries.findCountry(\"NLD\")));\n    Assert.assertNotNull(phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, \"+31222222222\"));\n    Assert.assertNotNull(emailAddresses.findByEmailAddress(party, \"test@example.com\"));\n}",
                "start_point": {
                    "row": 189,
                    "column": 4
                },
                "end_point": {
                    "row": 196,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t04_putLeaseWorks() throws Exception {\n    api.putLease(\"APILEASE\", \"Lease\", \"APITENANT\", \"APILANDLORD\", \"APILEASETYPE\", START_DATE, new LocalDate(2021, 12, 31), null, \"APIPROP\");\n    Lease lease = leases.findLeaseByReference(\"APILEASE\");\n    Assert.assertNotNull(lease);\n    Assert.assertThat(lease.getRoles().size(), Is.is(2));\n}",
                "name": "t04_putLeaseWorks",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putLease(\"APILEASE\", \"Lease\", \"APITENANT\", \"APILANDLORD\", \"APILEASETYPE\", START_DATE, new LocalDate(2021, 12, 31), null, \"APIPROP\");\n    Lease lease = leases.findLeaseByReference(\"APILEASE\");\n    Assert.assertNotNull(lease);\n    Assert.assertThat(lease.getRoles().size(), Is.is(2));\n}",
                "start_point": {
                    "row": 198,
                    "column": 4
                },
                "end_point": {
                    "row": 204,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t05_putLeaseUnitWorks() throws Exception {\n    api.putOccupancy(\"APILEASE\", \"APIUNIT\", START_DATE, null, null, null, \"APISIZE\", \"ABIBRAND\", \"APISECTOR\", \"APIACTIVITY\", \"YES\", \"YES\", \"YES\");\n    Lease l = leases.findLeaseByReference(\"APILEASE\");\n    Unit u = units.findUnitByReference(\"APIUNIT\");\n    Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n    Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n}",
                "name": "t05_putLeaseUnitWorks",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putOccupancy(\"APILEASE\", \"APIUNIT\", START_DATE, null, null, null, \"APISIZE\", \"ABIBRAND\", \"APISECTOR\", \"APIACTIVITY\", \"YES\", \"YES\", \"YES\");\n    Lease l = leases.findLeaseByReference(\"APILEASE\");\n    Unit u = units.findUnitByReference(\"APIUNIT\");\n    Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n    Assert.assertNotNull(leaseUnits.findByLeaseAndUnitAndStartDate(l, u, START_DATE));\n}",
                "start_point": {
                    "row": 206,
                    "column": 4
                },
                "end_point": {
                    "row": 213,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t05b_putLeasePostalAddress() throws Exception {\n    api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n    final Lease l = leases.findLeaseByReference(\"APILEASE\");\n    final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n    final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n    Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n}",
                "name": "t05b_putLeasePostalAddress",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n    final Lease l = leases.findLeaseByReference(\"APILEASE\");\n    final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n    final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n    Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n}",
                "start_point": {
                    "row": 215,
                    "column": 4
                },
                "end_point": {
                    "row": 222,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t05b_putLeasePostalAddress_idempotent() throws Exception {\n    api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n    final Lease l = leases.findLeaseByReference(\"APILEASE\");\n    final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n    final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n    Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n}",
                "name": "t05b_putLeasePostalAddress_idempotent",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putLeasePostalAddress(\"APITENANT\", LeaseConstants.ART_TENANT, \"APILEASE\", \"Address1\", \"Address2\", \"PostalCode\", \"City\", \"NH\", \"NLD\", BigInteger.valueOf(1));\n    final Lease l = leases.findLeaseByReference(\"APILEASE\");\n    final AgreementRoleType artTenant = agreementRoleTypes.findByTitle(LeaseConstants.ART_TENANT);\n    final AgreementRole ar = l.findRoleWithType(artTenant, clockService.now());\n    Assert.assertThat(ar.getCommunicationChannels().size(), Is.is(1));\n}",
                "start_point": {
                    "row": 224,
                    "column": 4
                },
                "end_point": {
                    "row": 231,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t06_putLeaseItemWorks() throws Exception {\n    api.putLeaseItem(\"APILEASE\", \"APITENANT\", \"APIUNIT\", LeaseItemType.RENT.name(), BigInteger.valueOf(1), START_DATE, new LocalDate(2012, 12, 31), \"APICHARGEREF\", null, InvoicingFrequency.QUARTERLY_IN_ADVANCE.name(), PaymentMethod.DIRECT_DEBIT.name(), LeaseItemStatus.APPROVED.name());\n    Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getItems().size(), Is.is(1));\n}",
                "name": "t06_putLeaseItemWorks",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putLeaseItem(\"APILEASE\", \"APITENANT\", \"APIUNIT\", LeaseItemType.RENT.name(), BigInteger.valueOf(1), START_DATE, new LocalDate(2012, 12, 31), \"APICHARGEREF\", null, InvoicingFrequency.QUARTERLY_IN_ADVANCE.name(), PaymentMethod.DIRECT_DEBIT.name(), LeaseItemStatus.APPROVED.name());\n    Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getItems().size(), Is.is(1));\n}",
                "start_point": {
                    "row": 233,
                    "column": 4
                },
                "end_point": {
                    "row": 237,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Test\npublic void t07_putLeaseTermWorks() throws Exception {\n    api.putLeaseTermForIndexableRent(\n            \"APILEASE\",\n            \"APITENANT\",\n            \"APIUNIT\",\n            BigInteger.valueOf(1),\n            LeaseItemType.RENT.name(),\n            START_DATE,\n            BigInteger.valueOf(1),\n            START_DATE,\n            new LocalDate(2012, 12, 31),\n            LeaseTermStatus.NEW.name(),\n            IndexationStatus.NEXT.name(),\n            null,\n            null,\n            BigDecimal.valueOf(12345),\n            BigDecimal.valueOf(12345),\n            null,\n            null,\n            null,\n            \"APIINDEX\",\n            LeaseTermFrequency.YEARLY.name(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null);\n    api.putLeaseTermForIndexableRent(\"APILEASE\",\n            \"APITENANT\",\n            \"APIUNIT\",\n            BigInteger.valueOf(1),\n            LeaseItemType.RENT.name(),\n            START_DATE,\n            BigInteger.valueOf(2),\n            new LocalDate(2013, 1, 1),\n            new LocalDate(2013, 12, 31),\n            LeaseTermStatus.NEW.name(),\n            IndexationStatus.NEXT.name(),\n            null,\n            null,\n            BigDecimal.valueOf(12345),\n            BigDecimal.valueOf(12345),\n            null,\n            null,\n            null,\n            \"APIINDEX\",\n            LeaseTermFrequency.YEARLY.name(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null, \n            null);\n    Lease lease = leases.findLeaseByReference(\"APILEASE\");\n    Assert.assertThat(lease.getItems().first().getTerms().size(), Is.is(2));\n}",
                "name": "t07_putLeaseTermWorks",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putLeaseTermForIndexableRent(\n            \"APILEASE\",\n            \"APITENANT\",\n            \"APIUNIT\",\n            BigInteger.valueOf(1),\n            LeaseItemType.RENT.name(),\n            START_DATE,\n            BigInteger.valueOf(1),\n            START_DATE,\n            new LocalDate(2012, 12, 31),\n            LeaseTermStatus.NEW.name(),\n            IndexationStatus.NEXT.name(),\n            null,\n            null,\n            BigDecimal.valueOf(12345),\n            BigDecimal.valueOf(12345),\n            null,\n            null,\n            null,\n            \"APIINDEX\",\n            LeaseTermFrequency.YEARLY.name(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null);\n    api.putLeaseTermForIndexableRent(\"APILEASE\",\n            \"APITENANT\",\n            \"APIUNIT\",\n            BigInteger.valueOf(1),\n            LeaseItemType.RENT.name(),\n            START_DATE,\n            BigInteger.valueOf(2),\n            new LocalDate(2013, 1, 1),\n            new LocalDate(2013, 12, 31),\n            LeaseTermStatus.NEW.name(),\n            IndexationStatus.NEXT.name(),\n            null,\n            null,\n            BigDecimal.valueOf(12345),\n            BigDecimal.valueOf(12345),\n            null,\n            null,\n            null,\n            \"APIINDEX\",\n            LeaseTermFrequency.YEARLY.name(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null, \n            null);\n    Lease lease = leases.findLeaseByReference(\"APILEASE\");\n    Assert.assertThat(lease.getItems().first().getTerms().size(), Is.is(2));\n}",
                "start_point": {
                    "row": 239,
                    "column": 4
                },
                "end_point": {
                    "row": 302,
                    "column": 5
                },
                "method_mode": "Modified"
            },
            {
                "definition": "@Test\npublic void t08_putBreakOptionWorks() throws Exception {\n    api.putBreakOption(\"APILEASE\", \"FIXED\", \"TENANT\", new LocalDate(2015, 1, 1), new LocalDate(2014, 7, 1), null, \"Test\");\n    api.putBreakOption(\"APILEASE\", \"ROLLING\", \"MUTUAL\", new LocalDate(2019, 1, 1), null, \"6m\", \"Test\");\n    Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getBreakOptions().size(), Is.is(2));\n}",
                "name": "t08_putBreakOptionWorks",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    api.putBreakOption(\"APILEASE\", \"FIXED\", \"TENANT\", new LocalDate(2015, 1, 1), new LocalDate(2014, 7, 1), null, \"Test\");\n    api.putBreakOption(\"APILEASE\", \"ROLLING\", \"MUTUAL\", new LocalDate(2019, 1, 1), null, \"6m\", \"Test\");\n    Assert.assertThat(leases.findLeaseByReference(\"APILEASE\").getBreakOptions().size(), Is.is(2));\n}",
                "start_point": {
                    "row": 304,
                    "column": 4
                },
                "end_point": {
                    "row": 309,
                    "column": 5
                },
                "method_mode": "Unchanged"
            }
        ],
        "class_mode": "Modified"
    }
]