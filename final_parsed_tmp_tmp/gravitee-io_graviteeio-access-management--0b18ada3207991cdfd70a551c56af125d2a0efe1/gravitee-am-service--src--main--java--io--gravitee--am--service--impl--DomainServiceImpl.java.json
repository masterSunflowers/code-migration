[
    {
        "repo_name": "gravitee-io_graviteeio-access-management",
        "commit": "0b18ada3207991cdfd70a551c56af125d2a0efe1",
        "rev_path": "gravitee-am-service/src/main/java/io/gravitee/am/service/impl/DomainServiceImpl.java",
        "definition": "@Component\npublic class DomainServiceImpl implements DomainService {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(DomainServiceImpl.class);\n\n    @Autowired\n    private DomainRepository domainRepository;\n\n    @Autowired\n    private ClientService clientService;\n\n    @Autowired\n    private CertificateService certificateService;\n\n    @Autowired\n    private IdentityProviderService identityProviderService;\n\n    @Autowired\n    private RoleService roleService;\n\n    @Autowired\n    private UserService userService;\n\n    @Override\n    public Maybe<Domain> findById(String id) {\n        LOGGER.debug(\"Find domain by ID: {}\", id);\n        return domainRepository.findById(id)\n                .onErrorResumeNext(ex -> {\n                    LOGGER.error(\"An error occurs while trying to find a domain using its ID: {}\", id, ex);\n                    return Maybe.error(new TechnicalManagementException(\n                            String.format(\"An error occurs while trying to find a domain using its ID: %s\", id), ex));\n                });\n    }\n\n    @Override\n    public Single<Set<Domain>> findAll() {\n        LOGGER.debug(\"Find all domains\");\n        return domainRepository.findAll()\n                .onErrorResumeNext(ex -> {\n                    LOGGER.error(\"An error occurs while trying to find all domains\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to find all domains\", ex));\n                });\n    }\n\n    @Override\n    public Single<Set<Domain>> findByIdIn(Collection<String> ids) {\n        LOGGER.debug(\"Find domains by id in {}\", ids);\n        return domainRepository.findByIdIn(ids)\n                .onErrorResumeNext(ex -> {\n                    LOGGER.error(\"An error occurs while trying to find domains by id in {}\", ids, ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to find domains by id in\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> create(NewDomain newDomain) {\n        LOGGER.debug(\"Create a new domain: {}\", newDomain);\n        String id = generateContextPath(newDomain.getName());\n\n        return domainRepository.findById(id)\n                .isEmpty()\n                .flatMap(empty -> {\n                    if (!empty) {\n                        throw new DomainAlreadyExistsException(newDomain.getName());\n                    } else {\n                        Domain domain = new Domain();\n                        domain.setId(id);\n                        domain.setPath(id);\n                        domain.setName(newDomain.getName());\n                        domain.setDescription(newDomain.getDescription());\n                        domain.setEnabled(false);\n                        domain.setCreatedAt(new Date());\n                        domain.setUpdatedAt(domain.getCreatedAt());\n                        return domainRepository.create(domain);\n                    }\n                })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to create a domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to create a domain\", ex));\n            });\n    }\n\n    @Override\n    public Single<Domain> update(String domainId, UpdateDomain updateDomain) {\n        LOGGER.debug(\"Update an existing domain: {}\", updateDomain);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain oldDomain = domainOpt.get();\n\n                        Domain domain = new Domain();\n                        domain.setId(domainId);\n                        domain.setPath(updateDomain.getPath());\n                        domain.setName(updateDomain.getName());\n                        domain.setDescription(updateDomain.getDescription());\n                        domain.setEnabled(updateDomain.isEnabled());\n                        domain.setIdentities(updateDomain.getIdentities());\n                        domain.setOauth2Identities(updateDomain.getOauth2Identities());\n                        // master flag is set programmatically (keep old value)\n                        domain.setMaster(oldDomain.isMaster());\n                        domain.setCreatedAt(oldDomain.getCreatedAt());\n                        domain.setUpdatedAt(new Date());\n                        domain.setLoginForm(oldDomain.getLoginForm());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to update a domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> reload(String domainId) {\n        LOGGER.debug(\"Reload a domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain oldDomain = domainOpt.get();\n\n                        Domain domain = new Domain();\n                        domain.setId(domainId);\n                        domain.setPath(oldDomain.getPath());\n                        domain.setName(oldDomain.getName());\n                        domain.setDescription(oldDomain.getDescription());\n                        domain.setEnabled(oldDomain.isEnabled());\n                        domain.setMaster(oldDomain.isMaster());\n                        domain.setCreatedAt(oldDomain.getCreatedAt());\n                        domain.setUpdatedAt(new Date());\n                        domain.setLoginForm(oldDomain.getLoginForm());\n                        domain.setIdentities(oldDomain.getIdentities());\n                        domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to reload a domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to reload a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> setMasterDomain(String domainId, boolean isMaster) {\n        LOGGER.debug(\"Set master flag for domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain oldDomain = domainOpt.get();\n\n                        Domain domain = new Domain();\n                        domain.setId(domainId);\n                        domain.setPath(oldDomain.getPath());\n                        domain.setName(oldDomain.getName());\n                        domain.setDescription(oldDomain.getDescription());\n                        domain.setEnabled(oldDomain.isEnabled());\n                        domain.setMaster(isMaster);\n                        domain.setCreatedAt(oldDomain.getCreatedAt());\n                        domain.setUpdatedAt(new Date());\n                        domain.setLoginForm(oldDomain.getLoginForm());\n                        domain.setIdentities(oldDomain.getIdentities());\n                        domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to set master flag for domain {}\", domainId, ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to set master flag for a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Irrelevant> delete(String domainId) {\n        LOGGER.debug(\"Delete security domain {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(optDomain -> {\n                    if (!optDomain.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    }\n                    if (optDomain.get().isMaster()) {\n                        throw new DomainDeleteMasterException(domainId);\n                    }\n                    return Single.just(optDomain.get());\n                })\n                .flatMap(domain -> {\n                    // delete clients\n                    return clientService.findByDomain(domainId)\n                            .flatMap(clients -> Observable.fromIterable(clients)\n                                    .flatMapSingle(c -> clientService.delete(c.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete certificates\n                    return certificateService.findByDomain(domainId)\n                            .flatMap(certificates -> Observable.fromIterable(certificates)\n                                    .flatMapSingle(c -> certificateService.delete(c.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete identity providers\n                    return identityProviderService.findByDomain(domainId)\n                            .flatMap(idps -> Observable.fromIterable(idps)\n                                    .flatMapSingle(i -> identityProviderService.delete(i.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete roles\n                    return roleService.findByDomain(domainId)\n                            .flatMap(roles -> Observable.fromIterable(roles)\n                                    .flatMapSingle(r -> roleService.delete(r.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete users\n                    return userService.findByDomain(domainId)\n                            .flatMap(users -> Observable.fromIterable(users)\n                                    .flatMapSingle(u -> userService.delete(u.getId())).toList());\n                })\n                .flatMap(irrelevant -> domainRepository.delete(domainId))\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to delete security domain {}\", domainId, ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to delete security domain \" + domainId, ex));\n                });\n    }\n\n    @Override\n    public Single<LoginForm> updateLoginForm(String domainId, UpdateLoginForm loginForm) {\n        LOGGER.debug(\"Update login form of an existing domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        LoginForm form = new LoginForm();\n                        form.setEnabled(loginForm.isEnabled());\n                        form.setContent(loginForm.getContent());\n                        form.setAssets(loginForm.getAssets());\n\n                        Domain domain = domainOpt.get();\n                        domain.setLoginForm(form);\n                        domain.setUpdatedAt(new Date());\n\n                        return domainRepository.update(domain).map(domain1 -> form);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> deleteLoginForm(String domainId) {\n        LOGGER.debug(\"Delete login form of an existing domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain domain = domainOpt.get();\n                        domain.setLoginForm(null);\n                        domain.setUpdatedAt(new Date());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to update login form domain\", ex));\n                });\n    }\n\n    private String generateContextPath(String domainName) {\n        String nfdNormalizedString = Normalizer.normalize(domainName, Normalizer.Form.NFD);\n        Pattern pattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");\n        domainName = pattern.matcher(nfdNormalizedString).replaceAll(\"\");\n        return domainName.toLowerCase().trim().replaceAll(\"\\\\s{1,}\", \"-\");\n    }\n}",
        "package": "package io.gravitee.am.service.impl;",
        "tree_path": "DomainServiceImpl",
        "name": "DomainServiceImpl",
        "modifiers": "@Component\npublic",
        "superclass": null,
        "super_interfaces": "implements DomainService",
        "body": "{\n\n    private final Logger LOGGER = LoggerFactory.getLogger(DomainServiceImpl.class);\n\n    @Autowired\n    private DomainRepository domainRepository;\n\n    @Autowired\n    private ClientService clientService;\n\n    @Autowired\n    private CertificateService certificateService;\n\n    @Autowired\n    private IdentityProviderService identityProviderService;\n\n    @Autowired\n    private RoleService roleService;\n\n    @Autowired\n    private UserService userService;\n\n    @Override\n    public Maybe<Domain> findById(String id) {\n        LOGGER.debug(\"Find domain by ID: {}\", id);\n        return domainRepository.findById(id)\n                .onErrorResumeNext(ex -> {\n                    LOGGER.error(\"An error occurs while trying to find a domain using its ID: {}\", id, ex);\n                    return Maybe.error(new TechnicalManagementException(\n                            String.format(\"An error occurs while trying to find a domain using its ID: %s\", id), ex));\n                });\n    }\n\n    @Override\n    public Single<Set<Domain>> findAll() {\n        LOGGER.debug(\"Find all domains\");\n        return domainRepository.findAll()\n                .onErrorResumeNext(ex -> {\n                    LOGGER.error(\"An error occurs while trying to find all domains\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to find all domains\", ex));\n                });\n    }\n\n    @Override\n    public Single<Set<Domain>> findByIdIn(Collection<String> ids) {\n        LOGGER.debug(\"Find domains by id in {}\", ids);\n        return domainRepository.findByIdIn(ids)\n                .onErrorResumeNext(ex -> {\n                    LOGGER.error(\"An error occurs while trying to find domains by id in {}\", ids, ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to find domains by id in\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> create(NewDomain newDomain) {\n        LOGGER.debug(\"Create a new domain: {}\", newDomain);\n        String id = generateContextPath(newDomain.getName());\n\n        return domainRepository.findById(id)\n                .isEmpty()\n                .flatMap(empty -> {\n                    if (!empty) {\n                        throw new DomainAlreadyExistsException(newDomain.getName());\n                    } else {\n                        Domain domain = new Domain();\n                        domain.setId(id);\n                        domain.setPath(id);\n                        domain.setName(newDomain.getName());\n                        domain.setDescription(newDomain.getDescription());\n                        domain.setEnabled(false);\n                        domain.setCreatedAt(new Date());\n                        domain.setUpdatedAt(domain.getCreatedAt());\n                        return domainRepository.create(domain);\n                    }\n                })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to create a domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to create a domain\", ex));\n            });\n    }\n\n    @Override\n    public Single<Domain> update(String domainId, UpdateDomain updateDomain) {\n        LOGGER.debug(\"Update an existing domain: {}\", updateDomain);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain oldDomain = domainOpt.get();\n\n                        Domain domain = new Domain();\n                        domain.setId(domainId);\n                        domain.setPath(updateDomain.getPath());\n                        domain.setName(updateDomain.getName());\n                        domain.setDescription(updateDomain.getDescription());\n                        domain.setEnabled(updateDomain.isEnabled());\n                        domain.setIdentities(updateDomain.getIdentities());\n                        domain.setOauth2Identities(updateDomain.getOauth2Identities());\n                        // master flag is set programmatically (keep old value)\n                        domain.setMaster(oldDomain.isMaster());\n                        domain.setCreatedAt(oldDomain.getCreatedAt());\n                        domain.setUpdatedAt(new Date());\n                        domain.setLoginForm(oldDomain.getLoginForm());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to update a domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> reload(String domainId) {\n        LOGGER.debug(\"Reload a domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain oldDomain = domainOpt.get();\n\n                        Domain domain = new Domain();\n                        domain.setId(domainId);\n                        domain.setPath(oldDomain.getPath());\n                        domain.setName(oldDomain.getName());\n                        domain.setDescription(oldDomain.getDescription());\n                        domain.setEnabled(oldDomain.isEnabled());\n                        domain.setMaster(oldDomain.isMaster());\n                        domain.setCreatedAt(oldDomain.getCreatedAt());\n                        domain.setUpdatedAt(new Date());\n                        domain.setLoginForm(oldDomain.getLoginForm());\n                        domain.setIdentities(oldDomain.getIdentities());\n                        domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to reload a domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to reload a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> setMasterDomain(String domainId, boolean isMaster) {\n        LOGGER.debug(\"Set master flag for domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain oldDomain = domainOpt.get();\n\n                        Domain domain = new Domain();\n                        domain.setId(domainId);\n                        domain.setPath(oldDomain.getPath());\n                        domain.setName(oldDomain.getName());\n                        domain.setDescription(oldDomain.getDescription());\n                        domain.setEnabled(oldDomain.isEnabled());\n                        domain.setMaster(isMaster);\n                        domain.setCreatedAt(oldDomain.getCreatedAt());\n                        domain.setUpdatedAt(new Date());\n                        domain.setLoginForm(oldDomain.getLoginForm());\n                        domain.setIdentities(oldDomain.getIdentities());\n                        domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to set master flag for domain {}\", domainId, ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to set master flag for a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Irrelevant> delete(String domainId) {\n        LOGGER.debug(\"Delete security domain {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(optDomain -> {\n                    if (!optDomain.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    }\n                    if (optDomain.get().isMaster()) {\n                        throw new DomainDeleteMasterException(domainId);\n                    }\n                    return Single.just(optDomain.get());\n                })\n                .flatMap(domain -> {\n                    // delete clients\n                    return clientService.findByDomain(domainId)\n                            .flatMap(clients -> Observable.fromIterable(clients)\n                                    .flatMapSingle(c -> clientService.delete(c.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete certificates\n                    return certificateService.findByDomain(domainId)\n                            .flatMap(certificates -> Observable.fromIterable(certificates)\n                                    .flatMapSingle(c -> certificateService.delete(c.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete identity providers\n                    return identityProviderService.findByDomain(domainId)\n                            .flatMap(idps -> Observable.fromIterable(idps)\n                                    .flatMapSingle(i -> identityProviderService.delete(i.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete roles\n                    return roleService.findByDomain(domainId)\n                            .flatMap(roles -> Observable.fromIterable(roles)\n                                    .flatMapSingle(r -> roleService.delete(r.getId())).toList());\n                })\n                .flatMap(irrelevant -> {\n                    // delete users\n                    return userService.findByDomain(domainId)\n                            .flatMap(users -> Observable.fromIterable(users)\n                                    .flatMapSingle(u -> userService.delete(u.getId())).toList());\n                })\n                .flatMap(irrelevant -> domainRepository.delete(domainId))\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to delete security domain {}\", domainId, ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to delete security domain \" + domainId, ex));\n                });\n    }\n\n    @Override\n    public Single<LoginForm> updateLoginForm(String domainId, UpdateLoginForm loginForm) {\n        LOGGER.debug(\"Update login form of an existing domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        LoginForm form = new LoginForm();\n                        form.setEnabled(loginForm.isEnabled());\n                        form.setContent(loginForm.getContent());\n                        form.setAssets(loginForm.getAssets());\n\n                        Domain domain = domainOpt.get();\n                        domain.setLoginForm(form);\n                        domain.setUpdatedAt(new Date());\n\n                        return domainRepository.update(domain).map(domain1 -> form);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n                });\n    }\n\n    @Override\n    public Single<Domain> deleteLoginForm(String domainId) {\n        LOGGER.debug(\"Delete login form of an existing domain: {}\", domainId);\n        return domainRepository.findById(domainId)\n                .map(domain -> Optional.of(domain))\n                .defaultIfEmpty(Optional.empty())\n                .toSingle()\n                .flatMap(domainOpt -> {\n                    if(!domainOpt.isPresent()) {\n                        throw new DomainNotFoundException(domainId);\n                    } else {\n                        Domain domain = domainOpt.get();\n                        domain.setLoginForm(null);\n                        domain.setUpdatedAt(new Date());\n\n                        return domainRepository.update(domain);\n                    }\n                })\n                .onErrorResumeNext(ex -> {\n                    if (ex instanceof AbstractManagementException) {\n                        return Single.error(ex);\n                    }\n\n                    LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                    return Single.error(new TechnicalManagementException(\"An error occurs while trying to update login form domain\", ex));\n                });\n    }\n\n    private String generateContextPath(String domainName) {\n        String nfdNormalizedString = Normalizer.normalize(domainName, Normalizer.Form.NFD);\n        Pattern pattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");\n        domainName = pattern.matcher(nfdNormalizedString).replaceAll(\"\");\n        return domainName.toLowerCase().trim().replaceAll(\"\\\\s{1,}\", \"-\");\n    }\n}",
        "start_point": {
            "row": 46,
            "column": 0
        },
        "end_point": {
            "row": 374,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Override\npublic Maybe<Domain> findById(String id) {\n    LOGGER.debug(\"Find domain by ID: {}\", id);\n    return domainRepository.findById(id)\n            .onErrorResumeNext(ex -> {\n                LOGGER.error(\"An error occurs while trying to find a domain using its ID: {}\", id, ex);\n                return Maybe.error(new TechnicalManagementException(\n                        String.format(\"An error occurs while trying to find a domain using its ID: %s\", id), ex));\n            });\n}",
                "name": "findById",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Find domain by ID: {}\", id);\n    return domainRepository.findById(id)\n            .onErrorResumeNext(ex -> {\n                LOGGER.error(\"An error occurs while trying to find a domain using its ID: {}\", id, ex);\n                return Maybe.error(new TechnicalManagementException(\n                        String.format(\"An error occurs while trying to find a domain using its ID: %s\", id), ex));\n            });\n}",
                "start_point": {
                    "row": 69,
                    "column": 4
                },
                "end_point": {
                    "row": 78,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Override\npublic Single<Set<Domain>> findAll() {\n    LOGGER.debug(\"Find all domains\");\n    return domainRepository.findAll()\n            .onErrorResumeNext(ex -> {\n                LOGGER.error(\"An error occurs while trying to find all domains\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to find all domains\", ex));\n            });\n}",
                "name": "findAll",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    LOGGER.debug(\"Find all domains\");\n    return domainRepository.findAll()\n            .onErrorResumeNext(ex -> {\n                LOGGER.error(\"An error occurs while trying to find all domains\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to find all domains\", ex));\n            });\n}",
                "start_point": {
                    "row": 80,
                    "column": 4
                },
                "end_point": {
                    "row": 88,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Override\npublic Single<Set<Domain>> findByIdIn(Collection<String> ids) {\n    LOGGER.debug(\"Find domains by id in {}\", ids);\n    return domainRepository.findByIdIn(ids)\n            .onErrorResumeNext(ex -> {\n                LOGGER.error(\"An error occurs while trying to find domains by id in {}\", ids, ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to find domains by id in\", ex));\n            });\n}",
                "name": "findByIdIn",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Collection<String>",
                        "name": "ids"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Find domains by id in {}\", ids);\n    return domainRepository.findByIdIn(ids)\n            .onErrorResumeNext(ex -> {\n                LOGGER.error(\"An error occurs while trying to find domains by id in {}\", ids, ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to find domains by id in\", ex));\n            });\n}",
                "start_point": {
                    "row": 90,
                    "column": 4
                },
                "end_point": {
                    "row": 98,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Override\npublic Single<Domain> create(NewDomain newDomain) {\n    LOGGER.debug(\"Create a new domain: {}\", newDomain);\n    String id = generateContextPath(newDomain.getName());\n\n    return domainRepository.findById(id)\n            .isEmpty()\n            .flatMap(empty -> {\n                if (!empty) {\n                    throw new DomainAlreadyExistsException(newDomain.getName());\n                } else {\n                    Domain domain = new Domain();\n                    domain.setId(id);\n                    domain.setPath(id);\n                    domain.setName(newDomain.getName());\n                    domain.setDescription(newDomain.getDescription());\n                    domain.setEnabled(false);\n                    domain.setCreatedAt(new Date());\n                    domain.setUpdatedAt(domain.getCreatedAt());\n                    return domainRepository.create(domain);\n                }\n            })\n        .onErrorResumeNext(ex -> {\n            if (ex instanceof AbstractManagementException) {\n                return Single.error(ex);\n            }\n\n            LOGGER.error(\"An error occurs while trying to create a domain\", ex);\n            return Single.error(new TechnicalManagementException(\"An error occurs while trying to create a domain\", ex));\n        });\n}",
                "name": "create",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "NewDomain",
                        "name": "newDomain"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Create a new domain: {}\", newDomain);\n    String id = generateContextPath(newDomain.getName());\n\n    return domainRepository.findById(id)\n            .isEmpty()\n            .flatMap(empty -> {\n                if (!empty) {\n                    throw new DomainAlreadyExistsException(newDomain.getName());\n                } else {\n                    Domain domain = new Domain();\n                    domain.setId(id);\n                    domain.setPath(id);\n                    domain.setName(newDomain.getName());\n                    domain.setDescription(newDomain.getDescription());\n                    domain.setEnabled(false);\n                    domain.setCreatedAt(new Date());\n                    domain.setUpdatedAt(domain.getCreatedAt());\n                    return domainRepository.create(domain);\n                }\n            })\n        .onErrorResumeNext(ex -> {\n            if (ex instanceof AbstractManagementException) {\n                return Single.error(ex);\n            }\n\n            LOGGER.error(\"An error occurs while trying to create a domain\", ex);\n            return Single.error(new TechnicalManagementException(\"An error occurs while trying to create a domain\", ex));\n        });\n}",
                "start_point": {
                    "row": 100,
                    "column": 4
                },
                "end_point": {
                    "row": 130,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Override\npublic Single<Domain> update(String domainId, UpdateDomain updateDomain) {\n    LOGGER.debug(\"Update an existing domain: {}\", updateDomain);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain oldDomain = domainOpt.get();\n\n                    Domain domain = new Domain();\n                    domain.setId(domainId);\n                    domain.setPath(updateDomain.getPath());\n                    domain.setName(updateDomain.getName());\n                    domain.setDescription(updateDomain.getDescription());\n                    domain.setEnabled(updateDomain.isEnabled());\n                    domain.setIdentities(updateDomain.getIdentities());\n                    domain.setOauth2Identities(updateDomain.getOauth2Identities());\n                    // master flag is set programmatically (keep old value)\n                    domain.setMaster(oldDomain.isMaster());\n                    domain.setCreatedAt(oldDomain.getCreatedAt());\n                    domain.setUpdatedAt(new Date());\n                    domain.setLoginForm(oldDomain.getLoginForm());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to update a domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n            });\n}",
                "name": "update",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "domainId"
                    },
                    {
                        "type": "UpdateDomain",
                        "name": "updateDomain"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Update an existing domain: {}\", updateDomain);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain oldDomain = domainOpt.get();\n\n                    Domain domain = new Domain();\n                    domain.setId(domainId);\n                    domain.setPath(updateDomain.getPath());\n                    domain.setName(updateDomain.getName());\n                    domain.setDescription(updateDomain.getDescription());\n                    domain.setEnabled(updateDomain.isEnabled());\n                    domain.setIdentities(updateDomain.getIdentities());\n                    domain.setOauth2Identities(updateDomain.getOauth2Identities());\n                    // master flag is set programmatically (keep old value)\n                    domain.setMaster(oldDomain.isMaster());\n                    domain.setCreatedAt(oldDomain.getCreatedAt());\n                    domain.setUpdatedAt(new Date());\n                    domain.setLoginForm(oldDomain.getLoginForm());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to update a domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n            });\n}",
                "start_point": {
                    "row": 132,
                    "column": 4
                },
                "end_point": {
                    "row": 170,
                    "column": 5
                },
                "method_mode": "Modified"
            },
            {
                "definition": "@Override\npublic Single<Domain> reload(String domainId) {\n    LOGGER.debug(\"Reload a domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain oldDomain = domainOpt.get();\n\n                    Domain domain = new Domain();\n                    domain.setId(domainId);\n                    domain.setPath(oldDomain.getPath());\n                    domain.setName(oldDomain.getName());\n                    domain.setDescription(oldDomain.getDescription());\n                    domain.setEnabled(oldDomain.isEnabled());\n                    domain.setMaster(oldDomain.isMaster());\n                    domain.setCreatedAt(oldDomain.getCreatedAt());\n                    domain.setUpdatedAt(new Date());\n                    domain.setLoginForm(oldDomain.getLoginForm());\n                    domain.setIdentities(oldDomain.getIdentities());\n                    domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to reload a domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to reload a domain\", ex));\n            });\n}",
                "name": "reload",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "domainId"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Reload a domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain oldDomain = domainOpt.get();\n\n                    Domain domain = new Domain();\n                    domain.setId(domainId);\n                    domain.setPath(oldDomain.getPath());\n                    domain.setName(oldDomain.getName());\n                    domain.setDescription(oldDomain.getDescription());\n                    domain.setEnabled(oldDomain.isEnabled());\n                    domain.setMaster(oldDomain.isMaster());\n                    domain.setCreatedAt(oldDomain.getCreatedAt());\n                    domain.setUpdatedAt(new Date());\n                    domain.setLoginForm(oldDomain.getLoginForm());\n                    domain.setIdentities(oldDomain.getIdentities());\n                    domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to reload a domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to reload a domain\", ex));\n            });\n}",
                "start_point": {
                    "row": 172,
                    "column": 4
                },
                "end_point": {
                    "row": 209,
                    "column": 5
                },
                "method_mode": "Modified"
            },
            {
                "definition": "@Override\npublic Single<Domain> setMasterDomain(String domainId, boolean isMaster) {\n    LOGGER.debug(\"Set master flag for domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain oldDomain = domainOpt.get();\n\n                    Domain domain = new Domain();\n                    domain.setId(domainId);\n                    domain.setPath(oldDomain.getPath());\n                    domain.setName(oldDomain.getName());\n                    domain.setDescription(oldDomain.getDescription());\n                    domain.setEnabled(oldDomain.isEnabled());\n                    domain.setMaster(isMaster);\n                    domain.setCreatedAt(oldDomain.getCreatedAt());\n                    domain.setUpdatedAt(new Date());\n                    domain.setLoginForm(oldDomain.getLoginForm());\n                    domain.setIdentities(oldDomain.getIdentities());\n                    domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to set master flag for domain {}\", domainId, ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to set master flag for a domain\", ex));\n            });\n}",
                "name": "setMasterDomain",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "domainId"
                    },
                    {
                        "type": "boolean",
                        "name": "isMaster"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Set master flag for domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain oldDomain = domainOpt.get();\n\n                    Domain domain = new Domain();\n                    domain.setId(domainId);\n                    domain.setPath(oldDomain.getPath());\n                    domain.setName(oldDomain.getName());\n                    domain.setDescription(oldDomain.getDescription());\n                    domain.setEnabled(oldDomain.isEnabled());\n                    domain.setMaster(isMaster);\n                    domain.setCreatedAt(oldDomain.getCreatedAt());\n                    domain.setUpdatedAt(new Date());\n                    domain.setLoginForm(oldDomain.getLoginForm());\n                    domain.setIdentities(oldDomain.getIdentities());\n                    domain.setOauth2Identities(oldDomain.getOauth2Identities());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to set master flag for domain {}\", domainId, ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to set master flag for a domain\", ex));\n            });\n}",
                "start_point": {
                    "row": 211,
                    "column": 4
                },
                "end_point": {
                    "row": 248,
                    "column": 5
                },
                "method_mode": "Modified"
            },
            {
                "definition": "@Override\npublic Single<Irrelevant> delete(String domainId) {\n    LOGGER.debug(\"Delete security domain {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(optDomain -> {\n                if (!optDomain.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                }\n                if (optDomain.get().isMaster()) {\n                    throw new DomainDeleteMasterException(domainId);\n                }\n                return Single.just(optDomain.get());\n            })\n            .flatMap(domain -> {\n                // delete clients\n                return clientService.findByDomain(domainId)\n                        .flatMap(clients -> Observable.fromIterable(clients)\n                                .flatMapSingle(c -> clientService.delete(c.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete certificates\n                return certificateService.findByDomain(domainId)\n                        .flatMap(certificates -> Observable.fromIterable(certificates)\n                                .flatMapSingle(c -> certificateService.delete(c.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete identity providers\n                return identityProviderService.findByDomain(domainId)\n                        .flatMap(idps -> Observable.fromIterable(idps)\n                                .flatMapSingle(i -> identityProviderService.delete(i.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete roles\n                return roleService.findByDomain(domainId)\n                        .flatMap(roles -> Observable.fromIterable(roles)\n                                .flatMapSingle(r -> roleService.delete(r.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete users\n                return userService.findByDomain(domainId)\n                        .flatMap(users -> Observable.fromIterable(users)\n                                .flatMapSingle(u -> userService.delete(u.getId())).toList());\n            })\n            .flatMap(irrelevant -> domainRepository.delete(domainId))\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to delete security domain {}\", domainId, ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to delete security domain \" + domainId, ex));\n            });\n}",
                "name": "delete",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "domainId"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Delete security domain {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(optDomain -> {\n                if (!optDomain.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                }\n                if (optDomain.get().isMaster()) {\n                    throw new DomainDeleteMasterException(domainId);\n                }\n                return Single.just(optDomain.get());\n            })\n            .flatMap(domain -> {\n                // delete clients\n                return clientService.findByDomain(domainId)\n                        .flatMap(clients -> Observable.fromIterable(clients)\n                                .flatMapSingle(c -> clientService.delete(c.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete certificates\n                return certificateService.findByDomain(domainId)\n                        .flatMap(certificates -> Observable.fromIterable(certificates)\n                                .flatMapSingle(c -> certificateService.delete(c.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete identity providers\n                return identityProviderService.findByDomain(domainId)\n                        .flatMap(idps -> Observable.fromIterable(idps)\n                                .flatMapSingle(i -> identityProviderService.delete(i.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete roles\n                return roleService.findByDomain(domainId)\n                        .flatMap(roles -> Observable.fromIterable(roles)\n                                .flatMapSingle(r -> roleService.delete(r.getId())).toList());\n            })\n            .flatMap(irrelevant -> {\n                // delete users\n                return userService.findByDomain(domainId)\n                        .flatMap(users -> Observable.fromIterable(users)\n                                .flatMapSingle(u -> userService.delete(u.getId())).toList());\n            })\n            .flatMap(irrelevant -> domainRepository.delete(domainId))\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to delete security domain {}\", domainId, ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to delete security domain \" + domainId, ex));\n            });\n}",
                "start_point": {
                    "row": 250,
                    "column": 4
                },
                "end_point": {
                    "row": 305,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Override\npublic Single<LoginForm> updateLoginForm(String domainId, UpdateLoginForm loginForm) {\n    LOGGER.debug(\"Update login form of an existing domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    LoginForm form = new LoginForm();\n                    form.setEnabled(loginForm.isEnabled());\n                    form.setContent(loginForm.getContent());\n                    form.setAssets(loginForm.getAssets());\n\n                    Domain domain = domainOpt.get();\n                    domain.setLoginForm(form);\n                    domain.setUpdatedAt(new Date());\n\n                    return domainRepository.update(domain).map(domain1 -> form);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n            });\n}",
                "name": "updateLoginForm",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "domainId"
                    },
                    {
                        "type": "UpdateLoginForm",
                        "name": "loginForm"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Update login form of an existing domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    LoginForm form = new LoginForm();\n                    form.setEnabled(loginForm.isEnabled());\n                    form.setContent(loginForm.getContent());\n                    form.setAssets(loginForm.getAssets());\n\n                    Domain domain = domainOpt.get();\n                    domain.setLoginForm(form);\n                    domain.setUpdatedAt(new Date());\n\n                    return domainRepository.update(domain).map(domain1 -> form);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to update a domain\", ex));\n            });\n}",
                "start_point": {
                    "row": 307,
                    "column": 4
                },
                "end_point": {
                    "row": 338,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "@Override\npublic Single<Domain> deleteLoginForm(String domainId) {\n    LOGGER.debug(\"Delete login form of an existing domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain domain = domainOpt.get();\n                    domain.setLoginForm(null);\n                    domain.setUpdatedAt(new Date());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to update login form domain\", ex));\n            });\n}",
                "name": "deleteLoginForm",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "domainId"
                    }
                ],
                "body": "{\n    LOGGER.debug(\"Delete login form of an existing domain: {}\", domainId);\n    return domainRepository.findById(domainId)\n            .map(domain -> Optional.of(domain))\n            .defaultIfEmpty(Optional.empty())\n            .toSingle()\n            .flatMap(domainOpt -> {\n                if(!domainOpt.isPresent()) {\n                    throw new DomainNotFoundException(domainId);\n                } else {\n                    Domain domain = domainOpt.get();\n                    domain.setLoginForm(null);\n                    domain.setUpdatedAt(new Date());\n\n                    return domainRepository.update(domain);\n                }\n            })\n            .onErrorResumeNext(ex -> {\n                if (ex instanceof AbstractManagementException) {\n                    return Single.error(ex);\n                }\n\n                LOGGER.error(\"An error occurs while trying to update login form domain\", ex);\n                return Single.error(new TechnicalManagementException(\"An error occurs while trying to update login form domain\", ex));\n            });\n}",
                "start_point": {
                    "row": 340,
                    "column": 4
                },
                "end_point": {
                    "row": 366,
                    "column": 5
                },
                "method_mode": "Unchanged"
            },
            {
                "definition": "private String generateContextPath(String domainName) {\n    String nfdNormalizedString = Normalizer.normalize(domainName, Normalizer.Form.NFD);\n    Pattern pattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");\n    domainName = pattern.matcher(nfdNormalizedString).replaceAll(\"\");\n    return domainName.toLowerCase().trim().replaceAll(\"\\\\s{1,}\", \"-\");\n}",
                "name": "generateContextPath",
                "modifiers": "private",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "String",
                        "name": "domainName"
                    }
                ],
                "body": "{\n    String nfdNormalizedString = Normalizer.normalize(domainName, Normalizer.Form.NFD);\n    Pattern pattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");\n    domainName = pattern.matcher(nfdNormalizedString).replaceAll(\"\");\n    return domainName.toLowerCase().trim().replaceAll(\"\\\\s{1,}\", \"-\");\n}",
                "start_point": {
                    "row": 368,
                    "column": 4
                },
                "end_point": {
                    "row": 373,
                    "column": 5
                },
                "method_mode": "Unchanged"
            }
        ],
        "class_mode": "Modified"
    }
]