id,fromLib,toLib,repoName,fileName,startCommit,endCommit,startCommitChanges,endCommitChanges,startCommitMessage,endCommitMessage,startCommitTime,endCommitTime,Category,repoOwner,repoSplitName,prev_commit,old_file,new_file,old_class,new_class,old_method_sig,new_method_sig,old_method_code,new_method_code
469,com.alibaba:dubbo,org.apache.dubbo:dubbo,apache_dubbo-admin,pom.xml,995e06b547cb7554c99deb3129fca19b2c35aa8b,995e06b547cb7554c99deb3129fca19b2c35aa8b,"+org.apache.dubbo:dubbo
+org.apache.dubbo:dubbo-metadata-report-api
-com.alibaba:dubbo","+org.apache.dubbo:dubbo
+org.apache.dubbo:dubbo-metadata-report-api
-com.alibaba:dubbo","change dubbo dependency to 2.7-SNAPSHOT
","change dubbo dependency to 2.7-SNAPSHOT
",2018-11-14,2018-11-14,16,apache,dubbo-admin,80013ffc38b3d737bd891a2b574ef75a93450bd9,dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/service/impl/OverrideServiceImpl.java,dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/service/impl/OverrideServiceImpl.java,OverrideServiceImpl,OverrideServiceImpl,"('getUrlFromOverride', [{'type': 'Override', 'name': 'override'}])","('getUrlFromOverride', [{'type': 'Override', 'name': 'override'}])","private URL getUrlFromOverride(Override override) {
    return override.toUrl();
    /*Map<String, String> params = ConvertUtil.serviceName2Map(override.getService());
    if(!params.containsKey(Constants.INTERFACE_KEY)) {
        throw new IllegalArgumentException(""No interface info"");
    }
    if(!params.containsKey(Constants.VERSION_KEY)) {
        throw new IllegalArgumentException(""No version info"");
    }
    
    boolean enabled = override.isEnabled();
    if(!enabled) {
        params.put(""enabled"", ""false"");
    }
    String application = override.getApplication();
    if(!StringUtils.isEmpty(application)) {
        params.put(""application"", application);
    }
    String address = override.getAddress();
    if(!StringUtils.isEmpty(address)) {
        params.put(""address"", address);
    }
    
    String overrideAddress = override.getOverrideAddress();
    if(StringUtils.isEmpty(overrideAddress)) {
        overrideAddress = ""0.0.0.0"";
    }
    params.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);
    
    URL url = new URL(""override"", overrideAddress, -1, params);
    url = url.addParameterString(override.getParams());
    return url;*/
}","private URL getUrlFromOverride(Override override) {
    return override.toUrl();
}"
1013,com.h2database:h2,mysql:mysql-connector-java,JoeCao_qbike,uc/pom.xml,ba1ba24af6b9a69ea6ed4d76ae61faf9191e4c0f,ba1ba24af6b9a69ea6ed4d76ae61faf9191e4c0f,"+mysql:mysql-connector-java
-com.h2database:h2","+mysql:mysql-connector-java
-com.h2database:h2","move to mysql and add trip service
","move to mysql and add trip service
",2017-11-20,2017-11-20,31,JoeCao,qbike,3c876617d0e3506205fd9d02dbf050a7565f796c,intention/src/main/java/club/newtech/qbike/domain/core/service/UserRibbonHystrixService.java,trip/src/main/java/club/newtech/qbike/trip/infrastructure/UserRibbonHystrixApi.java,UserRibbonHystrixService,UserRibbonHystrixApi,"('findById', [{'type': 'Integer', 'name': 'id'}])","('findById', [{'type': 'Integer', 'name': 'id'}])","@HystrixCommand(fallbackMethod = ""fallback"")
public User findById(Integer id) {
    return this.restTemplate.getForObject(""http://QBIKE-UC/users/"" + id, User.class);
}","@HystrixCommand(fallbackMethod = ""fallback"")
public Driver findById(Integer id) {
    return this.restTemplate.getForObject(""http://QBIKE-UC/users/"" + id, Driver.class);
}"
1013,com.h2database:h2,mysql:mysql-connector-java,JoeCao_qbike,uc/pom.xml,ba1ba24af6b9a69ea6ed4d76ae61faf9191e4c0f,ba1ba24af6b9a69ea6ed4d76ae61faf9191e4c0f,"+mysql:mysql-connector-java
-com.h2database:h2","+mysql:mysql-connector-java
-com.h2database:h2","move to mysql and add trip service
","move to mysql and add trip service
",2017-11-20,2017-11-20,31,JoeCao,qbike,3c876617d0e3506205fd9d02dbf050a7565f796c,intention/src/main/java/club/newtech/qbike/domain/core/service/UserRibbonHystrixService.java,trip/src/main/java/club/newtech/qbike/trip/infrastructure/UserRibbonHystrixApi.java,UserRibbonHystrixService,UserRibbonHystrixApi,"('fallback', [{'type': 'Integer', 'name': 'id'}])","('fallback', [{'type': 'Integer', 'name': 'id'}])","public User fallback(Integer id) {
    UserRibbonHystrixService.LOGGER.info(""异常发生，进入fallback方法，接收的参数：id = {}"", id);
    User user = new User();
    user.setId(-1);
    user.setName(""default username"");
    user.setMobile(""0000"");
    return user;
}","public Driver fallback(Integer id) {
    UserRibbonHystrixApi.LOGGER.info(""异常发生，进入fallback方法，接收的参数：id = {}"", id);
    Driver driver = new Driver();
    driver.setId(-1);
    driver.setName(""default driver"");
    driver.setMobile(""0000"");
    return driver;
}"
1412,com.sun.jersey:jersey-core,org.glassfish.jersey.core:jersey-client,urbanairship_java-library,pom.xml,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,"+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions",2016-04-12,2016-04-12,21,urbanairship,java-library,5fc7c4fbef579d512cd22d22fb4f61c312b4b7b2,src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsReader.java,src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsReader.java,ActionsReader,ActionsReader,"('getLandingPageData', [{'type': 'JsonNode', 'name': 'definition'}])","('getLandingPageData', [{'type': 'JsonNode', 'name': 'definition'}])","private static Action.OpenAction getLandingPageData(JsonNode definition) {
    JsonNode content = definition.path(""content"");
    if (content.isMissingNode()) {
        throw new APIParsingException(""The content attribute must be present."");
    }

    JsonNode body = content.path(""body"");
    JsonNode contentType = getContentType(content);
    JsonNode contentEncoding = getContentEncoding(content);

    if (body.isMissingNode() || !body.isTextual()) {
        throw new APIParsingException(""The content object must have a body attribute, and it must be a string value."");
    }

    if (contentType.isMissingNode() || !contentType.isTextual()) {
        throw new APIParsingException(""The content object must have a content type attribute, and it must be a string value.."");
    }

    {
        String typeSubtype = contentType.getTextValue().split("";"")[0].trim().toLowerCase();
        if (!LandingPageContent.ALLOWED_CONTENT_TYPES.contains(typeSubtype)) {
            throw new APIParsingException(""The content type '"" + typeSubtype + ""' is not allowed."");
        }
    }

    if (!contentEncoding.isMissingNode()) {
        if (!contentEncoding.isTextual() || (!contentEncoding.getTextValue().equals(""utf-8"") &&
                !contentEncoding.getTextValue().equals(""base64""))) {
            throw new APIParsingException(""The content encoding attribute must be either 'utf-8' or 'base64'"");

        } else if (!contentEncoding.isMissingNode() && contentEncoding.getTextValue().equals(""base64"") && !Base64.isBase64(body.getTextValue())) {
            throw new APIParsingException(""Content contains invalid data that is not valid for base64 encoding."");
        }
    }

    Optional<LandingPageContent.Encoding> optEncoding = contentEncoding.isMissingNode() ?
            Optional.<LandingPageContent.Encoding>absent() :
            Optional.of(contentEncoding.getTextValue().equals(""base64"") ?
                    LandingPageContent.Encoding.Base64 :
                    LandingPageContent.Encoding.UTF8);

    String bodyString = body.getTextValue();
    if (bodyString != null) {
        int max_size = optEncoding.isPresent() && optEncoding.get() == LandingPageContent.Encoding.Base64 ?
                LandingPageContent.MAX_BODY_SIZE_BASE64 : LandingPageContent.MAX_BODY_SIZE_BYTES;
        if (bodyString.length() > max_size) {
            throw new APIParsingException(""Maximum upload size exceeded."");
        }
    }

    return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.getTextValue())
            .setBody(bodyString)
            .setEncoding(optEncoding)
            .build());
}","private static Action.OpenAction getLandingPageData(JsonNode definition) {
    JsonNode content = definition.path(""content"");
    if (content.isMissingNode()) {
        throw new APIParsingException(""The content attribute must be present."");
    }

    JsonNode body = content.path(""body"");
    JsonNode contentType = getContentType(content);
    JsonNode contentEncoding = getContentEncoding(content);

    if (body.isMissingNode() || !body.isTextual()) {
        throw new APIParsingException(""The content object must have a body attribute, and it must be a string value."");
    }

    if (contentType.isMissingNode() || !contentType.isTextual()) {
        throw new APIParsingException(""The content object must have a content type attribute, and it must be a string value.."");
    }

    {
        String typeSubtype = contentType.getTextValue().split("";"")[0].trim().toLowerCase();
        if (!LandingPageContent.ALLOWED_CONTENT_TYPES.contains(typeSubtype)) {
            throw new APIParsingException(""The content type '"" + typeSubtype + ""' is not allowed."");
        }
    }

    if (!contentEncoding.isMissingNode()) {
        if (!contentEncoding.isTextual() || (!contentEncoding.getTextValue().equals(""utf-8"") &&
                !contentEncoding.getTextValue().equals(""base64""))) {
            throw new APIParsingException(""The content encoding attribute must be either 'utf-8' or 'base64'"");

        } else if (!contentEncoding.isMissingNode() && contentEncoding.getTextValue().equals(""base64"")) {
            try {
                BaseEncoding.base64().decode(body.getTextValue());
            } catch (IllegalArgumentException e) {
                throw new APIParsingException(""Content contains invalid data that is not valid for base64 encoding."");
            }
        }
    }

    Optional<LandingPageContent.Encoding> optEncoding = contentEncoding.isMissingNode() ?
            Optional.<LandingPageContent.Encoding>absent() :
            Optional.of(contentEncoding.getTextValue().equals(""base64"") ?
                    LandingPageContent.Encoding.Base64 :
                    LandingPageContent.Encoding.UTF8);

    String bodyString = body.getTextValue();
    if (bodyString != null) {
        int max_size = optEncoding.isPresent() && optEncoding.get() == LandingPageContent.Encoding.Base64 ?
                LandingPageContent.MAX_BODY_SIZE_BASE64 : LandingPageContent.MAX_BODY_SIZE_BYTES;
        if (bodyString.length() > max_size) {
            throw new APIParsingException(""Maximum upload size exceeded."");
        }
    }

    return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.getTextValue())
            .setBody(bodyString)
            .setEncoding(optEncoding)
            .build());
}"
1412,com.sun.jersey:jersey-core,org.glassfish.jersey.core:jersey-client,urbanairship_java-library,pom.xml,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,"+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions",2016-04-12,2016-04-12,21,urbanairship,java-library,5fc7c4fbef579d512cd22d22fb4f61c312b4b7b2,src/main/java/com/urbanairship/api/reports/Base64ByteArray.java,src/main/java/com/urbanairship/api/reports/Base64ByteArray.java,Base64ByteArray,Base64ByteArray,"('Base64ByteArray', [{'type': 'String', 'name': 'value'}])","('Base64ByteArray', [{'type': 'String', 'name': 'value'}])","public Base64ByteArray(String value) {
    Preconditions.checkArgument(Base64.isBase64(value));

    this.binary = Base64.decode(value);
}","public Base64ByteArray(String value) {
    this.binary = BaseEncoding.base64().decode(value);
}"
1412,com.sun.jersey:jersey-core,org.glassfish.jersey.core:jersey-client,urbanairship_java-library,pom.xml,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,"+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions",2016-04-12,2016-04-12,21,urbanairship,java-library,5fc7c4fbef579d512cd22d22fb4f61c312b4b7b2,src/main/java/com/urbanairship/api/reports/Base64ByteArray.java,src/main/java/com/urbanairship/api/reports/Base64ByteArray.java,Base64ByteArray,Base64ByteArray,"('getBase64EncodedString', [])","('getBase64EncodedString', [])","public String getBase64EncodedString() {
    return new String(Base64.encode(binary));
}","public String getBase64EncodedString() {
    return BaseEncoding.base64().encode(binary);
}"
1412,com.sun.jersey:jersey-core,org.glassfish.jersey.core:jersey-client,urbanairship_java-library,pom.xml,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,"+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions",2016-04-12,2016-04-12,21,urbanairship,java-library,5fc7c4fbef579d512cd22d22fb4f61c312b4b7b2,src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java,src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java,ParseActionsTest,ParseActionsTest,"('testSmallBinaryBody', [])","('testSmallBinaryBody', [])","@Test
public void testSmallBinaryBody() throws Exception {
    byte[] bodyBytes = new byte[32 * 1024];
    String bodyString = Base64.encodeBase64String(bodyBytes);

    openLandingPageBody(bodyString, LandingPageContent.Encoding.Base64);
}","@Test
public void testSmallBinaryBody() throws Exception {
    byte[] bodyBytes = new byte[32 * 1024];
    String bodyString = BaseEncoding.base64().encode(bodyBytes);

    openLandingPageBody(bodyString, LandingPageContent.Encoding.Base64);
}"
1412,com.sun.jersey:jersey-core,org.glassfish.jersey.core:jersey-client,urbanairship_java-library,pom.xml,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,"+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions",2016-04-12,2016-04-12,21,urbanairship,java-library,5fc7c4fbef579d512cd22d22fb4f61c312b4b7b2,src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java,src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java,ParseActionsTest,ParseActionsTest,"('testLargeBinaryBody', [])","('testLargeBinaryBody', [])","@Test
public void testLargeBinaryBody() throws Exception {
    byte[] bodyBytes = new byte[LandingPageContent.MAX_BODY_SIZE_BYTES];
    String bodyString = Base64.encodeBase64String(bodyBytes);
    assertEquals(LandingPageContent.MAX_BODY_SIZE_BASE64, bodyString.length());

    openLandingPageBody(bodyString, LandingPageContent.Encoding.Base64);
}","@Test
public void testLargeBinaryBody() throws Exception {
    byte[] bodyBytes = new byte[LandingPageContent.MAX_BODY_SIZE_BYTES];
    String bodyString = BaseEncoding.base64().encode(bodyBytes);
    assertEquals(LandingPageContent.MAX_BODY_SIZE_BASE64, bodyString.length());

    openLandingPageBody(bodyString, LandingPageContent.Encoding.Base64);
}"
1412,com.sun.jersey:jersey-core,org.glassfish.jersey.core:jersey-client,urbanairship_java-library,pom.xml,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,3389fb4a4b1cc5c130ac9fa1f948bb2488156cdf,"+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","+org.glassfish.jersey.core:jersey-client
-com.sun.jersey:jersey-server
-com.sun.jersey:jersey-core","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions","Merge pull request #48 from urbanairship/update-guava

update guava and jersey versions",2016-04-12,2016-04-12,21,urbanairship,java-library,5fc7c4fbef579d512cd22d22fb4f61c312b4b7b2,src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java,src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java,ParseActionsTest,ParseActionsTest,"('testTooLargeBinaryBody', [])","('testTooLargeBinaryBody', [])","@Test(expected = APIParsingException.class)
public void testTooLargeBinaryBody() throws Exception {
    byte[] bodyBytes = new byte[LandingPageContent.MAX_BODY_SIZE_BYTES + 24];
    String bodyString = Base64.encodeBase64String(bodyBytes);

    openLandingPageBody(bodyString, LandingPageContent.Encoding.Base64);
}","@Test(expected = APIParsingException.class)
public void testTooLargeBinaryBody() throws Exception {
    byte[] bodyBytes = new byte[LandingPageContent.MAX_BODY_SIZE_BYTES + 24];
    String bodyString = BaseEncoding.base64().encode(bodyBytes);

    openLandingPageBody(bodyString, LandingPageContent.Encoding.Base64);
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/api/Api.java,dom/src/main/java/org/estatio/api/Api.java,Api,Api,"('putLeaseTermForIndexableRent', [{'type': '@Named(""leaseReference"")', 'name': 'String'}, {'type': '@Named(""tenantReference"")', 'name': 'String'}, {'type': '@Named(""unitReference"") @Optional', 'name': 'String'}, {'type': '@Named(""itemSequence"")', 'name': 'BigInteger'}, {'type': '@Named(""itemType"")', 'name': 'String'}, {'type': '@Named(""itemStartDate"")', 'name': 'LocalDate'}, {'type': '@Named(""sequence"")', 'name': 'BigInteger'}, {'type': '@Named(""startDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""endDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""status"") @Optional', 'name': 'String'}, {'type': '@Named(""indexationStatus"") @Optional', 'name': 'String'}, {'type': '@Named(""reviewDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""effectiveDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""baseValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""indexedValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""settledValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""levellingValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""levellingPercentage"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""indexReference"") @Optional', 'name': 'String'}, {'type': '@Named(""indexationFrequency"") @Optional', 'name': 'String'}, {'type': '@Named(""indexationPercentage"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""baseIndexReference"") @Optional', 'name': 'String'}, {'type': '@Named(""baseIndexStartDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""baseIndexEndDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""baseIndexValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""nextIndexReference"") @Optional', 'name': 'String'}, {'type': '@Named(""nextIndexStartDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""nextIndexEndDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""nextIndexValue"") @Optional', 'name': 'BigDecimal'}])","('putLeaseTermForIndexableRent', [{'type': '@Named(""leaseReference"")', 'name': 'String'}, {'type': '@Named(""tenantReference"")', 'name': 'String'}, {'type': '@Named(""unitReference"") @Optional', 'name': 'String'}, {'type': '@Named(""itemSequence"")', 'name': 'BigInteger'}, {'type': '@Named(""itemType"")', 'name': 'String'}, {'type': '@Named(""itemStartDate"")', 'name': 'LocalDate'}, {'type': '@Named(""sequence"")', 'name': 'BigInteger'}, {'type': '@Named(""startDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""endDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""status"") @Optional', 'name': 'String'}, {'type': '@Named(""indexationStatus"") @Optional', 'name': 'String'}, {'type': '@Named(""reviewDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""effectiveDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""baseValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""indexedValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""settledValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""levellingValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""levellingPercentage"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""indexReference"") @Optional', 'name': 'String'}, {'type': '@Named(""indexationFrequency"") @Optional', 'name': 'String'}, {'type': '@Named(""indexationPercentage"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""baseIndexReference"") @Optional', 'name': 'String'}, {'type': '@Named(""baseIndexStartDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""baseIndexEndDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""baseIndexValue"") @Optional', 'name': 'BigDecimal'}, {'type': '@Named(""nextIndexReference"") @Optional', 'name': 'String'}, {'type': '@Named(""nextIndexStartDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""nextIndexEndDate"") @Optional', 'name': 'LocalDate'}, {'type': '@Named(""nextIndexValue"") @Optional', 'name': 'BigDecimal'}])","@ActionSemantics(Of.IDEMPOTENT)
public void putLeaseTermForIndexableRent(
        // start generic fields
        @Named(""leaseReference"") String leaseReference,
        @Named(""tenantReference"") String tenantReference,
        @Named(""unitReference"") @Optional String unitReference,
        @Named(""itemSequence"") BigInteger itemSequence,
        @Named(""itemType"") String itemType,
        @Named(""itemStartDate"") LocalDate itemStartDate,
        @Named(""sequence"") BigInteger sequence,
        @Named(""startDate"") @Optional LocalDate startDate,
        @Named(""endDate"") @Optional LocalDate endDate,
        @Named(""status"") @Optional String statusStr,
        // end generic fields
        @Named(""indexationStatus"") @Optional String indexationStatusStr,
        @Named(""reviewDate"") @Optional LocalDate reviewDate,
        @Named(""effectiveDate"") @Optional LocalDate effectiveDate,
        @Named(""baseValue"") @Optional BigDecimal baseValue,
        @Named(""indexedValue"") @Optional BigDecimal indexedValue,
        @Named(""settledValue"") @Optional BigDecimal settledValue,
        @Named(""levellingValue"") @Optional BigDecimal levellingValue,
        @Named(""levellingPercentage"") @Optional BigDecimal levellingPercentage,
        @Named(""indexReference"") @Optional String indexReference,
        @Named(""indexationFrequency"") @Optional String indexationFrequency,
        @Named(""indexationPercentage"") @Optional BigDecimal indexationPercentage,
        @Named(""baseIndexReference"") @Optional String baseIndexReference,
        @Named(""baseIndexStartDate"") @Optional LocalDate baseIndexStartDate,
        @Named(""baseIndexEndDate"") @Optional LocalDate baseIndexEndDate,
        @Named(""baseIndexValue"") @Optional BigDecimal baseIndexValue,
        @Named(""nextIndexReference"") @Optional String nextIndexReference,
        @Named(""nextIndexStartDate"") @Optional LocalDate nextIndexStartDate,
        @Named(""nextIndexEndDate"") @Optional LocalDate nextIndexEndDate,
        @Named(""nextIndexValue"") @Optional BigDecimal nextIndexValue) {
    LeaseTermForIndexableRent term = (LeaseTermForIndexableRent) putLeaseTerm(
            leaseReference,
            unitReference,
            itemSequence,
            itemType,
            itemStartDate,
            startDate,
            endDate,
            sequence,
            statusStr);
    if (term != null) {
        Index index = indices.findIndex(indexReference);
        LeaseTermFrequency indexationFreq = LeaseTermFrequency.valueOf(indexationFrequency);
        term.setIndex(index);
        term.setFrequency(indexationFreq);
        term.setEffectiveDate(effectiveDate);
        term.setBaseValue(baseValue);
        term.setIndexedValue(indexedValue);
        term.setSettledValue(settledValue);
        term.setBaseIndexStartDate(baseIndexStartDate);
        term.setBaseIndexValue(baseIndexValue);
        term.setNextIndexStartDate(nextIndexStartDate);
        term.setNextIndexValue(nextIndexValue);
        term.setIndexationPercentage(indexationPercentage);
        IndexationStatus indexationStatus = indexationStatusStr == null ? null : IndexationStatus.valueOf(indexationStatusStr);
        term.setIndexationStatus(indexationStatus);
        term.setLevellingPercentage(levellingPercentage);
    }
}","@ActionSemantics(Of.IDEMPOTENT)
public void putLeaseTermForIndexableRent(
        // start generic fields
        @Named(""leaseReference"") String leaseReference,
        @Named(""tenantReference"") String tenantReference,
        @Named(""unitReference"") @Optional String unitReference,
        @Named(""itemSequence"") BigInteger itemSequence,
        @Named(""itemType"") String itemType,
        @Named(""itemStartDate"") LocalDate itemStartDate,
        @Named(""sequence"") BigInteger sequence,
        @Named(""startDate"") @Optional LocalDate startDate,
        @Named(""endDate"") @Optional LocalDate endDate,
        @Named(""status"") @Optional String statusStr,
        // end generic fields
        @Named(""reviewDate"") @Optional LocalDate reviewDate,
        @Named(""effectiveDate"") @Optional LocalDate effectiveDate,
        @Named(""baseValue"") @Optional BigDecimal baseValue,
        @Named(""indexedValue"") @Optional BigDecimal indexedValue,
        @Named(""settledValue"") @Optional BigDecimal settledValue,
        @Named(""levellingValue"") @Optional BigDecimal levellingValue,
        @Named(""levellingPercentage"") @Optional BigDecimal levellingPercentage,
        @Named(""indexReference"") @Optional String indexReference,
        @Named(""indexationFrequency"") @Optional String indexationFrequency,
        @Named(""indexationPercentage"") @Optional BigDecimal indexationPercentage,
        @Named(""baseIndexReference"") @Optional String baseIndexReference,
        @Named(""baseIndexStartDate"") @Optional LocalDate baseIndexStartDate,
        @Named(""baseIndexEndDate"") @Optional LocalDate baseIndexEndDate,
        @Named(""baseIndexValue"") @Optional BigDecimal baseIndexValue,
        @Named(""nextIndexReference"") @Optional String nextIndexReference,
        @Named(""nextIndexStartDate"") @Optional LocalDate nextIndexStartDate,
        @Named(""nextIndexEndDate"") @Optional LocalDate nextIndexEndDate,
        @Named(""nextIndexValue"") @Optional BigDecimal nextIndexValue) {
    LeaseTermForIndexableRent term = (LeaseTermForIndexableRent) putLeaseTerm(
            leaseReference,
            unitReference,
            itemSequence,
            itemType,
            itemStartDate,
            startDate,
            endDate,
            sequence,
            statusStr);
    if (term != null) {
        Index index = indices.findIndex(indexReference);
        LeaseTermFrequency indexationFreq = LeaseTermFrequency.valueOf(indexationFrequency);
        term.setIndex(index);
        term.setFrequency(indexationFreq);
        term.setEffectiveDate(effectiveDate);
        term.setBaseValue(baseValue);
        term.setIndexedValue(indexedValue);
        term.setSettledValue(settledValue);
        term.setBaseIndexStartDate(baseIndexStartDate);
        term.setBaseIndexValue(baseIndexValue);
        term.setNextIndexStartDate(nextIndexStartDate);
        term.setNextIndexValue(nextIndexValue);
        term.setIndexationPercentage(indexationPercentage);
        term.setLevellingPercentage(levellingPercentage);
    }
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/api/Api.java,dom/src/main/java/org/estatio/api/Api.java,Api,Api,"('putLeaseTerm', [{'type': 'String', 'name': 'leaseReference'}, {'type': 'String', 'name': 'unitReference'}, {'type': 'BigInteger', 'name': 'itemSequence'}, {'type': 'String', 'name': 'itemType'}, {'type': 'LocalDate', 'name': 'itemStartDate'}, {'type': 'LocalDate', 'name': 'startDate'}, {'type': 'LocalDate', 'name': 'endDate'}, {'type': 'BigInteger', 'name': 'sequence'}, {'type': 'String', 'name': 'statusStr'}])","('putLeaseTerm', [{'type': 'String', 'name': 'leaseReference'}, {'type': 'String', 'name': 'unitReference'}, {'type': 'BigInteger', 'name': 'itemSequence'}, {'type': 'String', 'name': 'itemType'}, {'type': 'LocalDate', 'name': 'itemStartDate'}, {'type': 'LocalDate', 'name': 'startDate'}, {'type': 'LocalDate', 'name': 'endDate'}, {'type': 'BigInteger', 'name': 'sequence'}, {'type': 'String', 'name': 'statusStr'}])","private LeaseTerm putLeaseTerm(
        String leaseReference,
        String unitReference,
        BigInteger itemSequence,
        String itemType,
        LocalDate itemStartDate,
        LocalDate startDate,
        LocalDate endDate,
        BigInteger sequence,
        String statusStr) {
    Lease lease = leases.findLeaseByReference(leaseReference);
    if (lease == null) {
        throw new ApplicationException(String.format(""Leaseitem with reference %1$s not found."", leaseReference));
    }
    Unit unit;
    if (unitReference != null) {
        unit = units.findUnitByReference(unitReference);
        if (unitReference != null && unit == null) {
            throw new ApplicationException(String.format(""Unit with reference %s not found."", unitReference));
        }
    }
    LeaseItemType leaseItemType = fetchLeaseItemType(itemType);
    LeaseItem item = lease.findItem(leaseItemType, itemStartDate, itemSequence);
    if (item == null) {
        throw new ApplicationException(String.format(""LeaseItem with reference %1$s, %2$s, %3$s, %4$s not found."", leaseReference, leaseItemType.toString(), itemStartDate.toString(), itemSequence.toString()));
    }
    // check if the date is within range of lease
    if (lease.getTerminationDate() == null || lease.getTerminationDate().compareTo(startDate) >= 0) {
        LeaseTerm term = item.findTermWithSequence(sequence);
        if (term == null) {
            if (sequence.equals(BigInteger.ONE)) {
                term = item.newTerm(startDate);
            } else {
                LeaseTerm previousTerm = item.findTermWithSequence(sequence.subtract(BigInteger.ONE));
                term = previousTerm.createNext(startDate);
            }
            term.setSequence(sequence);
        }
        term.setStatus(org.estatio.dom.lease.LeaseTermStatus.valueOf(statusStr));
        // will be overwritten if there is a next term
        term.setEndDate(lease.getTerminationDate());
        return term;
    }
    return null;
}","private LeaseTerm putLeaseTerm(
        final String leaseReference,
        final String unitReference,
        final BigInteger itemSequence,
        final String itemType,
        final LocalDate itemStartDate,
        final LocalDate startDate,
        final LocalDate endDate,
        final BigInteger sequence,
        final String statusStr) {
    Lease lease = leases.findLeaseByReference(leaseReference);
    if (lease == null) {
        throw new ApplicationException(String.format(""Leaseitem with reference %1$s not found."", leaseReference));
    }
    Unit unit;
    if (unitReference != null) {
        unit = units.findUnitByReference(unitReference);
        if (unitReference != null && unit == null) {
            throw new ApplicationException(String.format(""Unit with reference %s not found."", unitReference));
        }
    }
    LeaseItemType leaseItemType = fetchLeaseItemType(itemType);
    LeaseItem item = lease.findItem(leaseItemType, itemStartDate, itemSequence);
    if (item == null) {
        throw new ApplicationException(String.format(""LeaseItem with reference %1$s, %2$s, %3$s, %4$s not found."", leaseReference, leaseItemType.toString(), itemStartDate.toString(), itemSequence.toString()));
    }
    // check if the date is within range of lease
    if (lease.getTerminationDate() == null || lease.getTerminationDate().compareTo(startDate) >= 0) {
        LeaseTerm term = item.findTermWithSequence(sequence);
        if (term == null) {
            if (sequence.equals(BigInteger.ONE)) {
                term = item.newTerm(startDate);
            } else {
                LeaseTerm previousTerm = item.findTermWithSequence(sequence.subtract(BigInteger.ONE));
                term = previousTerm.createNext(startDate);
            }
            term.setSequence(sequence);
        }
        term.setStatus(org.estatio.dom.lease.LeaseTermStatus.valueOf(statusStr));
        // will be overwritten if there is a next term
        term.setEndDate(lease.getTerminationDate());
        return term;
    }
    return null;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,Invoice,Invoice,"('title', [])","('title', [])","public String title() {
    return String.format(""%08d"", Integer.parseInt(getId()));
}","public String title() {
    return String.format(""*%08d"", Integer.parseInt(getId()));
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,Invoice,Invoice,"('getCollectionNumber', [])","('getCollectionNumber', [])","@javax.jdo.annotations.Column(allowsNull = ""true"", length = JdoColumnLength.Invoice.NUMBER)
@Disabled
public String getCollectionNumber() {
    return collectionNumber;
}","@javax.jdo.annotations.Column(allowsNull = ""true"", length = JdoColumnLength.Invoice.NUMBER)
@Disabled
@Hidden(where=Where.PARENTED_TABLES)
public String getCollectionNumber() {
    return collectionNumber;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,Invoice,Invoice,"('getInvoiceNumber', [])","('getInvoiceNumber', [])","@javax.jdo.annotations.Column(allowsNull = ""true"", length = JdoColumnLength.Invoice.NUMBER)
@Disabled
public String getInvoiceNumber() {
    return invoiceNumber;
}","@javax.jdo.annotations.Column(allowsNull = ""true"", length = JdoColumnLength.Invoice.NUMBER)
@Disabled
@Hidden(where=Where.PARENTED_TABLES)
public String getInvoiceNumber() {
    return invoiceNumber;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,dom/src/main/java/org/estatio/dom/invoice/Invoice.java,Invoice,Invoice,"('disableInvoiceNow', [])","('disableInvoiceNow', [])","public String disableInvoiceNow() {
    if (getInvoiceNumber() != null) {
        return ""Invoice number already assigned"";
    }
    final Numerator numerator = invoices.findInvoiceNumberNumerator(getProperty());
    if (numerator == null) {
        return ""No 'invoice number' numerator found for invoice's property"";
    }
    //TODO: offload valid next states to the InvoiceStatus enum? Eg getStatus.isPossible(InvoiceStatus.APPROVED)
    // 
    if (getStatus() != InvoiceStatus.COLLECTED && getStatus() != InvoiceStatus.APPROVED) {
        return ""Must be in status of 'collected'"";
    }
    return null;
}","public String disableInvoiceNow() {
    if (getInvoiceNumber() != null) {
        return ""Invoice number already assigned"";
    }
    final Numerator numerator = invoices.findInvoiceNumberNumerator(getProperty());
    if (numerator == null) {
        return ""No 'invoice number' numerator found for invoice's property"";
    }
    // TODO: offload valid next states to the InvoiceStatus enum? Eg
    // getStatus.isPossible(InvoiceStatus.APPROVED)
    //
    if (getStatus() != InvoiceStatus.COLLECTED && getStatus() != InvoiceStatus.APPROVED) {
        return ""Must be in status of 'collected'"";
    }
    return null;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseItem.java,dom/src/main/java/org/estatio/dom/lease/LeaseItem.java,LeaseItem,LeaseItem,"('newTerm', [{'type': 'final @Named(""Start date"")', 'name': 'LocalDate'}])","('newTerm', [{'type': 'final @Named(""Start date"")', 'name': 'LocalDate'}])","public LeaseTerm newTerm(
        final @Named(""Start date"") LocalDate startDate) {
    LeaseTerm lastTerm = null;
    try {
        lastTerm = getTerms().last();
    } catch (NoSuchElementException e) {
        // TODO: is this ok?  if so then let's have a comment here at least.
    }
    LeaseTerm term = leaseTerms.newLeaseTerm(this, lastTerm, startDate);
    term.initialize();
    return term;
}","public LeaseTerm newTerm(
        final @Named(""Start date"") LocalDate startDate) {
    LeaseTerm lastTerm = getTerms().size() > 0 ? getTerms().last() : null;
    LeaseTerm term = leaseTerms.newLeaseTerm(this, lastTerm, startDate);
    term.initialize();
    return term;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTerm.java,dom/src/main/java/org/estatio/dom/lease/LeaseTerm.java,LeaseTerm,LeaseTerm,"('remove', [])","('remove', [])","@Programmatic
@Prototype
public void remove() {
    if (getNext() != null) {
        getNext().remove();
    }
    if (this.getInvoiceItems().size() == 0) {
        // TODO: Disabled, see EST-273
        // this.modifyPrevious(null);
        // getContainer().remove(this);
    }
}","@Programmatic
@Prototype
public void remove() {
    if (getNext() != null) {
        getNext().remove();
    }
    if (this.getInvoiceItems().size() == 0) {
        // CHECKSTYLE.OFF: 
        // TODO: Disabled, see EST-273
        // this.modifyPrevious(null);
        // getContainer().remove(this);
        // CHECKSTYLE.ON: 
    }
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTerm.java,dom/src/main/java/org/estatio/dom/lease/LeaseTerm.java,LeaseTerm,LeaseTerm,"('toString', [])","('toString', [])","@Override
public String toString(){
    return getInterval().toString()+ "" / "";
}","@Override
public String toString() {
    return getInterval().toString() + "" / "";
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,LeaseTermForIndexableRent,LeaseTermForIndexableRent,"('getBaseIndexValue', [])","('getBaseIndexValue', [])","@javax.jdo.annotations.Column(scale = 2, allowsNull = ""true"")
@Optional
@Override
public BigDecimal getBaseIndexValue() {
    return baseIndexValue;
}","@javax.jdo.annotations.Column(scale = JdoColumnScale.IndexValue.INDEX_VALUE, allowsNull = ""true"")
@Optional
@Override
public BigDecimal getBaseIndexValue() {
    return baseIndexValue;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,LeaseTermForIndexableRent,LeaseTermForIndexableRent,"('getNextIndexValue', [])","('getNextIndexValue', [])","@javax.jdo.annotations.Column(scale = 2, allowsNull = ""true"")
@Optional
@Override
public BigDecimal getNextIndexValue() {
    return nextIndexValue;
}","@javax.jdo.annotations.Column(scale = JdoColumnScale.IndexValue.INDEX_VALUE, allowsNull = ""true"")
@Optional
@Override
public BigDecimal getNextIndexValue() {
    return nextIndexValue;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,LeaseTermForIndexableRent,LeaseTermForIndexableRent,"('getRebaseFactor', [])","('getRebaseFactor', [])","@NotPersisted
@Override
public BigDecimal getRebaseFactor() {
    return rebaseFactor;
}","@javax.jdo.annotations.Column(scale = JdoColumnScale.IndexValue.REBASE_FACTOR, allowsNull = ""true"")
@Optional
@Override
public BigDecimal getRebaseFactor() {
    return rebaseFactor;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,LeaseTermForIndexableRent,LeaseTermForIndexableRent,"('getIndexationPercentage', [])","('getIndexationPercentage', [])","@javax.jdo.annotations.Column(scale = 1, allowsNull = ""true"")
@Optional
public BigDecimal getIndexationPercentage() {
    return indexationPercentage;
}","@javax.jdo.annotations.Column(scale = 1, allowsNull = ""true"")
@Optional
@Override
public BigDecimal getIndexationPercentage() {
    return indexationPercentage;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,LeaseTermForIndexableRent,LeaseTermForIndexableRent,"('getIndexedValue', [])","('getIndexedValue', [])","@javax.jdo.annotations.Column(scale = 2, allowsNull = ""true"")
@Optional
public BigDecimal getIndexedValue() {
    return indexedValue;
}","@javax.jdo.annotations.Column(scale = 2, allowsNull = ""true"")
@Optional
@Override
public BigDecimal getIndexedValue() {
    return indexedValue;
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,LeaseTermForIndexableRent,LeaseTermForIndexableRent,"('initialize', [])","('initialize', [])","@Override
@Programmatic
public void initialize() {
    super.initialize();
    final LeaseTermForIndexableRent previousTerm = (LeaseTermForIndexableRent) getPrevious();
    if (previousTerm != null) {
        LeaseTermFrequency frequency = previousTerm.getFrequency();
        if (frequency != null) {
            setIndex(previousTerm.getIndex());
            setBaseIndexStartDate(previousTerm.getNextIndexStartDate());
            setNextIndexStartDate(frequency.nextDate(previousTerm.getNextIndexStartDate()));
            setEffectiveDate(frequency.nextDate(previousTerm.getEffectiveDate()));
            setBaseValue(previousTerm.getSettledValue());
            setLevellingPercentage(previousTerm.getLevellingPercentage());
        }
    }
}","@Override
@Programmatic
public void initialize() {
    super.initialize();
    final LeaseTermForIndexableRent previousTerm = (LeaseTermForIndexableRent) getPrevious();
    if (previousTerm != null) {
        LeaseTermFrequency frequency = previousTerm.getFrequency();
        if (frequency != null) {
            setIndex(previousTerm.getIndex());
            setBaseIndexStartDate(previousTerm.getNextIndexStartDate());
            setNextIndexStartDate(frequency.nextDate(previousTerm.getNextIndexStartDate()));
            setEffectiveDate(frequency.nextDate(previousTerm.getEffectiveDate()));
            setBaseValue(previousTerm.getSettledValue());
            setLevellingPercentage(previousTerm.getLevellingPercentage());
        }
    }

}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,dom/src/main/java/org/estatio/dom/lease/LeaseTermForIndexableRent.java,LeaseTermForIndexableRent,LeaseTermForIndexableRent,"('update', [])","('update', [])","@Programmatic
@Override
public void update() {
    super.update();
    LeaseTermForIndexableRent previousTerm = (LeaseTermForIndexableRent) getPrevious();
    if (previousTerm != null) {
        BigDecimal newBaseValue = MathUtils.firstNonZero(
                previousTerm.getIndexedValue(),
                previousTerm.getBaseValue());
        if (getBaseValue() == null || newBaseValue.compareTo(getBaseValue()) != 0) {
            setBaseValue(newBaseValue);
        }
    }
    indexationService.indexate(this);

}","@Programmatic
@Override
public void update() {
    super.update();
    if (isIndexable()) {
        LeaseTermForIndexableRent previousTerm = (LeaseTermForIndexableRent) getPrevious();
        if (previousTerm != null) {
            BigDecimal newBaseValue = MathUtils.firstNonZero(
                    previousTerm.getIndexedValue(),
                    previousTerm.getBaseValue());
            if (getBaseValue() == null || newBaseValue.compareTo(getBaseValue()) != 0) {
                setBaseValue(newBaseValue);
            }
        }
        indexationService.indexate(this);
    }
}"
2418,commons-lang:commons-lang,org.apache.commons:commons-lang3,estatio_estatio,pom.xml,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,df5ad79e3f5d9b8b63411ea91e44f72d2e86b0e0,"+org.apache.commons:commons-lang3
-commons-lang:commons-lang","+org.apache.commons:commons-lang3
-commons-lang:commons-lang","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
","EST-284, EST280: Add derived attribute to determine if indexation can be applied

* upgraded from common-lang to common-lang3
* added derived number to display to first non-null invoice number, collection number or invoice id
",2013-11-20,2013-11-20,13,estatio,estatio,bd7f89e9052a97ca5ade2c83536cf6930c4ec660,integtests/src/test/java/org/estatio/integration/tests/api/ApiIntegrationTest.java,integtests/src/test/java/org/estatio/integration/tests/api/ApiIntegrationTest.java,ApiIntegrationTest,ApiIntegrationTest,"('t07_putLeaseTermWorks', [])","('t07_putLeaseTermWorks', [])","@Test
public void t07_putLeaseTermWorks() throws Exception {
    api.putLeaseTermForIndexableRent(
            ""APILEASE"",
            ""APITENANT"",
            ""APIUNIT"",
            BigInteger.valueOf(1),
            LeaseItemType.RENT.name(),
            START_DATE,
            BigInteger.valueOf(1),
            START_DATE,
            new LocalDate(2012, 12, 31),
            LeaseTermStatus.NEW.name(),
            IndexationStatus.NEXT.name(),
            null,
            null,
            BigDecimal.valueOf(12345),
            BigDecimal.valueOf(12345),
            null,
            null,
            null,
            ""APIINDEX"",
            LeaseTermFrequency.YEARLY.name(),
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null);
    api.putLeaseTermForIndexableRent(""APILEASE"",
            ""APITENANT"",
            ""APIUNIT"",
            BigInteger.valueOf(1),
            LeaseItemType.RENT.name(),
            START_DATE,
            BigInteger.valueOf(2),
            new LocalDate(2013, 1, 1),
            new LocalDate(2013, 12, 31),
            LeaseTermStatus.NEW.name(),
            IndexationStatus.NEXT.name(),
            null,
            null,
            BigDecimal.valueOf(12345),
            BigDecimal.valueOf(12345),
            null,
            null,
            null,
            ""APIINDEX"",
            LeaseTermFrequency.YEARLY.name(),
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null, 
            null);
    Lease lease = leases.findLeaseByReference(""APILEASE"");
    Assert.assertThat(lease.getItems().first().getTerms().size(), Is.is(2));
}","@Test
public void t07_putLeaseTermWorks() throws Exception {
    api.putLeaseTermForIndexableRent(
            ""APILEASE"",
            ""APITENANT"",
            ""APIUNIT"",
            BigInteger.valueOf(1),
            LeaseItemType.RENT.name(),
            START_DATE,
            BigInteger.valueOf(1),
            START_DATE,
            new LocalDate(2012, 12, 31),
            LeaseTermStatus.NEW.name(),
            null,
            null,
            BigDecimal.valueOf(12345),
            BigDecimal.valueOf(12345),
            null,
            null,
            null,
            ""APIINDEX"",
            LeaseTermFrequency.YEARLY.name(),
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null);
    api.putLeaseTermForIndexableRent(""APILEASE"",
            ""APITENANT"",
            ""APIUNIT"",
            BigInteger.valueOf(1),
            LeaseItemType.RENT.name(),
            START_DATE,
            BigInteger.valueOf(2),
            new LocalDate(2013, 1, 1),
            new LocalDate(2013, 12, 31),
            LeaseTermStatus.NEW.name(),
            null,
            null,
            BigDecimal.valueOf(12345),
            BigDecimal.valueOf(12345),
            null,
            null,
            null,
            ""APIINDEX"",
            LeaseTermFrequency.YEARLY.name(),
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null, 
            null);
    Lease lease = leases.findLeaseByReference(""APILEASE"");
    Assert.assertThat(lease.getItems().first().getTerms().size(), Is.is(2));
}"
884,com.google.code.gson:gson,com.alibaba:fastjson,hippo-band_hippo,hippo-common/pom.xml,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,"+com.alibaba:fastjson
-com.google.code.gson:gson","+com.alibaba:fastjson
-com.google.code.gson:gson","json序列化方式由gson改为fastjson.
","json序列化方式由gson改为fastjson.
",2017-08-19,2017-08-19,12,hippo-band,hippo,dbca5a7b0b89b37a528542d9351647952adfa572,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,HippoCommand,HippoCommand,"('HippoCommand', [{'type': 'HippoRequest', 'name': 'hippoRequest'}, {'type': 'int', 'name': 'timeOut'}, {'type': 'int', 'name': 'retryTimes'}, {'type': 'boolean', 'name': 'isCircuitBreaker'}, {'type': 'int', 'name': 'semaphoreMaxConcurrentRequests'}, {'type': 'Class<?>', 'name': 'downgradeStrategy'}, {'type': 'ServiceGovern', 'name': 'serviceGovern'}])","('HippoCommand', [{'type': 'HippoRequest', 'name': 'hippoRequest'}, {'type': 'int', 'name': 'timeOut'}, {'type': 'int', 'name': 'retryTimes'}, {'type': 'boolean', 'name': 'isCircuitBreaker'}, {'type': 'int', 'name': 'semaphoreMaxConcurrentRequests'}, {'type': 'Class<?>', 'name': 'downgradeStrategy'}, {'type': 'ServiceGovern', 'name': 'serviceGovern'}])","public HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes, boolean isCircuitBreaker,
		int semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy, ServiceGovern serviceGovern)
		throws InstantiationException, IllegalAccessException {

	// 默认隔离策略是线程 也可以是信号量,现在采用的是信号量的模式
	// 信号量隔离是个限流的策略
	// 因为是自己实现的超时机制，所以关闭hystrix的超时机制
	super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))
			.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))
			.andCommandPropertiesDefaults(
					HystrixCommandProperties.Setter()
							.withExecutionIsolationStrategy(
									HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)
							.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)
							.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));

	this.hippoRequest = hippoRequest;
	this.timeOut = timeOut;
	this.retryTimes = retryTimes;
	this.serviceGovern = serviceGovern;
	init(downgradeStrategy);

}","public HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes,
    boolean isCircuitBreaker, int semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy,
    ServiceGovern serviceGovern) throws InstantiationException, IllegalAccessException {

  // 默认隔离策略是线程 也可以是信号量,现在采用的是信号量的模式
  // 信号量隔离是个限流的策略
  // 因为是自己实现的超时机制，所以关闭hystrix的超时机制
  super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))
      .andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))
      .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()
          .withExecutionIsolationStrategy(
              HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)
          .withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)
          .withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));

  this.hippoRequest = hippoRequest;
  this.timeOut = timeOut;
  this.retryTimes = retryTimes;
  this.serviceGovern = serviceGovern;
  init(downgradeStrategy);

}"
884,com.google.code.gson:gson,com.alibaba:fastjson,hippo-band_hippo,hippo-common/pom.xml,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,"+com.alibaba:fastjson
-com.google.code.gson:gson","+com.alibaba:fastjson
-com.google.code.gson:gson","json序列化方式由gson改为fastjson.
","json序列化方式由gson改为fastjson.
",2017-08-19,2017-08-19,12,hippo-band,hippo,dbca5a7b0b89b37a528542d9351647952adfa572,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,HippoCommand,HippoCommand,"('init', [{'type': 'Class<?>', 'name': 'downgradeStrategy'}])","('init', [{'type': 'Class<?>', 'name': 'downgradeStrategy'}])","private void init(Class<?> downgradeStrategy) throws InstantiationException, IllegalAccessException {

	if (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {
		// 先从spring容器里面拿，如果没有，则new
		Object bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);
		if (bean == null) {
			hippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();
		} else {
			hippoFailPolicy = (HippoFailPolicy<?>) bean;
		}
	} else {
		hippoFailPolicy = new HippoFailPolicyDefaultImpl();
	}
}","private void init(Class<?> downgradeStrategy)
    throws InstantiationException, IllegalAccessException {

  if (HippoFailPolicy.class.isAssignableFrom(downgradeStrategy)) {
    // 先从spring容器里面拿，如果没有，则new
    try {
      Object bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);
      hippoFailPolicy = (HippoFailPolicy<?>) bean;
    } catch (Exception e) {
      hippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();
    }
  } else {
    hippoFailPolicy = new HippoFailPolicyDefaultImpl();
  }
}"
884,com.google.code.gson:gson,com.alibaba:fastjson,hippo-band_hippo,hippo-common/pom.xml,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,"+com.alibaba:fastjson
-com.google.code.gson:gson","+com.alibaba:fastjson
-com.google.code.gson:gson","json序列化方式由gson改为fastjson.
","json序列化方式由gson改为fastjson.
",2017-08-19,2017-08-19,12,hippo-band,hippo,dbca5a7b0b89b37a528542d9351647952adfa572,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,HippoCommand,HippoCommand,"('run', [])","('run', [])","@Override
protected Object run() throws Exception {

	try {
		return getHippoResponse(hippoRequest, timeOut, retryTimes);
	} catch (Throwable e) {
		// 业务异常只有包装成HystrixBadRequestException 才不会触发getFallback();
		throw new HystrixBadRequestException(""业务异常"", e);
	}

}","@Override
protected Object run() throws Exception {

  try {
    return getHippoResponse(hippoRequest, timeOut, retryTimes);
  } catch (Throwable e) {
    // 业务异常只有包装成HystrixBadRequestException 才不会触发getFallback();
    throw new HystrixBadRequestException(""call service error"", e);
  }

}"
884,com.google.code.gson:gson,com.alibaba:fastjson,hippo-band_hippo,hippo-common/pom.xml,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,"+com.alibaba:fastjson
-com.google.code.gson:gson","+com.alibaba:fastjson
-com.google.code.gson:gson","json序列化方式由gson改为fastjson.
","json序列化方式由gson改为fastjson.
",2017-08-19,2017-08-19,12,hippo-band,hippo,dbca5a7b0b89b37a528542d9351647952adfa572,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,HippoCommand,HippoCommand,"('getFallback', [])","('getFallback', [])","@Override
protected Object getFallback() {
	return hippoFailPolicy.failCallBack(hippoRequest.getServiceName());
}","@Override
protected Object getFallback() {
  return hippoFailPolicy.failCallBack(hippoRequest.getServiceName());
}"
884,com.google.code.gson:gson,com.alibaba:fastjson,hippo-band_hippo,hippo-common/pom.xml,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,"+com.alibaba:fastjson
-com.google.code.gson:gson","+com.alibaba:fastjson
-com.google.code.gson:gson","json序列化方式由gson改为fastjson.
","json序列化方式由gson改为fastjson.
",2017-08-19,2017-08-19,12,hippo-band,hippo,dbca5a7b0b89b37a528542d9351647952adfa572,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,HippoCommand,HippoCommand,"('getHippoResponse', [{'type': 'HippoRequest', 'name': 'request'}, {'type': 'int', 'name': 'timeout'}, {'type': 'int', 'name': 'retryTimes'}])","('getHippoResponse', [{'type': 'HippoRequest', 'name': 'request'}, {'type': 'int', 'name': 'timeout'}, {'type': 'int', 'name': 'retryTimes'}])","public Object getHippoResponse(HippoRequest request, int timeout, int retryTimes) throws Throwable {

	// 重试次数不能大于5次
	int index = retryTimes;
	if (retryTimes >= 5) {
		index = 5;
	}
	HippoResponse result = getResult(request, timeout);
	if (result.isError()) {
		if (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {
			return getHippoResponse(request, timeout, retryTimes - 1);
		} else {
			throw result.getThrowable();
		}
	}
	return result.getResult();
}","public Object getHippoResponse(HippoRequest request, int timeout, int retryTimes)
    throws Throwable {

  // 重试次数不能大于5次
  int index = retryTimes;
  if (retryTimes >= 5) {
    index = 5;
  }
  HippoResponse result = getResult(request, timeout);
  if (result.isError()) {
    if (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {
      return getHippoResponse(request, timeout, retryTimes - 1);
    } else {
      throw result.getThrowable();
    }
  }
  return result.getResult();
}"
884,com.google.code.gson:gson,com.alibaba:fastjson,hippo-band_hippo,hippo-common/pom.xml,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,"+com.alibaba:fastjson
-com.google.code.gson:gson","+com.alibaba:fastjson
-com.google.code.gson:gson","json序列化方式由gson改为fastjson.
","json序列化方式由gson改为fastjson.
",2017-08-19,2017-08-19,12,hippo-band,hippo,dbca5a7b0b89b37a528542d9351647952adfa572,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java,HippoCommand,HippoCommand,"('getResult', [{'type': 'HippoRequest', 'name': 'request'}, {'type': 'int', 'name': 'timeout'}])","('getResult', [{'type': 'HippoRequest', 'name': 'request'}, {'type': 'int', 'name': 'timeout'}])","private HippoResponse getResult(HippoRequest request, int timeout) throws Exception {

	HippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,
			serviceGovern);
	HippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);
	return callback.getResult();
}","private HippoResponse getResult(HippoRequest request, int timeout) throws Exception {

  HippoClientBootstrap hippoClientBootstrap =
      HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout, serviceGovern);
  HippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);
  return callback.getResult();
}"
884,com.google.code.gson:gson,com.alibaba:fastjson,hippo-band_hippo,hippo-common/pom.xml,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,227ca6473aac1893d14cacf9cd9e4aea7c4709e0,"+com.alibaba:fastjson
-com.google.code.gson:gson","+com.alibaba:fastjson
-com.google.code.gson:gson","json序列化方式由gson改为fastjson.
","json序列化方式由gson改为fastjson.
",2017-08-19,2017-08-19,12,hippo-band,hippo,dbca5a7b0b89b37a528542d9351647952adfa572,hippo-server/src/main/java/com/github/hippo/netty/HippoServerHandler.java,hippo-server/src/main/java/com/github/hippo/netty/HippoServerHandler.java,HippoServerHandler,HippoServerHandler,"('apiProcess', [{'type': 'HippoRequest', 'name': 'paras'}])","('apiProcess', [{'type': 'HippoRequest', 'name': 'paras'}])","@SuppressWarnings(""unchecked"")
private Object apiProcess(HippoRequest paras) throws Exception {/* 先不管重载 不管缓存 */
  Object serviceBean = HippoServiceImplCache.INSTANCE.getCacheBySimpleName(paras.getClassName());
  Class<?> serviceBeanClass = serviceBean.getClass();
  Method[] methods = serviceBeanClass.getDeclaredMethods();
  Object[] requestDto = null;
  for (Method method : methods) {
    if (!method.getName().equals(paras.getMethodName())) {
      continue;
    }
    Object[] objects = paras.getParameters();

    Map<String, Object> map;
    if (objects != null && objects.length == 1) {
      // 如果是json统一转成map处理
      if (objects[0] instanceof String) {
        map = GsonConvertUtils.jsonToMap((String) objects[0]);
      } else {
        map = (Map<String, Object>) objects[0];
      }
    } else {
      map = new HashMap<>();
    }
    Class<?>[] parameterTypes = method.getParameterTypes();
    if (parameterTypes.length == 0) {// 无参数
      requestDto = null;
    } else if (parameterTypes.length == 1) {// 一个参数(是否是Dto)
      Class<?> parameterType = parameterTypes[0];

      requestDto = new Object[1];
      // 非自定义dto就是java原生类了
      if (isJavaClass(parameterType)) {
        requestDto[0] = GsonConvertUtils
            .cleanseToObjectClass(map.get(method.getParameters()[0].getName()), parameterType);
      } else {
        requestDto[0] =
            GsonConvertUtils.cleanseToObjectClass(paras.getParameters()[0], parameterType);
      }
    }
    // 多参
    else {
      Parameter[] parameters = method.getParameters();
      requestDto = new Object[parameters.length];
      String paramName;
      int index = 0;
      for (Parameter parameter : parameters) {
        paramName = parameter.getName();
        requestDto[index] =
            GsonConvertUtils.cleanseToObjectClass(map.get(paramName), parameter.getType());
        index++;
      }
    }
    // 拿到返回
    return GsonConvertUtils.cleanseToObject(method.invoke(serviceBean, requestDto));
  }
  throw new NoSuchMethodException(paras.getMethodName());
}","private Object apiProcess(HippoRequest paras) throws Exception {/* 先不管重载 不管缓存 */
  Object serviceBean = HippoServiceImplCache.INSTANCE.getCacheBySimpleName(paras.getClassName());
  Class<?> serviceBeanClass = serviceBean.getClass();
  Method[] methods = serviceBeanClass.getDeclaredMethods();
  Object[] requestDto = null;
  for (Method method : methods) {
    if (!method.getName().equals(paras.getMethodName())) {
      continue;
    }
    Object[] objects = paras.getParameters();

    Map<String, Object> map;
    if (objects != null && objects.length == 1) {
      // 如果是json统一转成map处理
      map = FastJsonConvertUtils.jsonToMap((String) objects[0]);
    } else {
      map = new HashMap<>();
    }
    Class<?>[] parameterTypes = method.getParameterTypes();
    if (parameterTypes.length == 0) {// 无参数
      requestDto = null;
    } else if (parameterTypes.length == 1) {// 一个参数(是否是Dto)
      Class<?> parameterType = parameterTypes[0];

      requestDto = new Object[1];
      // 非自定义dto就是java原生类了
      if (isJavaClass(parameterType)) {
        requestDto[0] = map.get(method.getParameters()[0].getName());
      } else {
        requestDto[0] = FastJsonConvertUtils.jsonToJavaObject((String) paras.getParameters()[0],
            parameterType);
      }
    }
    // 多参
    else {
      Parameter[] parameters = method.getParameters();
      requestDto = new Object[parameters.length];
      String paramName;
      int index = 0;
      for (Parameter parameter : parameters) {
        paramName = parameter.getName();
        requestDto[index] = map.get(paramName);
        index++;
      }
    }
    // 拿到返回
    return FastJsonConvertUtils.cleanseToObject(method.invoke(serviceBean, requestDto));
  }
  throw new NoSuchMethodException(paras.getMethodName());
}"
3175,io.dropwizard.metrics:metrics-graphite,io.micrometer:micrometer-registry-prometheus,HotelsDotCom_data-highway,monitoring/kafka-offset-metrics/pom.xml,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,"+org.springframework.boot:spring-boot-starter-web
+org.springframework.boot:spring-boot-starter-actuator
+io.micrometer:micrometer-registry-prometheus
-io.dropwizard.metrics:metrics-core
-javax.xml.bind:jaxb-api
-io.dropwizard.metrics:metrics-graphite",,"ROAD-1116: Micrometer all metrics (except truck park)
","ROAD-1116: Micrometer all metrics (except truck park)
",2019-01-18,2019-01-18,18,HotelsDotCom,data-highway,7f175375b3c193309094dd8308b77af61d40e57e,agent/tollbooth/road-tollbooth-app/src/test/java/com/hotels/road/tollbooth/app/TollboothAppIntegrationTest.java,agent/tollbooth/road-tollbooth-app/src/test/java/com/hotels/road/tollbooth/app/TollboothAppIntegrationTest.java,TollboothAppIntegrationTest,TollboothAppIntegrationTest,"('beforeClass', [])","('beforeClass', [])","@BeforeClass
public static void beforeClass() throws Exception {
  int port;
  try (ServerSocket socket = new ServerSocket(0)) {
    port = socket.getLocalPort();
  }

  context = new SpringApplicationBuilder(TollboothApp.class)
      .bannerMode(OFF)
      .properties(ImmutableMap
          .<String, Object> builder()
          .put(""server.port"", port)
          .put(""kafka.bootstrapServers"", kafka.bootstrapServers())
          .put(""kafka.zookeeper"", kafka.zKConnectString())
          .put(""kafka.store.topic"", ROAD_TOPIC)
          .put(""kafka.store.replicas"", ""1"")
          .put(""kafka.patch.topic"", PATCH_TOPIC)
          .put(""kafka.patch.replicas"", ""1"")
          .put(""kafka.patch.groupId"", ""patches"")
          .build())
      .build()
      .run();

  Properties properties = new Properties();
  properties.setProperty(""bootstrap.servers"", kafka.bootstrapServers());
  producer = new KafkaProducer<>(properties, new StringSerializer(), new StringSerializer());

  store = new KafkaStore<>(kafka.bootstrapServers(), new JsonNodeSerializer(mapper), ROAD_TOPIC);
}","@BeforeClass
public static void beforeClass() throws Exception {
  try (ServerSocket socket = new ServerSocket(0)) {
    port = socket.getLocalPort();
  }

  context = new SpringApplicationBuilder(TollboothApp.class)
      .bannerMode(OFF)
      .properties(ImmutableMap
          .<String, Object> builder()
          .put(""server.port"", port)
          .put(""kafka.bootstrapServers"", kafka.bootstrapServers())
          .put(""kafka.zookeeper"", kafka.zKConnectString())
          .put(""kafka.store.topic"", ROAD_TOPIC)
          .put(""kafka.store.replicas"", ""1"")
          .put(""kafka.patch.topic"", PATCH_TOPIC)
          .put(""kafka.patch.replicas"", ""1"")
          .put(""kafka.patch.groupId"", ""patches"")
          .build())
      .build()
      .run();

  Properties properties = new Properties();
  properties.setProperty(""bootstrap.servers"", kafka.bootstrapServers());
  producer = new KafkaProducer<>(properties, new StringSerializer(), new StringSerializer());

  store = new KafkaStore<>(kafka.bootstrapServers(), new JsonNodeSerializer(mapper), ROAD_TOPIC);
}"
3175,io.dropwizard.metrics:metrics-graphite,io.micrometer:micrometer-registry-prometheus,HotelsDotCom_data-highway,monitoring/kafka-offset-metrics/pom.xml,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,"+org.springframework.boot:spring-boot-starter-web
+org.springframework.boot:spring-boot-starter-actuator
+io.micrometer:micrometer-registry-prometheus
-io.dropwizard.metrics:metrics-core
-javax.xml.bind:jaxb-api
-io.dropwizard.metrics:metrics-graphite",,"ROAD-1116: Micrometer all metrics (except truck park)
","ROAD-1116: Micrometer all metrics (except truck park)
",2019-01-18,2019-01-18,18,HotelsDotCom,data-highway,7f175375b3c193309094dd8308b77af61d40e57e,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsAppTest.java,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsAppTest.java,KafkaOffsetMetricsAppTest,KafkaOffsetMetricsAppTest,"('test', [])","('test', [])","@Test
public void test() throws Exception {
  kafka.createTopic(TOPIC);

  try (KafkaConsumer<String, String> consumer = consumer()) {
    consumer.commitSync(singletonMap(new TopicPartition(TOPIC, 0), new OffsetAndMetadata(1L)));
  }

  try (ServerSocket serverSocket = new ServerSocket(0)) {
    CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
      try (Socket socket = serverSocket.accept();
          BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {
        return reader.readLine();
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    });

    try (ConfigurableApplicationContext context = runApp(serverSocket.getLocalPort())) {
      Awaitility.await().atMost(5, SECONDS).pollInterval(100, MILLISECONDS).until(() -> {
        assertThat(future.isDone(), is(true));
        assertThat(future.join(),
            is(""road.kafka-offset.host.hostname.group.group_id.topic.test_topic.partition.0.offset 1 123""));
      });
    }
  }
}","@Test
public void test() throws Exception {
  kafka.createTopic(TOPIC);

  try (KafkaConsumer<String, String> consumer = consumer()) {
    consumer.commitSync(singletonMap(new TopicPartition(TOPIC, 0), new OffsetAndMetadata(1L)));
  }

  RestTemplate restTemplate = new RestTemplate();
  String fooResourceUrl = ""http://localhost:8080/actuator/prometheus"";

  try (ConfigurableApplicationContext context = runApp()) {
    Awaitility.await().atMost(5, SECONDS).pollInterval(100, MILLISECONDS).until(() -> {
      ResponseEntity<String> response = restTemplate.getForEntity(fooResourceUrl, String.class);
      assertThat(response.getStatusCode(), equalTo(HttpStatus.OK));
      List<String> lines = Arrays.asList(response.getBody().split(""\n"")).stream().filter(l -> l.startsWith(""kafka"")).collect(toList());

      //Should contain one metric in the following format
      // kafka-offset{host=""<hostname>"",group=""group_id"",topic=""test_topic"",partition=""0"",} 1.0
      assertThat(lines, hasSize(1));
      assertThat(lines.get(0), startsWith(""kafka-offset""));
      assertThat(lines.get(0), containsString(""group=\""group_id\""""));
      assertThat(lines.get(0), containsString(""topic=\""test_topic\""""));
      assertThat(lines.get(0), containsString(""partition=\""0\""""));
      assertThat(lines.get(0), endsWith("" 1.0""));
    });
  }
}"
3175,io.dropwizard.metrics:metrics-graphite,io.micrometer:micrometer-registry-prometheus,HotelsDotCom_data-highway,monitoring/kafka-offset-metrics/pom.xml,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,"+org.springframework.boot:spring-boot-starter-web
+org.springframework.boot:spring-boot-starter-actuator
+io.micrometer:micrometer-registry-prometheus
-io.dropwizard.metrics:metrics-core
-javax.xml.bind:jaxb-api
-io.dropwizard.metrics:metrics-graphite",,"ROAD-1116: Micrometer all metrics (except truck park)
","ROAD-1116: Micrometer all metrics (except truck park)
",2019-01-18,2019-01-18,18,HotelsDotCom,data-highway,7f175375b3c193309094dd8308b77af61d40e57e,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsAppTest.java,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsAppTest.java,KafkaOffsetMetricsAppTest,KafkaOffsetMetricsAppTest,"('runApp', [{'type': 'int', 'name': 'port'}])","('runApp', [{'type': 'int', 'name': 'port'}])","private ConfigurableApplicationContext runApp(int port) {
  String[] args = ImmutableMap
      .<String, String> builder()
      .put(""kafka.bootstrapServers"", kafka.bootstrapServers())
      .put(""graphite.endpoint"", ""localhost:"" + port)
      .put(""metricRate"", ""1000"")
      .build()
      .entrySet()
      .stream()
      .map(e -> String.format(""--%s=%s"", e.getKey(), e.getValue()))
      .toArray(i -> new String[i]);
  return new SpringApplicationBuilder(KafkaOffsetMetricsApp.class, TestConfig.class).bannerMode(OFF).run(args);
}","private ConfigurableApplicationContext runApp() {
  String[] args = ImmutableMap
      .<String, String> builder()
      .put(""kafka.bootstrapServers"", kafka.bootstrapServers())
      .build()
      .entrySet()
      .stream()
      .map(e -> String.format(""--%s=%s"", e.getKey(), e.getValue()))
      .toArray(i -> new String[i]);
  return new SpringApplicationBuilder(KafkaOffsetMetricsApp.class).bannerMode(OFF).run(args);
}"
3175,io.dropwizard.metrics:metrics-graphite,io.micrometer:micrometer-registry-prometheus,HotelsDotCom_data-highway,monitoring/kafka-offset-metrics/pom.xml,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,"+org.springframework.boot:spring-boot-starter-web
+org.springframework.boot:spring-boot-starter-actuator
+io.micrometer:micrometer-registry-prometheus
-io.dropwizard.metrics:metrics-core
-javax.xml.bind:jaxb-api
-io.dropwizard.metrics:metrics-graphite",,"ROAD-1116: Micrometer all metrics (except truck park)
","ROAD-1116: Micrometer all metrics (except truck park)
",2019-01-18,2019-01-18,18,HotelsDotCom,data-highway,7f175375b3c193309094dd8308b77af61d40e57e,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsTest.java,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsTest.java,KafkaOffsetMetricsTest,KafkaOffsetMetricsTest,"('before', [])","('before', [])","@Before
public void before() {
  underTest = new KafkaOffsetMetrics(adminClient, reporter);
}","@Before
public void before() {
  underTest = new KafkaOffsetMetrics(adminClient, hostnameSupplier, collectorRegistry);
}"
3175,io.dropwizard.metrics:metrics-graphite,io.micrometer:micrometer-registry-prometheus,HotelsDotCom_data-highway,monitoring/kafka-offset-metrics/pom.xml,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,d79ebc0c4b87d08e45489bdb0a49a1d2124b8439,"+org.springframework.boot:spring-boot-starter-web
+org.springframework.boot:spring-boot-starter-actuator
+io.micrometer:micrometer-registry-prometheus
-io.dropwizard.metrics:metrics-core
-javax.xml.bind:jaxb-api
-io.dropwizard.metrics:metrics-graphite",,"ROAD-1116: Micrometer all metrics (except truck park)
","ROAD-1116: Micrometer all metrics (except truck park)
",2019-01-18,2019-01-18,18,HotelsDotCom,data-highway,7f175375b3c193309094dd8308b77af61d40e57e,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsTest.java,monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsTest.java,KafkaOffsetMetricsTest,KafkaOffsetMetricsTest,"('happyPath', [])","('happyPath', [])","@SuppressWarnings({ ""rawtypes"", ""unchecked"" })
@Test
public void happyPath() {
  scala.collection.immutable.List<GroupOverview> listAllGroupsFlattened = asScalaSet(
      singleton(GroupOverview.apply(""groupId"", """"))).toList();
  when(adminClient.listAllGroupsFlattened()).thenReturn(listAllGroupsFlattened);

  scala.collection.immutable.Map<TopicPartition, Object> offsets = asScalaMap(
      singletonMap(new TopicPartition(""topicName"", 0), (Object) 1L));
  when(adminClient.listGroupOffsets(""groupId"")).thenReturn(offsets);

  underTest.sendOffsets();

  ArgumentCaptor<SortedMap<String, Gauge>> gaugesCaptor = ArgumentCaptor.forClass(SortedMap.class);

  verify(reporter).report(gaugesCaptor.capture(), eq(emptySortedMap()), eq(emptySortedMap()), eq(emptySortedMap()),
      eq(emptySortedMap()));

  SortedMap<String, Gauge> gauges = gaugesCaptor.getValue();
  assertThat(gauges.size(), is(1));
  Gauge gauge = gauges.get(""group.groupId.topic.topicName.partition.0.offset"");
  assertThat(gauge.getValue(), is(1L));
}","@SuppressWarnings({ ""rawtypes"", ""unchecked"" })
@Test
public void happyPath() {
  scala.collection.immutable.List<GroupOverview> listAllGroupsFlattened = asScalaSet(
      singleton(GroupOverview.apply(""groupId"", """"))).toList();
  when(adminClient.listAllGroupsFlattened()).thenReturn(listAllGroupsFlattened);

  scala.collection.immutable.Map<TopicPartition, Object> offsets = asScalaMap(
      singletonMap(new TopicPartition(""topicName"", 0), (Object) 1L));
  when(adminClient.listGroupOffsets(""groupId"")).thenReturn(offsets);

  when(hostnameSupplier.get()).thenReturn(""localhost"");

  List<Collector.MetricFamilySamples> collection = underTest.collect();

  assertThat(collection.size(), is(1));
  Collector.MetricFamilySamples mfs = collection.get(0);

  assertThat(mfs.name, is(""kafka-offset""));
  assertThat(mfs.type, is(GAUGE));
  assertThat(mfs.samples, is(not(empty())));
  assertThat(mfs.samples, is(hasSize(1)));

  Collector.MetricFamilySamples.Sample sample = mfs.samples.get(0);

  assertThat(sample.name, is(""kafka-offset""));
  assertThat(sample.labelNames, is(asList(""host"", ""group"", ""topic"", ""partition"")));
  assertThat(sample.labelValues, is(asList(""localhost"", ""groupId"", ""topicName"", ""0"")));
  assertThat(sample.value, is(1.0d));
}"
6562,org.apache.commons:commons-dbcp2,com.zaxxer:HikariCP,plan-player-analytics_Plan,Plan/pom.xml,349c556db44a52953aedb83fe7093e4d7e79aab6,349c556db44a52953aedb83fe7093e4d7e79aab6,"+com.zaxxer:HikariCP
-commons-logging:commons-logging
-org.apache.commons:commons-pool2
-org.apache.commons:commons-dbcp2","+com.zaxxer:HikariCP
-commons-logging:commons-logging
-org.apache.commons:commons-pool2
-org.apache.commons:commons-dbcp2","Replaced DHCP2 with HikariCP #660 (Possibly fixes #648)
","Replaced DHCP2 with HikariCP #660 (Possibly fixes #648)
",2018-07-27,2018-07-27,8,plan-player-analytics,Plan,a0737f2ca8e49ead39c3c53a276a753907d04023,Plan/src/main/java/com/djrapitops/plan/system/database/databases/sql/MySQLDB.java,Plan/src/main/java/com/djrapitops/plan/system/database/databases/sql/MySQLDB.java,MySQLDB,MySQLDB,"('setupDataSource', [])","('setupDataSource', [])","@Override
public void setupDataSource() throws DBInitException {
    BasicDataSource dataSource = new BasicDataSource();
    this.dataSource = dataSource;
    dataSource.setDriverClassName(""com.mysql.jdbc.Driver"");

    String host = Settings.DB_HOST.toString();
    String port = Integer.toString(Settings.DB_PORT.getNumber());
    String database = Settings.DB_DATABASE.toString();
    String launchOptions = Settings.DB_LAUNCH_OPTIONS.toString();
    if (launchOptions.isEmpty() || !launchOptions.startsWith(""?"") || launchOptions.endsWith(""&"")) {
        Log.error(""Launch Options were faulty, using default (?rewriteBatchedStatements=true&useSSL=false)"");
        launchOptions = ""?rewriteBatchedStatements=true&useSSL=false"";
    }

    dataSource.setUrl(""jdbc:mysql://"" + host + "":"" + port + ""/"" + database + launchOptions);

    String username = Settings.DB_USER.toString();
    String password = Settings.DB_PASS.toString();

    dataSource.setUsername(username);
    dataSource.setPassword(password);

    dataSource.setInitialSize(1);
    dataSource.setMaxTotal(8);
}","@Override
public void setupDataSource() throws DBInitException {
    HikariConfig config = new HikariConfig();

    String host = Settings.DB_HOST.toString();
    String port = Integer.toString(Settings.DB_PORT.getNumber());
    String database = Settings.DB_DATABASE.toString();
    String launchOptions = Settings.DB_LAUNCH_OPTIONS.toString();
    if (launchOptions.isEmpty() || !launchOptions.startsWith(""?"") || launchOptions.endsWith(""&"")) {
        Log.error(""Launch Options were faulty, using default (?rewriteBatchedStatements=true&useSSL=false)"");
        launchOptions = ""?rewriteBatchedStatements=true&useSSL=false"";
    }
    config.setJdbcUrl(""jdbc:mysql://"" + host + "":"" + port + ""/"" + database + launchOptions);

    String username = Settings.DB_USER.toString();
    String password = Settings.DB_PASS.toString();

    config.setUsername(username);
    config.setPassword(password);

    config.setPoolName(""Plan Connection Pool"");
    config.setDriverClassName(""com.mysql.jdbc.Driver"");

    config.setAutoCommit(true);
    config.setReadOnly(false);
    config.setMaximumPoolSize(8);

    this.dataSource = new HikariDataSource(config);
}"
6562,org.apache.commons:commons-dbcp2,com.zaxxer:HikariCP,plan-player-analytics_Plan,Plan/pom.xml,349c556db44a52953aedb83fe7093e4d7e79aab6,349c556db44a52953aedb83fe7093e4d7e79aab6,"+com.zaxxer:HikariCP
-commons-logging:commons-logging
-org.apache.commons:commons-pool2
-org.apache.commons:commons-dbcp2","+com.zaxxer:HikariCP
-commons-logging:commons-logging
-org.apache.commons:commons-pool2
-org.apache.commons:commons-dbcp2","Replaced DHCP2 with HikariCP #660 (Possibly fixes #648)
","Replaced DHCP2 with HikariCP #660 (Possibly fixes #648)
",2018-07-27,2018-07-27,8,plan-player-analytics,Plan,a0737f2ca8e49ead39c3c53a276a753907d04023,Plan/src/main/java/com/djrapitops/plan/system/database/databases/sql/MySQLDB.java,Plan/src/main/java/com/djrapitops/plan/system/database/databases/sql/MySQLDB.java,MySQLDB,MySQLDB,"('close', [])","('close', [])","@Override
public void close() {
    try {
        if (dataSource instanceof BasicDataSource) {
            ((BasicDataSource) dataSource).close();
        }
    } catch (SQLException e) {
        Log.toLog(this.getClass(), e);
    }
    super.close();
}","@Override
public void close() {
    if (dataSource instanceof HikariDataSource) {
        ((HikariDataSource) dataSource).close();
    }
    super.close();
}"
84,asm:asm,org.ow2.asm:asm,eclipse_sisu.inject,org.eclipse.sisu.inject/pom.xml,01ca345463fdaee4d5d72293bb7679fb5bc815ec,01ca345463fdaee4d5d72293bb7679fb5bc815ec,"+org.ow2.asm:asm
-asm:asm","+org.ow2.asm:asm
-asm:asm","Bug 406177: Upgrade to ASM4
","Bug 406177: Upgrade to ASM4
",2013-04-21,2013-04-21,5,eclipse,sisu.inject,c74e372155704044e64e03da9d58287eef537af7,org.eclipse.sisu.inject/src/org/eclipse/sisu/space/QualifiedTypeVisitor.java,org.eclipse.sisu.inject/src/org/eclipse/sisu/space/QualifiedTypeVisitor.java,QualifiedTypeVisitor,QualifiedTypeVisitor,"('QualifiedTypeVisitor', [{'type': 'final', 'name': 'QualifiedTypeListener'}])","('QualifiedTypeVisitor', [{'type': 'final', 'name': 'QualifiedTypeListener'}])","public QualifiedTypeVisitor( final QualifiedTypeListener listener )
{
    this.listener = listener;
}","public QualifiedTypeVisitor( final QualifiedTypeListener listener )
{
    super( Opcodes.ASM4 );
    this.listener = listener;
}"
6782,org.apache.kafka:kafka_2.11,org.springframework.kafka:spring-kafka,daydreamdev_seconds-kill,pom.xml,897cdc8a63731ca1403e6b186c767a4ee909fa2f,897cdc8a63731ca1403e6b186c767a4ee909fa2f,"+com.google.code.gson:gson
+com.alibaba:fastjson
+org.springframework.kafka:spring-kafka
+com.alibaba:druid-spring-boot-starter
-org.apache.kafka:kafka_2.11
-com.alibaba:druid","+com.google.code.gson:gson
+com.alibaba:fastjson
+org.springframework.kafka:spring-kafka
+com.alibaba:druid-spring-boot-starter
-org.apache.kafka:kafka_2.11
-com.alibaba:druid","Kafka 异步下单

1. 替换 Springboot 版本为 1.5，之前的 2.1 版本整合 spring-kafka 失败
2. 秒杀请求到来时，先校验库存，校验库存通过后，将下单请求发送给 kafka，然后通过 kafka 监听异步处理创建订单请求
","Kafka 异步下单

1. 替换 Springboot 版本为 1.5，之前的 2.1 版本整合 spring-kafka 失败
2. 秒杀请求到来时，先校验库存，校验库存通过后，将下单请求发送给 kafka，然后通过 kafka 监听异步处理创建订单请求
",2019-06-12,2019-06-12,83,daydreamdev,seconds-kill,c4fa2a2b35c9e3d6b8b3b59c34113c65456d5620,src/main/java/com/daydreamdev/secondskill/SecondsKillApplication.java,src/main/java/com/daydreamdev/secondskill/SecondsKillApplication.java,SecondsKillApplication,SecondsKillApplication,"('main', [{'type': 'String[]', 'name': 'args'}])","('main', [{'type': 'String[]', 'name': 'args'}])","public static void main(String[] args) {
	SpringApplication.run(SecondsKillApplication.class, args);
}","public static void main(String[] args) {
    SpringApplication.run(SecondsKillApplication.class, args);
new SpringApplicationBuilder(SecondsKillApplication.class).
listeners(new ApplicationPidFileWriter())
.run(args);
nsumer consumer = SpringBeanFactory.getBean(Consumer.class);
w Thread(consumer, ""消费者"").start();
g.info(""消费者线程启动成功!"");*/
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-certificate/gravitee-am-certificate-javakeystore/src/main/java/io/gravitee/am/certificate/javakeystore/provider/JavaKeyStoreProvider.java,gravitee-am-certificate/gravitee-am-certificate-javakeystore/src/main/java/io/gravitee/am/certificate/javakeystore/provider/JavaKeyStoreProvider.java,JavaKeyStoreProvider,JavaKeyStoreProvider,"('afterPropertiesSet', [])","('afterPropertiesSet', [])","@Override
public void afterPropertiesSet() throws Exception {
    keyPair = new KeyStoreKeyFactory(new InputStreamResource(new FileInputStream(new File(configuration.getJks()))),
            configuration.getStorepass().toCharArray()).getKeyPair(configuration.getAlias(), configuration.getKeypass().toCharArray());
    signer = new RsaSigner((RSAPrivateKey) keyPair.getPrivate());
}","@Override
public void afterPropertiesSet() throws Exception {
    FileInputStream is = new FileInputStream(configuration.getJks());
    KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
    keystore.load(is, configuration.getStorepass().toCharArray());
    Key key = keystore.getKey(configuration.getAlias(), configuration.getKeypass().toCharArray());
    if (key instanceof PrivateKey) {
        // Get certificate of public key
        Certificate cert = keystore.getCertificate(configuration.getAlias());
        // Get public key
        PublicKey publicKey = cert.getPublicKey();
        // Return a key pair
        keyPair = new KeyPair(publicKey, (PrivateKey) key);
    } else {
        throw new IllegalArgumentException(""A RSA Signer must be supplied"");
    }
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-certificate/gravitee-am-certificate-javakeystore/src/main/java/io/gravitee/am/certificate/javakeystore/provider/JavaKeyStoreProvider.java,gravitee-am-certificate/gravitee-am-certificate-javakeystore/src/main/java/io/gravitee/am/certificate/javakeystore/provider/JavaKeyStoreProvider.java,JavaKeyStoreProvider,JavaKeyStoreProvider,"('sign', [{'type': 'String', 'name': 'payload'}])","('sign', [{'type': 'String', 'name': 'payload'}])","@Override
public String sign(String payload) {
    return JwtHelper.encode(payload, signer).getEncoded();
}","@Override
public String sign(String payload) {
    return Jwts.builder().setPayload(payload).signWith(SignatureAlgorithm.RS512, keyPair.getPrivate()).compact();
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-identityprovider/gravitee-am-identityprovider-github/src/main/java/io/gravitee/am/identityprovider/github/authentication/GithubAuthenticationProvider.java,gravitee-am-identityprovider/gravitee-am-identityprovider-github/src/main/java/io/gravitee/am/identityprovider/github/authentication/GithubAuthenticationProvider.java,GithubAuthenticationProvider,GithubAuthenticationProvider,"('loadUserByUsername', [{'type': 'Authentication', 'name': 'authentication'}])","('loadUserByUsername', [{'type': 'Authentication', 'name': 'authentication'}])","@Override
public User loadUserByUsername(Authentication authentication) {
    try {
        HttpPost post = new HttpPost(configuration.getAccessTokenUri());
        List<NameValuePair> urlParameters = new ArrayList<>();
        urlParameters.add(new BasicNameValuePair(OAuth2Utils.CLIENT_ID, configuration.getClientId()));
        urlParameters.add(new BasicNameValuePair(""client_secret"", configuration.getClientSecret()));
        urlParameters.add(new BasicNameValuePair(OAuth2Utils.REDIRECT_URI, (String) authentication.getAdditionalInformation().get(OAuth2Utils.REDIRECT_URI)));
        urlParameters.add(new BasicNameValuePair(""code"", (String) authentication.getCredentials()));
        post.setEntity(new UrlEncodedFormEntity(urlParameters));

        // authenticate user
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String content = read(rd);
        if (response.getStatusLine().getStatusCode() != 200) {
            throw new BadCredentialsException(content);
        }
        Map<String, String> params = extractMap(content);
        String accessToken = params.get(""access_token"");

        // get user profile
        HttpGet request = new HttpGet(configuration.getUserProfileUri());
        request.addHeader(""Authorization"", ""token "" + accessToken);
        response = client.execute(request);
        rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        content = read(rd);
        JsonNode jsonNode = objectMapper.readTree(content);
        return createUser(jsonNode);
    } catch (Exception e) {
        logger.error(""Fail to authenticate github user account"", e);
        throw new InternalAuthenticationServiceException(e.getMessage());
    }
}","@Override
public User loadUserByUsername(Authentication authentication) {
    try {
        HttpPost post = new HttpPost(configuration.getAccessTokenUri());
        List<NameValuePair> urlParameters = new ArrayList<>();
        urlParameters.add(new BasicNameValuePair(CLIENT_ID, configuration.getClientId()));
        urlParameters.add(new BasicNameValuePair(""client_secret"", configuration.getClientSecret()));
        urlParameters.add(new BasicNameValuePair(REDIRECT_URI, (String) authentication.getAdditionalInformation().get(REDIRECT_URI)));
        urlParameters.add(new BasicNameValuePair(""code"", (String) authentication.getCredentials()));
        post.setEntity(new UrlEncodedFormEntity(urlParameters));

        // authenticate user
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String content = read(rd);
        if (response.getStatusLine().getStatusCode() != 200) {
            throw new BadCredentialsException(content);
        }
        Map<String, String> params = extractMap(content);
        String accessToken = params.get(""access_token"");

        // get user profile
        HttpGet request = new HttpGet(configuration.getUserProfileUri());
        request.addHeader(""Authorization"", ""token "" + accessToken);
        response = client.execute(request);
        rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        content = read(rd);
        JsonNode jsonNode = objectMapper.readTree(content);
        return createUser(jsonNode);
    } catch (Exception e) {
        logger.error(""Fail to authenticate github user account"", e);
        throw new InternalAuthenticationServiceException(e.getMessage());
    }
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-identityprovider/gravitee-am-identityprovider-oauth2-generic/src/main/java/io/gravitee/am/identityprovider/oauth2/authentication/OAuth2GenericAuthenticationProvider.java,gravitee-am-identityprovider/gravitee-am-identityprovider-oauth2-generic/src/main/java/io/gravitee/am/identityprovider/oauth2/authentication/OAuth2GenericAuthenticationProvider.java,OAuth2GenericAuthenticationProvider,OAuth2GenericAuthenticationProvider,"('loadUserByUsername', [{'type': 'Authentication', 'name': 'authentication'}])","('loadUserByUsername', [{'type': 'Authentication', 'name': 'authentication'}])","@Override
public User loadUserByUsername(Authentication authentication) {
    try {
        HttpPost post = new HttpPost(configuration.getAccessTokenUri());
        List<NameValuePair> urlParameters = new ArrayList<>();
        urlParameters.add(new BasicNameValuePair(OAuth2Utils.CLIENT_ID, configuration.getClientId()));
        urlParameters.add(new BasicNameValuePair(""client_secret"", configuration.getClientSecret()));
        urlParameters.add(new BasicNameValuePair(OAuth2Utils.REDIRECT_URI, (String) authentication.getAdditionalInformation().get(OAuth2Utils.REDIRECT_URI)));
        urlParameters.add(new BasicNameValuePair(""code"", (String) authentication.getCredentials()));
        urlParameters.add(new BasicNameValuePair(OAuth2Utils.GRANT_TYPE, ""authorization_code""));
        post.setEntity(new UrlEncodedFormEntity(urlParameters));

        // authenticate user
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String content = read(rd);
        if (response.getStatusLine().getStatusCode() != 200) {
            throw new BadCredentialsException(content);
        }
        JsonNode params = objectMapper.readTree(content);
        String accessToken = params.get(""access_token"").asText();

        // get user profile
        HttpGet request = new HttpGet(configuration.getUserProfileUri());
        request.addHeader(""Authorization"", ""Bearer "" + accessToken);
        response = client.execute(request);
        rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        content = read(rd);
        JsonNode jsonNode = objectMapper.readTree(content);
        return createUser(jsonNode);
    } catch (Exception e) {
        logger.error(""Fail to authenticate OAuth 2.0 generic user account"", e);
        throw new InternalAuthenticationServiceException(e.getMessage());
    }
}","@Override
public User loadUserByUsername(Authentication authentication) {
    try {
        HttpPost post = new HttpPost(configuration.getAccessTokenUri());
        List<NameValuePair> urlParameters = new ArrayList<>();
        urlParameters.add(new BasicNameValuePair(CLIENT_ID, configuration.getClientId()));
        urlParameters.add(new BasicNameValuePair(""client_secret"", configuration.getClientSecret()));
        urlParameters.add(new BasicNameValuePair(REDIRECT_URI, (String) authentication.getAdditionalInformation().get(REDIRECT_URI)));
        urlParameters.add(new BasicNameValuePair(""code"", (String) authentication.getCredentials()));
        urlParameters.add(new BasicNameValuePair(GRANT_TYPE, ""authorization_code""));
        post.setEntity(new UrlEncodedFormEntity(urlParameters));

        // authenticate user
        HttpResponse response = client.execute(post);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String content = read(rd);
        if (response.getStatusLine().getStatusCode() != 200) {
            throw new BadCredentialsException(content);
        }
        JsonNode params = objectMapper.readTree(content);
        String accessToken = params.get(""access_token"").asText();

        // get user profile
        HttpGet request = new HttpGet(configuration.getUserProfileUri());
        request.addHeader(""Authorization"", ""Bearer "" + accessToken);
        response = client.execute(request);
        rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        content = read(rd);
        JsonNode jsonNode = objectMapper.readTree(content);
        return createUser(jsonNode);
    } catch (Exception e) {
        logger.error(""Fail to authenticate OAuth 2.0 generic user account"", e);
        throw new InternalAuthenticationServiceException(e.getMessage());
    }
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/ManagementApplication.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/ManagementApplication.java,ManagementApplication,ManagementApplication,"('ManagementApplication', [])","('ManagementApplication', [])","public ManagementApplication() {

    BeanConfig beanConfig = new BeanConfig();
    beanConfig.setVersion(Version.RUNTIME_VERSION.MAJOR_VERSION);
    beanConfig.setResourcePackage(""io.gravitee.am.management.handlers.management.api.resources"");
    beanConfig.setTitle(""Gravitee.io - Access Management API"");
    beanConfig.setScan(true);

    register(DomainsResource.class);
    register(PlatformResource.class);
    register(DashboardResource.class);

    register(ObjectMapperResolver.class);
    register(ManagementExceptionMapper.class);
    register(UnrecognizedPropertyExceptionMapper.class);
    register(ThrowableMapper.class);
    register(NotFoundExceptionMapper.class);
    register(BadRequestExceptionMapper.class);

    register(CorsResponseFilter.class);
    register(UriBuilderRequestFilter.class);
    register(ByteArrayOutputStreamWriter.class);
    register(JacksonFeature.class);

    register(ApiListingResource.class);
    register(SwaggerSerializers.class);

    property(ServerProperties.BV_SEND_ERROR_IN_RESPONSE, true);
}","public ManagementApplication() {

    BeanConfig beanConfig = new BeanConfig();
    beanConfig.setVersion(Version.RUNTIME_VERSION.MAJOR_VERSION);
    beanConfig.setResourcePackage(""io.gravitee.am.management.handlers.management.api.resources"");
    beanConfig.setTitle(""Gravitee.io - Access Management API"");
    beanConfig.setScan(true);

    register(DomainsResource.class);
    register(PlatformResource.class);
    register(DashboardResource.class);
    register(CurrentUserResource.class);

    register(ObjectMapperResolver.class);
    register(ManagementExceptionMapper.class);
    register(UnrecognizedPropertyExceptionMapper.class);
    register(ThrowableMapper.class);
    register(NotFoundExceptionMapper.class);
    register(BadRequestExceptionMapper.class);

    register(UriBuilderRequestFilter.class);
    register(ByteArrayOutputStreamWriter.class);
    register(JacksonFeature.class);

    register(ApiListingResource.class);
    register(SwaggerSerializers.class);

    property(ServerProperties.BV_SEND_ERROR_IN_RESPONSE, true);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/resources/DomainsResource.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/resources/DomainsResource.java,DomainsResource,DomainsResource,"('list', [{'type': '@Suspended final', 'name': 'AsyncResponse'}])","('list', [{'type': '@Suspended final', 'name': 'AsyncResponse'}])","@GET
@Produces(MediaType.APPLICATION_JSON)
@ApiOperation(
        value = ""List security domains"",
        notes = ""List all the security domains accessible to the current user."")
@ApiResponses({
        @ApiResponse(code = 200, message = ""List accessible security domains for current user"", response = Domain.class, responseContainer = ""List""),
        @ApiResponse(code = 500, message = ""Internal server error"")})
public void list(@Suspended final AsyncResponse response) {
     domainService.findAll()
             .map(domains ->
                    domains.stream().map(domain -> {
                        domain.setLoginForm(null);
                        return domain;
                    })
                    .sorted((o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName()))
                    .collect(Collectors.toList()))
            .subscribe(
                    result -> response.resume(Response.ok(result).build()),
                    error -> response.resume(error));
}","@GET
@Produces(MediaType.APPLICATION_JSON)
@ApiOperation(
        value = ""List security domains"",
        notes = ""List all the security domains accessible to the current user."")
@ApiResponses({
        @ApiResponse(code = 200, message = ""List accessible security domains for current user"", response = Domain.class, responseContainer = ""List""),
        @ApiResponse(code = 500, message = ""Internal server error"")})
public void list(@Suspended final AsyncResponse response) {
     domainService.findAll()
             .map(domains ->
                    domains.stream()
                            .filter(domain -> !domain.isMaster())
                            .map(domain -> {
                                domain.setLoginForm(null);
                                return domain;
                            })
                            .sorted((o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName()))
                            .collect(Collectors.toList()))
            .subscribe(
                    result -> response.resume(Response.ok(result).build()),
                    error -> response.resume(error));
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/spring/security/SecurityConfiguration.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/spring/security/SecurityConfiguration.java,SecurityConfiguration,SecurityConfiguration,"('configure', [{'type': 'HttpSecurity', 'name': 'http'}])","('configure', [{'type': 'HttpSecurity', 'name': 'http'}])","@Override
public void configure(HttpSecurity http) throws Exception {
    http
        .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
            .authorizeRequests()
                .antMatchers(HttpMethod.OPTIONS, ""**"").permitAll()
                .anyRequest().authenticated()
        .and()
            .httpBasic()
                .disable()
            .csrf()
            .disable()
        .addFilterBefore(corsFilter(), ChannelProcessingFilter.class);
}","@Override
public void configure(HttpSecurity http) throws Exception {
    http
        .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
            .cors()
        .and()
            .authorizeRequests()
                .antMatchers(HttpMethod.OPTIONS, ""/**"").permitAll()
                .anyRequest().authenticated()
        .and()
            .httpBasic()
                .disable()
            .csrf()
                .disable()
        .exceptionHandling()
            .authenticationEntryPoint(restAuthenticationEntryPoint())
            .and()
        .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/DeployAdminDomainUpgrader.java,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/DeployAdminDomainUpgrader.java,DeployAdminDomainUpgrader,DeployAdminDomainUpgrader,"('upgrade', [])","('upgrade', [])","@Override
public boolean upgrade() {
    logger.info(""Deploying registered {} domain"", ADMIN_DOMAIN);
    try {
        // TODO Async call
        Domain adminDomain = domainService.findById(ADMIN_DOMAIN).blockingGet();
        eventManager.publishEvent(DomainEvent.DEPLOY, adminDomain);
        return true;
    } catch (DomainNotFoundException dnfe) {
        logger.error(""Failed to find admin domain"", dnfe);
        throw new IllegalStateException(""Failed to deploy admin domain"", dnfe);
    }
}","@Override
public boolean upgrade() {
    logger.info(""Deploying registered {} domain"", ADMIN_DOMAIN);
    domainService.findById(ADMIN_DOMAIN)
            .switchIfEmpty(Maybe.error(new DomainNotFoundException(ADMIN_DOMAIN)))
            .subscribe(
                    adminDomain -> eventManager.publishEvent(DomainEvent.DEPLOY, adminDomain),
                    error -> {
                        logger.error(""Failed to find admin domain"", error);
                        throw new IllegalStateException(""Failed to deploy admin domain"", error);
                    }
            );
    return true;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/InitializeUpgrader.java,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/InitializeUpgrader.java,InitializeUpgrader,InitializeUpgrader,"('upgrade', [])","('upgrade', [])","@Override
public boolean upgrade() {
    logger.info(""Looking for a registered {} domain"", ADMIN_DOMAIN);

    try {
        // TODO async call
        Domain adminDomain = domainService.findById(ADMIN_DOMAIN).blockingGet();
        // update master flag
        // TODO: keep history in database to avoid this call
        if (!adminDomain.isMaster()) {
            logger.info(""Set master flag for security domain {}"", ADMIN_DOMAIN);
            // TODO async call
            domainService.setMasterDomain(adminDomain.getId(), true).subscribe();
        }
        logger.info(""{} domain already exists. Skipping."", ADMIN_DOMAIN);
    } catch (DomainNotFoundException dnfe) {
        //TODO: Use configuration to get admin values
        // Create a new admin domain
        logger.info(""{} domain does not exists. Creating it."", ADMIN_DOMAIN);
        NewDomain adminDomain = new NewDomain();
        adminDomain.setName(""admin"");
        adminDomain.setDescription(""AM Admin domain"");
        // TODO async call
        Domain createdDomain = domainService.create(adminDomain).blockingGet();

        // Create default scope
        NewScope scope = new NewScope();
        scope.setKey(DEFAULT_SCOPE);
        scope.setName(Character.toUpperCase(DEFAULT_SCOPE.charAt(0)) + DEFAULT_SCOPE.substring(1));
        scope.setDescription(""Default description for scope "" + DEFAULT_SCOPE);
        // TODO async call
        Scope createdScope = scopeService.create(createdDomain.getId(), scope).blockingGet();

        // Create a new admin client
        logger.info(""Create an initial {} client"", ADMIN_CLIENT_ID);
        NewClient adminClient = new NewClient();
        adminClient.setClientId(ADMIN_CLIENT_ID);
        adminClient.setClientSecret(ADMIN_CLIENT_SECRET);
        // TODO async call
        Client createdClient = clientService.create(createdDomain.getId(), adminClient).blockingGet();

        // Create an inline identity provider
        logger.info(""Create an user-inline provider"");
        NewIdentityProvider adminIdentityProvider = new NewIdentityProvider();
        adminIdentityProvider.setType(""inline-am-idp"");
        adminIdentityProvider.setName(""Inline users"");
        adminIdentityProvider.setConfiguration(""{\""users\"":[{\""firstname\"":\""Administrator\"",\""lastname\"":\""\"",\""username\"":\""admin\"",\""password\"":\""adminadmin\""}]}"");
        // TODO async call
        IdentityProvider createdIdentityProvider = identityProviderService.create(createdDomain.getId(), adminIdentityProvider).blockingGet();

        // Associate the identity provider to the client and enabled it
        logger.info(""Associate user-inline provider to previously created client"");
        UpdateClient updateClient = new UpdateClient();
        updateClient.setAccessTokenValiditySeconds(createdClient.getAccessTokenValiditySeconds());
        updateClient.setRefreshTokenValiditySeconds(createdClient.getRefreshTokenValiditySeconds());
        updateClient.setAuthorizedGrantTypes(Collections.singletonList(GrantType.IMPLICIT.type()));
        updateClient.setScopes(Collections.singletonList(createdScope.getKey()));
        updateClient.setAutoApproveScopes(updateClient.getScopes());
        updateClient.setIdentities(Collections.singleton(createdIdentityProvider.getId()));
        updateClient.setEnabled(true);
        // TODO async call
        clientService.update(createdDomain.getId(), createdClient.getId(), updateClient).blockingGet();

        // Enabled the domain
        logger.info(""Start {} security domain"", ADMIN_DOMAIN);
        UpdateDomain updateDomain = new UpdateDomain();
        updateDomain.setName(createdDomain.getName());
        updateDomain.setDescription(createdDomain.getDescription());
        updateDomain.setEnabled(true);
        updateDomain.setPath(createdDomain.getPath());
        // TODO async call
        domainService.update(createdDomain.getId(), updateDomain).blockingGet();

        // Set master flag
        logger.info(""Set master flag for security domain {}"", ADMIN_DOMAIN);
        // TODO async call
        domainService.setMasterDomain(createdDomain.getId(), true).subscribe();
    }

    return true;
}","@Override
public boolean upgrade() {
    logger.info(""Looking for a registered {} domain"", ADMIN_DOMAIN);

    domainService.findById(ADMIN_DOMAIN)
            .switchIfEmpty(Single.error(new DomainNotFoundException(ADMIN_DOMAIN)))
            .flatMap(adminDomain -> {
                logger.info(""{} domain already exists. Apply required upgrades."", ADMIN_DOMAIN);
                if (!adminDomain.isMaster()) {
                    logger.info(""Set master flag for security domain {}"", ADMIN_DOMAIN);
                    return domainService.setMasterDomain(adminDomain.getId(), true);
                }
                return Single.just(adminDomain);
            })
            .flatMap(adminDomain -> {
                // New since AM v2
                // Move admin client identity providers to admin domain and remove the admin client
                return clientService.findByDomainAndClientId(ADMIN_DOMAIN, ADMIN_CLIENT_ID)
                        .map(client -> Optional.of(client))
                        .defaultIfEmpty(Optional.empty())
                        .flatMapSingle(optionalClient -> {
                            if (optionalClient.isPresent()) {
                                Client adminClient = optionalClient.get();
                                logger.info(""Admin client found, move its identity providers to the admin domain"");
                                UpdateDomain updateDomain = new UpdateDomain();
                                updateDomain.setName(adminDomain.getName());
                                updateDomain.setPath(adminDomain.getPath());
                                updateDomain.setDescription(adminDomain.getDescription());
                                updateDomain.setEnabled(adminDomain.isEnabled());
                                updateDomain.setIdentities(adminClient.getIdentities());
                                updateDomain.setOauth2Identities(adminClient.getOauth2Identities());
                                return domainService.update(ADMIN_DOMAIN, updateDomain)
                                        .flatMap(domain -> clientService.delete(adminClient.getId()).flatMap(irrelevant -> Single.just(domain)));
                            }
                            return Single.just(adminDomain);
                        });

            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof DomainNotFoundException) {
                    return domainNotFoundFallback();
                }
                return Single.error(new TechnicalManagementException(ex));
            })
            .subscribe();

    return true;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,ScopeUpgrader,ScopeUpgrader,"('upgrade', [])","('upgrade', [])","@Override
public boolean upgrade() {
    logger.info(""Applying scope upgrade"");
    // TODO async call
    Set<Domain> domains = domainService.findAll().blockingGet();

    domains.forEach(this::upgradeDomain);

    return true;
}","@Override
public boolean upgrade() {
    logger.info(""Applying scope upgrade"");
    domainService.findAll()
            .flatMapObservable(domains -> Observable.fromIterable(domains))
            .flatMapSingle(domain -> upgradeDomain(domain))
            .subscribe();
    return true;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,ScopeUpgrader,ScopeUpgrader,"('upgradeDomain', [{'type': 'Domain', 'name': 'domain'}])","('upgradeDomain', [{'type': 'Domain', 'name': 'domain'}])","private void upgradeDomain(Domain domain) {
    logger.info(""Looking for scopes for domain id[{}] name[{}]"", domain.getId(), domain.getName());
    // TODO async call
    Set<Scope> scopes = scopeService.findByDomain(domain.getId()).blockingGet();
    if (scopes.isEmpty()) {
        logger.info(""No scope found for domain id[{}] name[{}]. Upgrading..."", domain.getId(), domain.getName());

        createClientScopes(domain);
        createRoleScopes(domain);
    }
}","private Single<List<Scope>> upgradeDomain(Domain domain) {
    logger.info(""Looking for scopes for domain id[{}] name[{}]"", domain.getId(), domain.getName());
    return scopeService.findByDomain(domain.getId())
            .flatMap(scopes -> {
                if (scopes.isEmpty()) {
                    logger.info(""No scope found for domain id[{}] name[{}]. Upgrading..."", domain.getId(), domain.getName());
                    return createClientScopes(domain)
                            .flatMap(irrelevant -> createRoleScopes(domain));
                }
                return Single.just(new ArrayList<>(scopes));
            });
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,ScopeUpgrader,ScopeUpgrader,"('createClientScopes', [{'type': 'Domain', 'name': 'domain'}])","('createClientScopes', [{'type': 'Domain', 'name': 'domain'}])","private void createClientScopes(Domain domain) {
    // TODO async call
    Set<Client> clients = clientService.findByDomain(domain.getId()).blockingGet();

    if (clients != null) {
        clients.forEach(client -> {
            if (client.getScopes() != null) {
                client.getScopes().forEach(scope -> createScope(domain.getId(), scope));
            }
        });
    }
}","private Single<List<Scope>> createClientScopes(Domain domain) {
    return clientService.findByDomain(domain.getId())
            .filter(clients -> clients != null)
            .flatMapObservable(clients -> Observable.fromIterable(clients))
            .filter(client -> client.getScopes() != null)
            .flatMap(client -> Observable.fromIterable(client.getScopes()))
            .flatMapSingle(scope -> createScope(domain.getId(), scope))
            .toList();
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,ScopeUpgrader,ScopeUpgrader,"('createRoleScopes', [{'type': 'Domain', 'name': 'domain'}])","('createRoleScopes', [{'type': 'Domain', 'name': 'domain'}])","private void createRoleScopes(Domain domain) {
    // TODO async call
    Set<Role> roles = roleService.findByDomain(domain.getId()).blockingGet();

    if (roles != null) {
        roles.forEach(role -> {
            if (role.getPermissions() != null) {
                role.getPermissions().forEach(scope -> createScope(domain.getId(), scope));
            }
        });
    }
}","private Single<List<Scope>> createRoleScopes(Domain domain) {
    return roleService.findByDomain(domain.getId())
            .filter(roles -> roles != null)
            .flatMapObservable(roles -> Observable.fromIterable(roles))
            .filter(role -> role.getPermissions() != null)
            .flatMap(role -> Observable.fromIterable(role.getPermissions()))
            .flatMapSingle(scope -> createScope(domain.getId(), scope))
            .toList();
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java,ScopeUpgrader,ScopeUpgrader,"('createScope', [{'type': 'String', 'name': 'domain'}, {'type': 'String', 'name': 'scopeKey'}])","('createScope', [{'type': 'String', 'name': 'domain'}, {'type': 'String', 'name': 'scopeKey'}])","private void createScope(String domain, String scopeKey) {
    // TODO async call
    Set<Scope> scopes = scopeService.findByDomain(domain).blockingGet();
    Optional<Scope> optScope = scopes.stream().filter(scope -> scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
    if (!optScope.isPresent()) {
        logger.info(""Create a new scope key[{}] for domain[{}]"", scopeKey, domain);
        NewScope scope = new NewScope();
        scope.setKey(scopeKey);
        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
        scope.setDescription(""Default description for scope "" + scopeKey);
        scopeService.create(domain, scope);
    }
}","private Single<Scope> createScope(String domain, String scopeKey) {
    return scopeService.findByDomain(domain)
            .flatMap(scopes -> {
                Optional<Scope> optScope = scopes.stream().filter(scope -> scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
                if (!optScope.isPresent()) {
                    logger.info(""Create a new scope key[{}] for domain[{}]"", scopeKey, domain);
                    NewScope scope = new NewScope();
                    scope.setKey(scopeKey);
                    scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
                    scope.setDescription(""Default description for scope "" + scopeKey);
                    return scopeService.create(domain, scope);
                }
                return Single.just(optScope.get());
            });
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-repository/gravitee-am-repository-mongodb/src/main/java/io/gravitee/am/repository/mongodb/management/MongoDomainRepository.java,gravitee-am-repository/gravitee-am-repository-mongodb/src/main/java/io/gravitee/am/repository/mongodb/management/MongoDomainRepository.java,MongoDomainRepository,MongoDomainRepository,"('convert', [{'type': 'DomainMongo', 'name': 'domainMongo'}])","('convert', [{'type': 'DomainMongo', 'name': 'domainMongo'}])","private Domain convert(DomainMongo domainMongo) {
    if (domainMongo == null) {
        return null;
    }

    Domain domain = new Domain();
    domain.setId(domainMongo.getId());
    domain.setPath(domainMongo.getPath());
    domain.setCreatedAt(domainMongo.getCreatedAt());
    domain.setUpdatedAt(domainMongo.getUpdatedAt());
    domain.setName(domainMongo.getName());
    domain.setDescription(domainMongo.getDescription());
    domain.setEnabled(domainMongo.isEnabled());
    domain.setMaster(domainMongo.isMaster());
    domain.setLoginForm(convert(domainMongo.getLoginForm()));
    return domain;
}","private Domain convert(DomainMongo domainMongo) {
    if (domainMongo == null) {
        return null;
    }

    Domain domain = new Domain();
    domain.setId(domainMongo.getId());
    domain.setPath(domainMongo.getPath());
    domain.setCreatedAt(domainMongo.getCreatedAt());
    domain.setUpdatedAt(domainMongo.getUpdatedAt());
    domain.setName(domainMongo.getName());
    domain.setDescription(domainMongo.getDescription());
    domain.setEnabled(domainMongo.isEnabled());
    domain.setMaster(domainMongo.isMaster());
    domain.setLoginForm(convert(domainMongo.getLoginForm()));
    domain.setIdentities(domainMongo.getIdentities());
    domain.setOauth2Identities(domainMongo.getOauth2Identities());
    return domain;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-repository/gravitee-am-repository-mongodb/src/main/java/io/gravitee/am/repository/mongodb/management/MongoDomainRepository.java,gravitee-am-repository/gravitee-am-repository-mongodb/src/main/java/io/gravitee/am/repository/mongodb/management/MongoDomainRepository.java,MongoDomainRepository,MongoDomainRepository,"('convert', [{'type': 'Domain', 'name': 'domain'}])","('convert', [{'type': 'Domain', 'name': 'domain'}])","private DomainMongo convert(Domain domain) {
    if (domain == null) {
        return null;
    }

    DomainMongo domainMongo = new DomainMongo();
    domainMongo.setId(domain.getId());
    domainMongo.setPath(domain.getPath());
    domainMongo.setCreatedAt(domain.getCreatedAt());
    domainMongo.setUpdatedAt(domain.getUpdatedAt());
    domainMongo.setName(domain.getName());
    domainMongo.setDescription(domain.getDescription());
    domainMongo.setEnabled(domain.isEnabled());
    domainMongo.setMaster(domain.isMaster());
    domainMongo.setLoginForm(convert(domain.getLoginForm()));
    return domainMongo;
}","private DomainMongo convert(Domain domain) {
    if (domain == null) {
        return null;
    }

    DomainMongo domainMongo = new DomainMongo();
    domainMongo.setId(domain.getId());
    domainMongo.setPath(domain.getPath());
    domainMongo.setCreatedAt(domain.getCreatedAt());
    domainMongo.setUpdatedAt(domain.getUpdatedAt());
    domainMongo.setName(domain.getName());
    domainMongo.setDescription(domain.getDescription());
    domainMongo.setEnabled(domain.isEnabled());
    domainMongo.setMaster(domain.isMaster());
    domainMongo.setLoginForm(convert(domain.getLoginForm()));
    domainMongo.setIdentities(domain.getIdentities());
    domainMongo.setOauth2Identities(domain.getOauth2Identities());
    return domainMongo;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/DomainServiceImpl.java,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/DomainServiceImpl.java,DomainServiceImpl,DomainServiceImpl,"('update', [{'type': 'String', 'name': 'domainId'}, {'type': 'UpdateDomain', 'name': 'updateDomain'}])","('update', [{'type': 'String', 'name': 'domainId'}, {'type': 'UpdateDomain', 'name': 'updateDomain'}])","@Override
public Single<Domain> update(String domainId, UpdateDomain updateDomain) {
    LOGGER.debug(""Update an existing domain: {}"", updateDomain);
    return domainRepository.findById(domainId)
            .map(domain -> Optional.of(domain))
            .defaultIfEmpty(Optional.empty())
            .toSingle()
            .flatMap(domainOpt -> {
                if(!domainOpt.isPresent()) {
                    throw new DomainNotFoundException(domainId);
                } else {
                    Domain oldDomain = domainOpt.get();

                    Domain domain = new Domain();
                    domain.setId(domainId);
                    domain.setPath(updateDomain.getPath());
                    domain.setName(updateDomain.getName());
                    domain.setDescription(updateDomain.getDescription());
                    domain.setEnabled(updateDomain.isEnabled());
                    // master flag is set programmatically (keep old value)
                    domain.setMaster(oldDomain.isMaster());
                    domain.setCreatedAt(oldDomain.getCreatedAt());
                    domain.setUpdatedAt(new Date());
                    domain.setLoginForm(oldDomain.getLoginForm());

                    return domainRepository.update(domain);
                }
            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof AbstractManagementException) {
                    return Single.error(ex);
                }

                LOGGER.error(""An error occurs while trying to update a domain"", ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to update a domain"", ex));
            });
}","@Override
public Single<Domain> update(String domainId, UpdateDomain updateDomain) {
    LOGGER.debug(""Update an existing domain: {}"", updateDomain);
    return domainRepository.findById(domainId)
            .map(domain -> Optional.of(domain))
            .defaultIfEmpty(Optional.empty())
            .toSingle()
            .flatMap(domainOpt -> {
                if(!domainOpt.isPresent()) {
                    throw new DomainNotFoundException(domainId);
                } else {
                    Domain oldDomain = domainOpt.get();

                    Domain domain = new Domain();
                    domain.setId(domainId);
                    domain.setPath(updateDomain.getPath());
                    domain.setName(updateDomain.getName());
                    domain.setDescription(updateDomain.getDescription());
                    domain.setEnabled(updateDomain.isEnabled());
                    domain.setIdentities(updateDomain.getIdentities());
                    domain.setOauth2Identities(updateDomain.getOauth2Identities());
                    // master flag is set programmatically (keep old value)
                    domain.setMaster(oldDomain.isMaster());
                    domain.setCreatedAt(oldDomain.getCreatedAt());
                    domain.setUpdatedAt(new Date());
                    domain.setLoginForm(oldDomain.getLoginForm());

                    return domainRepository.update(domain);
                }
            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof AbstractManagementException) {
                    return Single.error(ex);
                }

                LOGGER.error(""An error occurs while trying to update a domain"", ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to update a domain"", ex));
            });
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/DomainServiceImpl.java,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/DomainServiceImpl.java,DomainServiceImpl,DomainServiceImpl,"('reload', [{'type': 'String', 'name': 'domainId'}])","('reload', [{'type': 'String', 'name': 'domainId'}])","@Override
public Single<Domain> reload(String domainId) {
    LOGGER.debug(""Reload a domain: {}"", domainId);
    return domainRepository.findById(domainId)
            .map(domain -> Optional.of(domain))
            .defaultIfEmpty(Optional.empty())
            .toSingle()
            .flatMap(domainOpt -> {
                if(!domainOpt.isPresent()) {
                    throw new DomainNotFoundException(domainId);
                } else {
                    Domain oldDomain = domainOpt.get();

                    Domain domain = new Domain();
                    domain.setId(domainId);
                    domain.setPath(oldDomain.getPath());
                    domain.setName(oldDomain.getName());
                    domain.setDescription(oldDomain.getDescription());
                    domain.setEnabled(oldDomain.isEnabled());
                    domain.setMaster(oldDomain.isMaster());
                    domain.setCreatedAt(oldDomain.getCreatedAt());
                    domain.setUpdatedAt(new Date());
                    domain.setLoginForm(oldDomain.getLoginForm());

                    return domainRepository.update(domain);
                }
            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof AbstractManagementException) {
                    return Single.error(ex);
                }

                LOGGER.error(""An error occurs while trying to reload a domain"", ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to reload a domain"", ex));
            });
}","@Override
public Single<Domain> reload(String domainId) {
    LOGGER.debug(""Reload a domain: {}"", domainId);
    return domainRepository.findById(domainId)
            .map(domain -> Optional.of(domain))
            .defaultIfEmpty(Optional.empty())
            .toSingle()
            .flatMap(domainOpt -> {
                if(!domainOpt.isPresent()) {
                    throw new DomainNotFoundException(domainId);
                } else {
                    Domain oldDomain = domainOpt.get();

                    Domain domain = new Domain();
                    domain.setId(domainId);
                    domain.setPath(oldDomain.getPath());
                    domain.setName(oldDomain.getName());
                    domain.setDescription(oldDomain.getDescription());
                    domain.setEnabled(oldDomain.isEnabled());
                    domain.setMaster(oldDomain.isMaster());
                    domain.setCreatedAt(oldDomain.getCreatedAt());
                    domain.setUpdatedAt(new Date());
                    domain.setLoginForm(oldDomain.getLoginForm());
                    domain.setIdentities(oldDomain.getIdentities());
                    domain.setOauth2Identities(oldDomain.getOauth2Identities());

                    return domainRepository.update(domain);
                }
            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof AbstractManagementException) {
                    return Single.error(ex);
                }

                LOGGER.error(""An error occurs while trying to reload a domain"", ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to reload a domain"", ex));
            });
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/DomainServiceImpl.java,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/DomainServiceImpl.java,DomainServiceImpl,DomainServiceImpl,"('setMasterDomain', [{'type': 'String', 'name': 'domainId'}, {'type': 'boolean', 'name': 'isMaster'}])","('setMasterDomain', [{'type': 'String', 'name': 'domainId'}, {'type': 'boolean', 'name': 'isMaster'}])","@Override
public Single<Domain> setMasterDomain(String domainId, boolean isMaster) {
    LOGGER.debug(""Set master flag for domain: {}"", domainId);
    return domainRepository.findById(domainId)
            .map(domain -> Optional.of(domain))
            .defaultIfEmpty(Optional.empty())
            .toSingle()
            .flatMap(domainOpt -> {
                if(!domainOpt.isPresent()) {
                    throw new DomainNotFoundException(domainId);
                } else {
                    Domain oldDomain = domainOpt.get();

                    Domain domain = new Domain();
                    domain.setId(domainId);
                    domain.setPath(oldDomain.getPath());
                    domain.setName(oldDomain.getName());
                    domain.setDescription(oldDomain.getDescription());
                    domain.setEnabled(oldDomain.isEnabled());
                    domain.setMaster(isMaster);
                    domain.setCreatedAt(oldDomain.getCreatedAt());
                    domain.setUpdatedAt(new Date());
                    domain.setLoginForm(oldDomain.getLoginForm());
                    return domainRepository.update(domain);
                }
            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof AbstractManagementException) {
                    return Single.error(ex);
                }

                LOGGER.error(""An error occurs while trying to set master flag for domain {}"", domainId, ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to set master flag for a domain"", ex));
            });
}","@Override
public Single<Domain> setMasterDomain(String domainId, boolean isMaster) {
    LOGGER.debug(""Set master flag for domain: {}"", domainId);
    return domainRepository.findById(domainId)
            .map(domain -> Optional.of(domain))
            .defaultIfEmpty(Optional.empty())
            .toSingle()
            .flatMap(domainOpt -> {
                if(!domainOpt.isPresent()) {
                    throw new DomainNotFoundException(domainId);
                } else {
                    Domain oldDomain = domainOpt.get();

                    Domain domain = new Domain();
                    domain.setId(domainId);
                    domain.setPath(oldDomain.getPath());
                    domain.setName(oldDomain.getName());
                    domain.setDescription(oldDomain.getDescription());
                    domain.setEnabled(oldDomain.isEnabled());
                    domain.setMaster(isMaster);
                    domain.setCreatedAt(oldDomain.getCreatedAt());
                    domain.setUpdatedAt(new Date());
                    domain.setLoginForm(oldDomain.getLoginForm());
                    domain.setIdentities(oldDomain.getIdentities());
                    domain.setOauth2Identities(oldDomain.getOauth2Identities());

                    return domainRepository.update(domain);
                }
            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof AbstractManagementException) {
                    return Single.error(ex);
                }

                LOGGER.error(""An error occurs while trying to set master flag for domain {}"", domainId, ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to set master flag for a domain"", ex));
            });
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/RoleServiceImpl.java,gravitee-am-service/src/main/java/io/gravitee/am/service/impl/RoleServiceImpl.java,RoleServiceImpl,RoleServiceImpl,"('create', [{'type': 'String', 'name': 'domain'}, {'type': 'NewRole', 'name': 'newRole'}])","('create', [{'type': 'String', 'name': 'domain'}, {'type': 'NewRole', 'name': 'newRole'}])","@Override
public Single<Role> create(String domain, NewRole newRole) {
    LOGGER.debug(""Create a new role {} for domain {}"", newRole, domain);

    String roleId = UUID.toString(UUID.random());

    // check if role name is unique
    return checkRoleUniqueness(newRole.getName(), roleId, domain)
            .flatMap(irrelevant -> {
                Role role = new Role();
                role.setId(roleId);
                role.setDomain(domain);
                role.setName(newRole.getName());
                role.setDescription(newRole.getDescription());
                role.setCreatedAt(new Date());
                role.setUpdatedAt(role.getCreatedAt());
                return roleRepository.create(role);
            })
            .onErrorResumeNext(ex -> {
                LOGGER.error(""An error occurs while trying to create a role"", ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to create a role"", ex));
            });
}","@Override
public Single<Role> create(String domain, NewRole newRole) {
    LOGGER.debug(""Create a new role {} for domain {}"", newRole, domain);

    String roleId = UUID.toString(UUID.random());

    // check if role name is unique
    return checkRoleUniqueness(newRole.getName(), roleId, domain)
            .flatMap(irrelevant -> {
                Role role = new Role();
                role.setId(roleId);
                role.setDomain(domain);
                role.setName(newRole.getName());
                role.setDescription(newRole.getDescription());
                role.setCreatedAt(new Date());
                role.setUpdatedAt(role.getCreatedAt());
                return roleRepository.create(role);
            })
            .onErrorResumeNext(ex -> {
                if (ex instanceof AbstractManagementException) {
                    return Single.error(ex);
                }

                LOGGER.error(""An error occurs while trying to create a role"", ex);
                return Single.error(new TechnicalManagementException(""An error occurs while trying to create a role"", ex));
            });
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-service/src/test/java/io/gravitee/am/service/RoleServiceTest.java,gravitee-am-service/src/test/java/io/gravitee/am/service/RoleServiceTest.java,RoleServiceTest,RoleServiceTest,"('shouldCreate_uniquenessException', [])","('shouldCreate_uniquenessException', [])","@Test
public void shouldCreate_uniquenessException() {
    NewRole newRole = Mockito.mock(NewRole.class);
    when(newRole.getName()).thenReturn(""existing-role-name"");

    Role role = new Role();
    role.setId(""existing-role-id"");
    role.setName(""existing-role-name"");

    when(roleRepository.findByDomain(DOMAIN)).thenReturn(Single.just(Collections.singleton(role)));

    TestObserver testObserver = new TestObserver();
    roleService.create(DOMAIN, newRole).subscribe(testObserver);

    testObserver.assertError(TechnicalManagementException.class);
    testObserver.assertNotComplete();

    verify(roleRepository, never()).create(any(Role.class));
}","@Test
public void shouldCreate_uniquenessException() {
    NewRole newRole = Mockito.mock(NewRole.class);
    when(newRole.getName()).thenReturn(""existing-role-name"");

    Role role = new Role();
    role.setId(""existing-role-id"");
    role.setName(""existing-role-name"");

    when(roleRepository.findByDomain(DOMAIN)).thenReturn(Single.just(Collections.singleton(role)));

    TestObserver testObserver = new TestObserver();
    roleService.create(DOMAIN, newRole).subscribe(testObserver);

    testObserver.assertError(RoleAlreadyExistsException.class);
    testObserver.assertNotComplete();

    verify(roleRepository, never()).create(any(Role.class));
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/authentication/CustomSavedRequestAwareAuthenticationSuccessHandler.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/authentication/CustomSavedRequestAwareAuthenticationSuccessHandler.java,CustomSavedRequestAwareAuthenticationSuccessHandler,CustomSavedRequestAwareAuthenticationSuccessHandler,"('onAuthenticationSuccess', [{'type': 'HttpServletRequest', 'name': 'request'}, {'type': 'HttpServletResponse', 'name': 'response'}, {'type': 'Authentication', 'name': 'authentication'}])","('onAuthenticationSuccess', [{'type': 'HttpServletRequest', 'name': 'request'}, {'type': 'HttpServletResponse', 'name': 'response'}, {'type': 'Authentication', 'name': 'authentication'}])","@Override
public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
                                    Authentication authentication) throws ServletException, IOException {
    SavedRequest savedRequest = requestCache.getRequest(request, response);

    if (savedRequest == null) {
        if (request.getSession(false).getAttribute(SAVED_REQUEST) == null) {
            super.onAuthenticationSuccess(request, response, authentication);

            return;
        } else {
            // fetch saved request from user session
            savedRequest = (SavedRequest) request.getSession(false).getAttribute(SAVED_REQUEST);
        }
    } else {
        // Store the saved HTTP request itself for redirection after successful authentication
        request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);
    }

    String targetUrlParameter = getTargetUrlParameter();
    if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {
        requestCache.removeRequest(request, response);
        super.onAuthenticationSuccess(request, response, authentication);

        return;
    }

    clearAuthenticationAttributes(request);

    // Use the DefaultSavedRequest URL
    String targetUrl = savedRequest.getRedirectUrl();
    logger.debug(""Redirecting to DefaultSavedRequest Url: "" + targetUrl);
    getRedirectStrategy().sendRedirect(request, response, targetUrl);
}","@Override
public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
                                    Authentication authentication) throws ServletException, IOException {
    SavedRequest savedRequest = requestCache.getRequest(request, response);

    if (savedRequest == null) {
        if (request.getSession(false).getAttribute(SAVED_REQUEST) == null) {
            super.onAuthenticationSuccess(request, response, authentication);

            return;
        } else {
            // fetch saved request from user session
            savedRequest = (SavedRequest) request.getSession(false).getAttribute(SAVED_REQUEST);
        }
    } else {
        // Store the saved HTTP request itself for redirection after successful authentication
        request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);
    }

    // store jwt authentication cookie to secure management restricted operations
    Cookie jwtAuthenticationCookie = createJWTAuthenticationCookie(authentication);
    response.addCookie(jwtAuthenticationCookie);

    String targetUrlParameter = getTargetUrlParameter();
    if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {
        requestCache.removeRequest(request, response);
        super.onAuthenticationSuccess(request, response, authentication);

        return;
    }

    clearAuthenticationAttributes(request);

    // Use the DefaultSavedRequest URL
    String targetUrl = savedRequest.getRedirectUrl();
    logger.debug(""Redirecting to DefaultSavedRequest Url: "" + targetUrl);
    getRedirectStrategy().sendRedirect(request, response, targetUrl);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/authentication/OAuth2LoginUrlAuthenticationEntryPoint.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/authentication/LoginUrlAuthenticationEntryPoint.java,OAuth2LoginUrlAuthenticationEntryPoint,LoginUrlAuthenticationEntryPoint,"('OAuth2LoginUrlAuthenticationEntryPoint', [{'type': 'String', 'name': 'loginFormUrl'}])","('LoginUrlAuthenticationEntryPoint', [{'type': 'String', 'name': 'loginFormUrl'}])","public OAuth2LoginUrlAuthenticationEntryPoint(String loginFormUrl) {
    super(loginFormUrl);
}","public LoginUrlAuthenticationEntryPoint(String loginFormUrl) {
    super(loginFormUrl);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2ContextFactory.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminContextFactory.java,OAuth2ContextFactory,AdminContextFactory,"('canHandle', [{'type': 'Domain', 'name': 'domain'}])","('canHandle', [{'type': 'Domain', 'name': 'domain'}])","@Override
public boolean canHandle(Domain domain) {
    return domain != null; // && domain.getType() == Type.OAUTH2;
}","@Override
public boolean canHandle(Domain domain) {
    return domain != null;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2ContextFactory.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminContextFactory.java,OAuth2ContextFactory,AdminContextFactory,"('create', [{'type': 'Domain', 'name': 'domain'}])","('create', [{'type': 'Domain', 'name': 'domain'}])","@Override
public ServletContext<Domain> create(Domain domain) {
    SpringServletContext servletContext = OAuth2SpringServletContext.create(domain).build();
    servletContext.setRootApplicationContext(applicationContext);

    return servletContext;
}","@Override
public ServletContext<Domain> create(Domain domain) {
    SpringServletContext servletContext = AdminSpringServletContext.create(domain).build();
    servletContext.setRootApplicationContext(applicationContext);

    return servletContext;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2ContextLoaderListener.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminContextLoaderListener.java,OAuth2ContextLoaderListener,AdminContextLoaderListener,"('OAuth2ContextLoaderListener', [{'type': 'WebApplicationContext', 'name': 'context'}])","('AdminContextLoaderListener', [{'type': 'WebApplicationContext', 'name': 'context'}])","public OAuth2ContextLoaderListener(WebApplicationContext context) {
    super(context);
}","public AdminContextLoaderListener(WebApplicationContext context) {
    super(context);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2DomainBeanFactoryPostProcessor.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminDomainBeanFactoryPostProcessor.java,OAuth2DomainBeanFactoryPostProcessor,AdminDomainBeanFactoryPostProcessor,"('OAuth2DomainBeanFactoryPostProcessor', [{'type': 'Domain', 'name': 'domain'}])","('AdminDomainBeanFactoryPostProcessor', [{'type': 'Domain', 'name': 'domain'}])","OAuth2DomainBeanFactoryPostProcessor(Domain domain) {
    this.domain = domain;
}","AdminDomainBeanFactoryPostProcessor(Domain domain) {
    this.domain = domain;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2SpringServletContext.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminSpringServletContext.java,OAuth2SpringServletContext,AdminSpringServletContext,"('OAuth2SpringServletContext', [{'type': 'Domain', 'name': 'domain'}])","('AdminSpringServletContext', [{'type': 'Domain', 'name': 'domain'}])","private OAuth2SpringServletContext(Domain domain) {
    this.domain = domain;
}","private AdminSpringServletContext(Domain domain) {
    this.domain = domain;
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2SpringServletContext.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminSpringServletContext.java,OAuth2SpringServletContext,AdminSpringServletContext,"('listeners', [])","('listeners', [])","@Override
public List<EventListener> listeners() {
    return Collections.singletonList(new OAuth2ContextLoaderListener(applicationContext()));
}","@Override
public List<EventListener> listeners() {
    return Collections.singletonList(new AdminContextLoaderListener(applicationContext()));
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2SpringServletContext.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminSpringServletContext.java,OAuth2SpringServletContext,AdminSpringServletContext,"('annotatedClasses', [])","('annotatedClasses', [])","@Override
protected Set<Class<?>> annotatedClasses() {
    return new HashSet<>(Arrays.asList(OAuth2Configuration.class));
}","@Override
protected Set<Class<?>> annotatedClasses() {
    return new HashSet<>(Arrays.asList(AdminConfiguration.class));
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2SpringServletContext.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminSpringServletContext.java,OAuth2SpringServletContext,AdminSpringServletContext,"('beanFactoryPostProcessors', [])","('beanFactoryPostProcessors', [])","@Override
protected Set<? extends BeanFactoryPostProcessor> beanFactoryPostProcessors() {
    return Collections.singleton(new OAuth2DomainBeanFactoryPostProcessor((Domain) deployable()));
}","@Override
protected Set<? extends BeanFactoryPostProcessor> beanFactoryPostProcessors() {
    return Collections.singleton(new AdminDomainBeanFactoryPostProcessor((Domain) deployable()));
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/context/OAuth2SpringServletContext.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/context/AdminSpringServletContext.java,OAuth2SpringServletContext.Builder,AdminSpringServletContext.Builder,"('build', [])","('build', [])","SpringServletContext<Domain> build() {
    return new OAuth2SpringServletContext(domain);
}","SpringServletContext<Domain> build() {
    return new AdminSpringServletContext(domain);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/controller/LoginController.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/controller/LoginController.java,LoginController,LoginController,"('login', [{'type': '@RequestParam(value = OAuth2Utils.CLIENT_ID)', 'name': 'String'}, {'type': 'HttpServletRequest', 'name': 'request'}])","('login', [{'type': '@RequestParam(value = OAuth2Utils.CLIENT_ID)', 'name': 'String'}, {'type': 'HttpServletRequest', 'name': 'request'}])","@RequestMapping(value = ""/login"")
public ModelAndView login(
        @RequestParam(value = OAuth2Utils.CLIENT_ID) String clientId, HttpServletRequest request) {
    if (clientId == null || clientId.isEmpty()) {
        logger.error(OAuth2Utils.CLIENT_ID + "" parameter is required"");
        return new ModelAndView(errorPage, Collections.singletonMap(""error"", OAuth2Utils.CLIENT_ID + "" parameter is required""));
    }

    Client client;
    try {
        // TODO async call
        client = clientService.findByDomainAndClientId(domain.getId(), clientId).blockingGet();
    } catch (Exception e) {
        logger.error(e.getMessage(), e);
        return new ModelAndView(errorPage, Collections.singletonMap(""error"", e.getMessage()));
    }

    Map<String, Object> params = new HashMap<>();
    params.put(OAuth2Utils.CLIENT_ID, client.getClientId());
    params.put(""domain"", domain);

    Set<String> clientOAuth2Providers = client.getOauth2Identities();
    if (clientOAuth2Providers != null && !clientOAuth2Providers.isEmpty()) {
        params.put(""oauth2Providers"", clientOAuth2Providers.stream().map(id -> {
            IdentityProvider identityProvider = identityProviderManager.getIdentityProvider(id);
            String identityProviderType = identityProvider.getType();
            Optional<String> identityProviderSocialType = socialProviders.stream().filter(socialProvider -> identityProviderType.toLowerCase().contains(socialProvider)).findFirst();
            if (identityProviderSocialType.isPresent()) {
                identityProvider.setType(identityProviderSocialType.get());
            }
            return identityProvider;
        }).collect(Collectors.toSet()));

        Map<String, String> authorizeUrls = new HashMap<>();
        clientOAuth2Providers.forEach(identity -> {
            OAuth2AuthenticationProvider oAuth2AuthenticationProvider = (OAuth2AuthenticationProvider) identityProviderManager.get(identity);
            if (oAuth2AuthenticationProvider != null) {
                OAuth2IdentityProviderConfiguration configuration = oAuth2AuthenticationProvider.configuration();
                UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
                builder.queryParam(OAuth2Utils.CLIENT_ID, configuration.getClientId());
                builder.queryParam(OAuth2Utils.REDIRECT_URI, buildRedirectUri(request, identity));
                builder.queryParam(OAuth2Utils.RESPONSE_TYPE, ""code"");
                if (configuration.getScopes() != null && !configuration.getScopes().isEmpty()) {
                    builder.queryParam(OAuth2Utils.SCOPE, String.join("" "", configuration.getScopes()));
                }
                authorizeUrls.put(identity, builder.build(false).toUriString());
            }
        });
        params.put(""authorizeUrls"", authorizeUrls);
    }

    return new ModelAndView(LOGIN_VIEW, params);
}","@RequestMapping(value = ""/login"")
public ModelAndView login(HttpServletRequest request) {
    Map<String, Object> params = new HashMap<>();
    params.put(""domain"", domain);
    Set<String> clientOAuth2Providers = domain.getOauth2Identities();
    if (clientOAuth2Providers != null && !clientOAuth2Providers.isEmpty()) {
        params.put(""oauth2Providers"", clientOAuth2Providers.stream().map(id -> {
            IdentityProvider identityProvider = identityProviderManager.getIdentityProvider(id);
            String identityProviderType = identityProvider.getType();
            Optional<String> identityProviderSocialType = socialProviders.stream().filter(socialProvider -> identityProviderType.toLowerCase().contains(socialProvider)).findFirst();
            if (identityProviderSocialType.isPresent()) {
                identityProvider.setType(identityProviderSocialType.get());
            }
            return identityProvider;
        }).collect(Collectors.toSet()));

        Map<String, String> authorizeUrls = new HashMap<>();
        clientOAuth2Providers.forEach(identity -> {
            OAuth2AuthenticationProvider oAuth2AuthenticationProvider = (OAuth2AuthenticationProvider) identityProviderManager.get(identity);
            if (oAuth2AuthenticationProvider != null) {
                OAuth2IdentityProviderConfiguration configuration = oAuth2AuthenticationProvider.configuration();
                UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
                builder.queryParam(CLIENT_ID, configuration.getClientId());
                builder.queryParam(REDIRECT_URI, buildRedirectUri(request, identity));
                builder.queryParam(RESPONSE_TYPE, ""code"");
                if (configuration.getScopes() != null && !configuration.getScopes().isEmpty()) {
                    builder.queryParam(SCOPE, String.join("" "", configuration.getScopes()));
                }
                authorizeUrls.put(identity, builder.build(false).toUriString());
            }
        });
        params.put(""authorizeUrls"", authorizeUrls);
    }

    return new ModelAndView(LOGIN_VIEW, params);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/filter/OAuth2ClientAuthenticationFilter.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/filter/OAuth2ClientAuthenticationFilter.java,OAuth2ClientAuthenticationFilter,OAuth2ClientAuthenticationFilter,"('attemptAuthentication', [{'type': 'HttpServletRequest', 'name': 'request'}, {'type': 'HttpServletResponse', 'name': 'response'}])","('attemptAuthentication', [{'type': 'HttpServletRequest', 'name': 'request'}, {'type': 'HttpServletResponse', 'name': 'response'}])","@Override
public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException, ServletException {
    // get oauth2 provider
    String providerId = request.getParameter(PROVIDER_PARAMETER);
    AuthenticationProvider authenticationProvider = identityProviderManager.get(providerId);

    if (authenticationProvider == null) {
        throw new ProviderNotFoundException(""OAuth2 Provider "" + providerId + "" not found"");
    }

    if (!(authenticationProvider instanceof OAuth2AuthenticationProvider)) {
        throw new AuthenticationServiceException(""OAuth2 Provider "" + providerId + ""is not social"");
    }

    String password = request.getParameter(((OAuth2AuthenticationProvider) authenticationProvider).configuration().getCodeParameter());
    io.gravitee.am.identityprovider.api.Authentication provAuthentication = new EndUserAuthentication(OAUTH2_IDENTIFIER, password);
    ((EndUserAuthentication) provAuthentication).setAdditionalInformation(Collections.singletonMap(OAuth2Utils.REDIRECT_URI, buildRedirectUri(request)));
    try {
        User user = authenticationProvider.loadUserByUsername(provAuthentication);
        if (user == null) {
            logger.error(""User is null, fail to authenticate user"");
            throw new BadCredentialsException(""User is null after authentication process"");
        }

        // set user identity provider source
        Map<String, String> details = new LinkedHashMap<>();
        details.put(RepositoryProviderUtils.SOURCE, providerId);
        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(user, provAuthentication.getCredentials(), AuthorityUtils.NO_AUTHORITIES);
        usernamePasswordAuthenticationToken.setDetails(details);
        return usernamePasswordAuthenticationToken;
    } catch (Exception ex) {
        logger.error(""Unable to authenticate with oauth2 provider {}"", providerId, ex);
        throw new BadCredentialsException(ex.getMessage(), ex);
    }
}","@Override
public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
    // get oauth2 provider
    String providerId = request.getParameter(PROVIDER_PARAMETER);
    AuthenticationProvider authenticationProvider = identityProviderManager.get(providerId);

    if (authenticationProvider == null) {
        throw new ProviderNotFoundException(""OAuth2 Provider "" + providerId + "" not found"");
    }

    if (!(authenticationProvider instanceof OAuth2AuthenticationProvider)) {
        throw new AuthenticationServiceException(""OAuth2 Provider "" + providerId + ""is not social"");
    }

    String password = request.getParameter(((OAuth2AuthenticationProvider) authenticationProvider).configuration().getCodeParameter());
    io.gravitee.am.identityprovider.api.Authentication provAuthentication = new EndUserAuthentication(OAUTH2_IDENTIFIER, password);
    ((EndUserAuthentication) provAuthentication).setAdditionalInformation(Collections.singletonMap(REDIRECT_URI, buildRedirectUri(request)));
    try {
        User user = authenticationProvider.loadUserByUsername(provAuthentication);
        if (user == null) {
            logger.error(""User is null, fail to authenticate user"");
            throw new BadCredentialsException(""User is null after authentication process"");
        }

        // set user identity provider source
        Map<String, String> details = new LinkedHashMap<>();
        details.put(SOURCE, providerId);
        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(user, provAuthentication.getCredentials(), AuthorityUtils.NO_AUTHORITIES);
        usernamePasswordAuthenticationToken.setDetails(details);
        return usernamePasswordAuthenticationToken;
    } catch (Exception ex) {
        logger.error(""Unable to authenticate with oauth2 provider {}"", providerId, ex);
        throw new BadCredentialsException(ex.getMessage(), ex);
    }
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/filter/OAuth2ClientAuthenticationFilter.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/filter/OAuth2ClientAuthenticationFilter.java,OAuth2ClientAuthenticationFilter,OAuth2ClientAuthenticationFilter,"('successfulAuthentication', [{'type': 'HttpServletRequest', 'name': 'request'}, {'type': 'HttpServletResponse', 'name': 'response'}, {'type': 'FilterChain', 'name': 'chain'}, {'type': 'Authentication', 'name': 'authResult'}])","('successfulAuthentication', [{'type': 'HttpServletRequest', 'name': 'request'}, {'type': 'HttpServletResponse', 'name': 'response'}, {'type': 'FilterChain', 'name': 'chain'}, {'type': 'Authentication', 'name': 'authResult'}])","@Override
protected final void successfulAuthentication(HttpServletRequest request,
                                              HttpServletResponse response, FilterChain chain, Authentication authResult)
        throws IOException, ServletException {

    if (logger.isDebugEnabled()) {
        logger.debug(""Authentication success. Updating SecurityContextHolder to contain: ""
                + authResult);
    }

    SecurityContextHolder.getContext().setAuthentication(authResult);

    // Fire event
    if (this.authenticationEventPublisher != null) {
        authenticationEventPublisher.publishAuthenticationSuccess(authResult);
    }

    // Store the saved HTTP request itself. Used by LoginController (login/callback method)
    // for redirection after successful authentication
    SavedRequest savedRequest = new HttpSessionRequestCache().getRequest(request, response);
    if (savedRequest != null && request.getSession(false) != null) {
        request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);
    }

    chain.doFilter(request, response);
}","@Override
protected final void successfulAuthentication(HttpServletRequest request,
                                              HttpServletResponse response, FilterChain chain, Authentication authResult)
        throws IOException, ServletException {

    if (logger.isDebugEnabled()) {
        logger.debug(""Authentication success. Updating SecurityContextHolder to contain: ""
                + authResult);
    }

    SecurityContextHolder.getContext().setAuthentication(authResult);

    // Fire event
    if (this.authenticationEventPublisher != null) {
        authenticationEventPublisher.publishAuthenticationSuccess(authResult);
    }

    // store jwt authentication cookie to secure management restricted operations
    Cookie jwtAuthenticationCookie = createJWTAuthenticationCookie(authResult);
    response.addCookie(jwtAuthenticationCookie);

    // Store the saved HTTP request itself. Used by LoginController (login/callback method)
    // for redirection after successful authentication
    SavedRequest savedRequest = new HttpSessionRequestCache().getRequest(request, response);
    if (savedRequest != null && request.getSession(false) != null) {
        request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);
    }

    chain.doFilter(request, response);
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/security/listener/AuthenticationSuccessListener.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/security/listener/AuthenticationSuccessListener.java,AuthenticationSuccessListener,AuthenticationSuccessListener,"('onApplicationEvent', [{'type': 'AuthenticationSuccessEvent', 'name': 'event'}])","('onApplicationEvent', [{'type': 'AuthenticationSuccessEvent', 'name': 'event'}])","@Override
public void onApplicationEvent(AuthenticationSuccessEvent event) {
    final User principal = (User) event.getAuthentication().getPrincipal();
    Map<String, String> details = (Map<String, String>) event.getAuthentication().getDetails();

    try {
        // TODO async call
        io.gravitee.am.model.User user = userService.loadUserByUsernameAndDomain(domain.getId(), principal.getUsername()).blockingGet();
        UpdateUser updateUser = new UpdateUser();
        if (details != null) {
            updateUser.setSource(details.get(RepositoryProviderUtils.SOURCE));
            updateUser.setClient(details.get(OAuth2Utils.CLIENT_ID));
        }
        updateUser.setLoggedAt(new Date());
        updateUser.setLoginsCount(user.getLoginsCount() + 1);
        updateUser.setAdditionalInformation(principal.getAdditionalInformation());
        userService.update(domain.getId(), user.getId(), updateUser);
    } catch (UserNotFoundException unfe) {
        final NewUser newUser = new NewUser();
        newUser.setUsername(principal.getUsername());
        if (details != null) {
            newUser.setSource(details.get(RepositoryProviderUtils.SOURCE));
            newUser.setClient(details.get(OAuth2Utils.CLIENT_ID));
        }
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1l);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        userService.create(domain.getId(), newUser);
    }
}","@Override
public void onApplicationEvent(AuthenticationSuccessEvent event) {
    final User principal = (User) event.getAuthentication().getPrincipal();
    Map<String, String> details = (Map<String, String>) event.getAuthentication().getDetails();

    try {
        // TODO async call
        io.gravitee.am.model.User user = userService.loadUserByUsernameAndDomain(domain.getId(), principal.getUsername()).blockingGet();
        UpdateUser updateUser = new UpdateUser();
        if (details != null) {
            updateUser.setSource(details.get(SOURCE));
            updateUser.setClient(CLIENT_ID);
        }
        updateUser.setLoggedAt(new Date());
        updateUser.setLoginsCount(user.getLoginsCount() + 1);
        updateUser.setAdditionalInformation(principal.getAdditionalInformation());
        userService.update(domain.getId(), user.getId(), updateUser);
    } catch (UserNotFoundException unfe) {
        final NewUser newUser = new NewUser();
        newUser.setUsername(principal.getUsername());
        if (details != null) {
            newUser.setSource(details.get(SOURCE));
            newUser.setClient(CLIENT_ID);
        }
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1l);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        userService.create(domain.getId(), newUser);
    }
}"
13859,org.springframework.security.oauth:spring-security-oauth2,io.jsonwebtoken:jjwt,gravitee-io_graviteeio-access-management,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/pom.xml,0b18ada3207991cdfd70a551c56af125d2a0efe1,0b18ada3207991cdfd70a551c56af125d2a0efe1,"+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","+io.jsonwebtoken:jjwt
+org.springframework.security:spring-security-config
+org.springframework.security:spring-security-web
-org.springframework.security.oauth:spring-security-oauth2","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
","feat(rest-api): replace spring security oauth2 with JWT cookie security mechanism
",2018-03-19,2018-03-19,111,gravitee-io,graviteeio-access-management,3b353da5a24425e4e40d325433c00f49bbf87ab9,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/test/java/io/gravitee/am/management/handlers/oauth2/listener/AuthenticationSuccessListenerTest.java,gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/test/java/io/gravitee/am/management/handlers/oauth2/listener/AuthenticationSuccessListenerTest.java,AuthenticationSuccessListenerTest,AuthenticationSuccessListenerTest,"('shouldUpdatedUser', [])","('shouldUpdatedUser', [])","@Test
public void shouldUpdatedUser() {
    when(eventMock.getAuthentication()).thenReturn(authenticationMock);
    when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);
    //when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenReturn(repositoryUserMock);

    listener.onApplicationEvent(eventMock);

    verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());
    verify(userServiceMock, times(1)).update(any(String.class), any(String.class), any(UpdateUser.class));
    verify(userServiceMock, never()).create(any(String.class), any(NewUser.class));
}","@Test
public void shouldUpdatedUser() {
    when(eventMock.getAuthentication()).thenReturn(authenticationMock);
    when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);
    when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenReturn(Maybe.just(repositoryUserMock));

    listener.onApplicationEvent(eventMock);

    verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());
    verify(userServiceMock, times(1)).update(any(String.class), any(String.class), any(UpdateUser.class));
    verify(userServiceMock, never()).create(any(String.class), any(NewUser.class));
}"
1925,commons-httpclient:commons-httpclient,org.apache.httpcomponents:httpclient,EmiteGWT_emite,pom.xml,6bce09ae519ce35bf592b75b110323292b01deef,6bce09ae519ce35bf592b75b110323292b01deef,"+org.apache.httpcomponents:httpclient
-commons-httpclient:commons-httpclient","+org.apache.httpcomponents:httpclient
-commons-httpclient:commons-httpclient","- New Eclipse project, based on m2eclipse.
- Replaced commons-httpclient with the new Apache HttpCore.
- Moved all tests to src/test (some tests are still failing)","- New Eclipse project, based on m2eclipse.
- Replaced commons-httpclient with the new Apache HttpCore.
- Moved all tests to src/test (some tests are still failing)",2011-03-20,2011-03-20,27,EmiteGWT,emite,e0a9748a236d3166b661253b60f6b5c7f00dc9e9,src/main/java/com/calclab/emite/xtesting/services/HttpConnector.java,src/test/java/com/calclab/emite/xtesting/services/HttpConnector.java,HttpConnector,HttpConnector,"('createSendAction', [{'type': 'final', 'name': 'String'}, {'type': 'final', 'name': 'String'}, {'type': 'final', 'name': 'ConnectorCallback'}])","('createSendAction', [{'type': 'final', 'name': 'String'}, {'type': 'final', 'name': 'String'}, {'type': 'final', 'name': 'ConnectorCallback'}])","private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {
urn new Runnable() {
 public void run() {
nal String id = HttpConnectorID.getNext();
bug(""Connector [{0}] send: {1}"", id, xml);
nal HttpClientParams params = new HttpClientParams();
rams.setConnectionManagerTimeout(10000);
nal HttpClient client = new HttpClient(params);
t status = 0;
ring response = null;
nal PostMethod post = new PostMethod(httpBase);

y {
  post.setRequestEntity(new StringRequestEntity(xml, ""text/xml"", ""utf-8""));
  System.out.println(""SENDING: "" + xml);
  status = client.executeMethod(post);
  response = post.getResponseBodyAsString();
catch (final Exception e) {
  callback.onError(xml, e);
  e.printStackTrace();
finally {
  post.releaseConnection();


ceiveService.execute(createResponseAction(xml, callback, id, status, response));
 }

}","private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {
urn new Runnable() {
 public void run() {
nal String id = HttpConnectorID.getNext();
bug(""Connector [{0}] send: {1}"", id, xml);
nal HttpClient client = new DefaultHttpClient();
t status = 0;
ring responseString = null;
nal HttpPost post = new HttpPost(httpBase);

y {
  post.setEntity(new StringEntity(xml, ""text/xml"", ""utf-8""));
  System.out.println(""SENDING: "" + xml);
  HttpResponse response = client.execute(post);
  responseString = EntityUtils.toString(response.getEntity());
catch (final Exception e) {
  callback.onError(xml, e);
  e.printStackTrace();


ceiveService.execute(createResponseAction(xml, callback, id, status, responseString));
 }

}"
