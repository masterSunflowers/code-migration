[
    {
        "repo_name": "wso2_ballerina-message-broker",
        "commit": "de8269ef666d0df5afa45cc6e269e64cc92c3834",
        "rev_path": "modules/broker-core/src/test/java/org/wso2/broker/core/DbUtil.java",
        "definition": "public class DbUtil {\n\n    private static final String DATABASE_URL = \"jdbc:derby:memory:mbDB\";\n\n    private static final String DRIVER_CLASS_NAME = \"org.apache.derby.jdbc.EmbeddedDriver\";\n\n    private static final String path = \"../launcher/src/main/resources/dbscripts/derby-mb.sql\";\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DbUtil.class);\n\n    private static DataSource dataSource;\n\n    static {\n        try {\n            setupDB();\n            dataSource = createDataSource();\n        } catch (SQLException | IOException e) {\n            LOGGER.error(\"Error occurred while setting up database for unit tests\", e);\n        }\n    }\n\n    private static DataSource createDataSource() {\n        HikariConfig hikariDataSourceConfig = new HikariConfig();\n        hikariDataSourceConfig.setJdbcUrl(DATABASE_URL);\n        hikariDataSourceConfig.setDriverClassName(DRIVER_CLASS_NAME);\n        hikariDataSourceConfig.setAutoCommit(false);\n        return new HikariDataSource(hikariDataSourceConfig);\n    }\n\n    public static DataSource getDataSource() {\n        return dataSource;\n    }\n\n    private static void setupDB() throws SQLException, IOException {\n        Connection connection = DriverManager.getConnection(DATABASE_URL + \";create=true\");\n\n        ScriptRunner scriptRunner = new ScriptRunner(connection, true, true);\n        scriptRunner.runScript(new BufferedReader(new FileReader(path)));\n        connection.close();\n    }\n}",
        "package": "package org.wso2.broker.core;",
        "tree_path": "DbUtil",
        "name": "DbUtil",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    private static final String DATABASE_URL = \"jdbc:derby:memory:mbDB\";\n\n    private static final String DRIVER_CLASS_NAME = \"org.apache.derby.jdbc.EmbeddedDriver\";\n\n    private static final String path = \"../launcher/src/main/resources/dbscripts/derby-mb.sql\";\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DbUtil.class);\n\n    private static DataSource dataSource;\n\n    static {\n        try {\n            setupDB();\n            dataSource = createDataSource();\n        } catch (SQLException | IOException e) {\n            LOGGER.error(\"Error occurred while setting up database for unit tests\", e);\n        }\n    }\n\n    private static DataSource createDataSource() {\n        HikariConfig hikariDataSourceConfig = new HikariConfig();\n        hikariDataSourceConfig.setJdbcUrl(DATABASE_URL);\n        hikariDataSourceConfig.setDriverClassName(DRIVER_CLASS_NAME);\n        hikariDataSourceConfig.setAutoCommit(false);\n        return new HikariDataSource(hikariDataSourceConfig);\n    }\n\n    public static DataSource getDataSource() {\n        return dataSource;\n    }\n\n    private static void setupDB() throws SQLException, IOException {\n        Connection connection = DriverManager.getConnection(DATABASE_URL + \";create=true\");\n\n        ScriptRunner scriptRunner = new ScriptRunner(connection, true, true);\n        scriptRunner.runScript(new BufferedReader(new FileReader(path)));\n        connection.close();\n    }\n}",
        "start_point": {
            "row": 35,
            "column": 0
        },
        "end_point": {
            "row": 75,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "private static DataSource createDataSource() {\n    HikariConfig hikariDataSourceConfig = new HikariConfig();\n    hikariDataSourceConfig.setJdbcUrl(DATABASE_URL);\n    hikariDataSourceConfig.setDriverClassName(DRIVER_CLASS_NAME);\n    hikariDataSourceConfig.setAutoCommit(false);\n    return new HikariDataSource(hikariDataSourceConfig);\n}",
                "name": "createDataSource",
                "modifiers": "private static",
                "return_type": "DataSource",
                "parameters": [],
                "body": "{\n    HikariConfig hikariDataSourceConfig = new HikariConfig();\n    hikariDataSourceConfig.setJdbcUrl(DATABASE_URL);\n    hikariDataSourceConfig.setDriverClassName(DRIVER_CLASS_NAME);\n    hikariDataSourceConfig.setAutoCommit(false);\n    return new HikariDataSource(hikariDataSourceConfig);\n}",
                "start_point": {
                    "row": 56,
                    "column": 4
                },
                "end_point": {
                    "row": 62,
                    "column": 5
                }
            },
            {
                "definition": "public static DataSource getDataSource() {\n    return dataSource;\n}",
                "name": "getDataSource",
                "modifiers": "public static",
                "return_type": "DataSource",
                "parameters": [],
                "body": "{\n    return dataSource;\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 66,
                    "column": 5
                }
            },
            {
                "definition": "private static void setupDB() throws SQLException, IOException {\n    Connection connection = DriverManager.getConnection(DATABASE_URL + \";create=true\");\n\n    ScriptRunner scriptRunner = new ScriptRunner(connection, true, true);\n    scriptRunner.runScript(new BufferedReader(new FileReader(path)));\n    connection.close();\n}",
                "name": "setupDB",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [],
                "body": "{\n    Connection connection = DriverManager.getConnection(DATABASE_URL + \";create=true\");\n\n    ScriptRunner scriptRunner = new ScriptRunner(connection, true, true);\n    scriptRunner.runScript(new BufferedReader(new FileReader(path)));\n    connection.close();\n}",
                "start_point": {
                    "row": 68,
                    "column": 4
                },
                "end_point": {
                    "row": 74,
                    "column": 5
                }
            }
        ]
    }
]