[
    {
        "rev_path": "gravitee-am-management-api/gravitee-am-management-api-service/src/main/java/io/gravitee/am/management/service/impl/upgrades/ScopeUpgrader.java",
        "definition": "@Component\npublic class ScopeUpgrader implements Upgrader, Ordered {\n\n    /**\n     * Logger.\n     */\n    private final Logger logger = LoggerFactory.getLogger(ScopeUpgrader.class);\n\n    @Autowired\n    private DomainService domainService;\n\n    @Autowired\n    private ScopeService scopeService;\n\n    @Autowired\n    private ClientService clientService;\n\n    @Autowired\n    private RoleService roleService;\n\n    @Override\n    public boolean upgrade() {\n        logger.info(\"Applying scope upgrade\");\n        // TODO async call\n        Set<Domain> domains = domainService.findAll().blockingGet();\n\n        domains.forEach(this::upgradeDomain);\n\n        return true;\n    }\n\n    private void upgradeDomain(Domain domain) {\n        logger.info(\"Looking for scopes for domain id[{}] name[{}]\", domain.getId(), domain.getName());\n        // TODO async call\n        Set<Scope> scopes = scopeService.findByDomain(domain.getId()).blockingGet();\n        if (scopes.isEmpty()) {\n            logger.info(\"No scope found for domain id[{}] name[{}]. Upgrading...\", domain.getId(), domain.getName());\n\n            createClientScopes(domain);\n            createRoleScopes(domain);\n        }\n    }\n\n    private void createClientScopes(Domain domain) {\n        // TODO async call\n        Set<Client> clients = clientService.findByDomain(domain.getId()).blockingGet();\n\n        if (clients != null) {\n            clients.forEach(client -> {\n                if (client.getScopes() != null) {\n                    client.getScopes().forEach(scope -> createScope(domain.getId(), scope));\n                }\n            });\n        }\n    }\n\n    private void createRoleScopes(Domain domain) {\n        // TODO async call\n        Set<Role> roles = roleService.findByDomain(domain.getId()).blockingGet();\n\n        if (roles != null) {\n            roles.forEach(role -> {\n                if (role.getPermissions() != null) {\n                    role.getPermissions().forEach(scope -> createScope(domain.getId(), scope));\n                }\n            });\n        }\n    }\n\n    private void createScope(String domain, String scopeKey) {\n        // TODO async call\n        Set<Scope> scopes = scopeService.findByDomain(domain).blockingGet();\n        Optional<Scope> optScope = scopes.stream().filter(scope -> scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();\n        if (!optScope.isPresent()) {\n            logger.info(\"Create a new scope key[{}] for domain[{}]\", scopeKey, domain);\n            NewScope scope = new NewScope();\n            scope.setKey(scopeKey);\n            scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));\n            scope.setDescription(\"Default description for scope \" + scopeKey);\n            scopeService.create(domain, scope);\n        }\n    }\n\n    @Override\n    public int getOrder() {\n        return 160;\n    }\n}",
        "package": "package io.gravitee.am.management.service.impl.upgrades;",
        "tree_path": "ScopeUpgrader",
        "name": "ScopeUpgrader",
        "modifiers": "@Component\npublic",
        "superclass": null,
        "super_interfaces": "implements Upgrader, Ordered",
        "body": "{\n\n    /**\n     * Logger.\n     */\n    private final Logger logger = LoggerFactory.getLogger(ScopeUpgrader.class);\n\n    @Autowired\n    private DomainService domainService;\n\n    @Autowired\n    private ScopeService scopeService;\n\n    @Autowired\n    private ClientService clientService;\n\n    @Autowired\n    private RoleService roleService;\n\n    @Override\n    public boolean upgrade() {\n        logger.info(\"Applying scope upgrade\");\n        // TODO async call\n        Set<Domain> domains = domainService.findAll().blockingGet();\n\n        domains.forEach(this::upgradeDomain);\n\n        return true;\n    }\n\n    private void upgradeDomain(Domain domain) {\n        logger.info(\"Looking for scopes for domain id[{}] name[{}]\", domain.getId(), domain.getName());\n        // TODO async call\n        Set<Scope> scopes = scopeService.findByDomain(domain.getId()).blockingGet();\n        if (scopes.isEmpty()) {\n            logger.info(\"No scope found for domain id[{}] name[{}]. Upgrading...\", domain.getId(), domain.getName());\n\n            createClientScopes(domain);\n            createRoleScopes(domain);\n        }\n    }\n\n    private void createClientScopes(Domain domain) {\n        // TODO async call\n        Set<Client> clients = clientService.findByDomain(domain.getId()).blockingGet();\n\n        if (clients != null) {\n            clients.forEach(client -> {\n                if (client.getScopes() != null) {\n                    client.getScopes().forEach(scope -> createScope(domain.getId(), scope));\n                }\n            });\n        }\n    }\n\n    private void createRoleScopes(Domain domain) {\n        // TODO async call\n        Set<Role> roles = roleService.findByDomain(domain.getId()).blockingGet();\n\n        if (roles != null) {\n            roles.forEach(role -> {\n                if (role.getPermissions() != null) {\n                    role.getPermissions().forEach(scope -> createScope(domain.getId(), scope));\n                }\n            });\n        }\n    }\n\n    private void createScope(String domain, String scopeKey) {\n        // TODO async call\n        Set<Scope> scopes = scopeService.findByDomain(domain).blockingGet();\n        Optional<Scope> optScope = scopes.stream().filter(scope -> scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();\n        if (!optScope.isPresent()) {\n            logger.info(\"Create a new scope key[{}] for domain[{}]\", scopeKey, domain);\n            NewScope scope = new NewScope();\n            scope.setKey(scopeKey);\n            scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));\n            scope.setDescription(\"Default description for scope \" + scopeKey);\n            scopeService.create(domain, scope);\n        }\n    }\n\n    @Override\n    public int getOrder() {\n        return 160;\n    }\n}",
        "start_point": {
            "row": 39,
            "column": 0
        },
        "end_point": {
            "row": 126,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Override\npublic boolean upgrade() {\n    logger.info(\"Applying scope upgrade\");\n    // TODO async call\n    Set<Domain> domains = domainService.findAll().blockingGet();\n\n    domains.forEach(this::upgradeDomain);\n\n    return true;\n}",
                "name": "upgrade",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    logger.info(\"Applying scope upgrade\");\n    // TODO async call\n    Set<Domain> domains = domainService.findAll().blockingGet();\n\n    domains.forEach(this::upgradeDomain);\n\n    return true;\n}",
                "start_point": {
                    "row": 59,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "private void upgradeDomain(Domain domain) {\n    logger.info(\"Looking for scopes for domain id[{}] name[{}]\", domain.getId(), domain.getName());\n    // TODO async call\n    Set<Scope> scopes = scopeService.findByDomain(domain.getId()).blockingGet();\n    if (scopes.isEmpty()) {\n        logger.info(\"No scope found for domain id[{}] name[{}]. Upgrading...\", domain.getId(), domain.getName());\n\n        createClientScopes(domain);\n        createRoleScopes(domain);\n    }\n}",
                "name": "upgradeDomain",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Domain",
                        "name": "domain"
                    }
                ],
                "body": "{\n    logger.info(\"Looking for scopes for domain id[{}] name[{}]\", domain.getId(), domain.getName());\n    // TODO async call\n    Set<Scope> scopes = scopeService.findByDomain(domain.getId()).blockingGet();\n    if (scopes.isEmpty()) {\n        logger.info(\"No scope found for domain id[{}] name[{}]. Upgrading...\", domain.getId(), domain.getName());\n\n        createClientScopes(domain);\n        createRoleScopes(domain);\n    }\n}",
                "start_point": {
                    "row": 70,
                    "column": 4
                },
                "end_point": {
                    "row": 80,
                    "column": 5
                }
            },
            {
                "definition": "private void createClientScopes(Domain domain) {\n    // TODO async call\n    Set<Client> clients = clientService.findByDomain(domain.getId()).blockingGet();\n\n    if (clients != null) {\n        clients.forEach(client -> {\n            if (client.getScopes() != null) {\n                client.getScopes().forEach(scope -> createScope(domain.getId(), scope));\n            }\n        });\n    }\n}",
                "name": "createClientScopes",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Domain",
                        "name": "domain"
                    }
                ],
                "body": "{\n    // TODO async call\n    Set<Client> clients = clientService.findByDomain(domain.getId()).blockingGet();\n\n    if (clients != null) {\n        clients.forEach(client -> {\n            if (client.getScopes() != null) {\n                client.getScopes().forEach(scope -> createScope(domain.getId(), scope));\n            }\n        });\n    }\n}",
                "start_point": {
                    "row": 82,
                    "column": 4
                },
                "end_point": {
                    "row": 93,
                    "column": 5
                }
            },
            {
                "definition": "private void createRoleScopes(Domain domain) {\n    // TODO async call\n    Set<Role> roles = roleService.findByDomain(domain.getId()).blockingGet();\n\n    if (roles != null) {\n        roles.forEach(role -> {\n            if (role.getPermissions() != null) {\n                role.getPermissions().forEach(scope -> createScope(domain.getId(), scope));\n            }\n        });\n    }\n}",
                "name": "createRoleScopes",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Domain",
                        "name": "domain"
                    }
                ],
                "body": "{\n    // TODO async call\n    Set<Role> roles = roleService.findByDomain(domain.getId()).blockingGet();\n\n    if (roles != null) {\n        roles.forEach(role -> {\n            if (role.getPermissions() != null) {\n                role.getPermissions().forEach(scope -> createScope(domain.getId(), scope));\n            }\n        });\n    }\n}",
                "start_point": {
                    "row": 95,
                    "column": 4
                },
                "end_point": {
                    "row": 106,
                    "column": 5
                }
            },
            {
                "definition": "private void createScope(String domain, String scopeKey) {\n    // TODO async call\n    Set<Scope> scopes = scopeService.findByDomain(domain).blockingGet();\n    Optional<Scope> optScope = scopes.stream().filter(scope -> scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();\n    if (!optScope.isPresent()) {\n        logger.info(\"Create a new scope key[{}] for domain[{}]\", scopeKey, domain);\n        NewScope scope = new NewScope();\n        scope.setKey(scopeKey);\n        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));\n        scope.setDescription(\"Default description for scope \" + scopeKey);\n        scopeService.create(domain, scope);\n    }\n}",
                "name": "createScope",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "domain"
                    },
                    {
                        "type": "String",
                        "name": "scopeKey"
                    }
                ],
                "body": "{\n    // TODO async call\n    Set<Scope> scopes = scopeService.findByDomain(domain).blockingGet();\n    Optional<Scope> optScope = scopes.stream().filter(scope -> scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();\n    if (!optScope.isPresent()) {\n        logger.info(\"Create a new scope key[{}] for domain[{}]\", scopeKey, domain);\n        NewScope scope = new NewScope();\n        scope.setKey(scopeKey);\n        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));\n        scope.setDescription(\"Default description for scope \" + scopeKey);\n        scopeService.create(domain, scope);\n    }\n}",
                "start_point": {
                    "row": 108,
                    "column": 4
                },
                "end_point": {
                    "row": 120,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic int getOrder() {\n    return 160;\n}",
                "name": "getOrder",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    return 160;\n}",
                "start_point": {
                    "row": 122,
                    "column": 4
                },
                "end_point": {
                    "row": 125,
                    "column": 5
                }
            }
        ]
    }
]