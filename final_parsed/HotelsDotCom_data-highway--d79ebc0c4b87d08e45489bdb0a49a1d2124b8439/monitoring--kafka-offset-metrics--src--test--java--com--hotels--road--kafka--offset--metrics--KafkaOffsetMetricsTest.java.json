[
    {
        "repo_name": "HotelsDotCom_data-highway",
        "commit": "d79ebc0c4b87d08e45489bdb0a49a1d2124b8439",
        "rev_path": "monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsTest.java",
        "definition": "@RunWith(MockitoJUnitRunner.class)\npublic class KafkaOffsetMetricsTest {\n\n  @Mock\n  private AdminClient adminClient;\n\n  @Mock\n  private Supplier<String> hostnameSupplier;\n\n  @Mock\n  private CollectorRegistry collectorRegistry;\n\n  private KafkaOffsetMetrics underTest;\n\n  @Before\n  public void before() {\n    underTest = new KafkaOffsetMetrics(adminClient, hostnameSupplier, collectorRegistry);\n  }\n\n  @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n  @Test\n  public void happyPath() {\n    scala.collection.immutable.List<GroupOverview> listAllGroupsFlattened = asScalaSet(\n        singleton(GroupOverview.apply(\"groupId\", \"\"))).toList();\n    when(adminClient.listAllGroupsFlattened()).thenReturn(listAllGroupsFlattened);\n\n    scala.collection.immutable.Map<TopicPartition, Object> offsets = asScalaMap(\n        singletonMap(new TopicPartition(\"topicName\", 0), (Object) 1L));\n    when(adminClient.listGroupOffsets(\"groupId\")).thenReturn(offsets);\n\n    when(hostnameSupplier.get()).thenReturn(\"localhost\");\n\n    List<Collector.MetricFamilySamples> collection = underTest.collect();\n\n    assertThat(collection.size(), is(1));\n    Collector.MetricFamilySamples mfs = collection.get(0);\n\n    assertThat(mfs.name, is(\"kafka-offset\"));\n    assertThat(mfs.type, is(GAUGE));\n    assertThat(mfs.samples, is(not(empty())));\n    assertThat(mfs.samples, is(hasSize(1)));\n\n    Collector.MetricFamilySamples.Sample sample = mfs.samples.get(0);\n\n    assertThat(sample.name, is(\"kafka-offset\"));\n    assertThat(sample.labelNames, is(asList(\"host\", \"group\", \"topic\", \"partition\")));\n    assertThat(sample.labelValues, is(asList(\"localhost\", \"groupId\", \"topicName\", \"0\")));\n    assertThat(sample.value, is(1.0d));\n  }\n\n  private scala.collection.immutable.Map<TopicPartition, Object> asScalaMap(Map<TopicPartition, Object> map) {\n    return mapAsScalaMap(map).toMap(Predef.<Tuple2<TopicPartition, Object>> conforms());\n  }\n}",
        "package": "package com.hotels.road.kafka.offset.metrics;",
        "tree_path": "KafkaOffsetMetricsTest",
        "name": "KafkaOffsetMetricsTest",
        "modifiers": "@RunWith(MockitoJUnitRunner.class)\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n  @Mock\n  private AdminClient adminClient;\n\n  @Mock\n  private Supplier<String> hostnameSupplier;\n\n  @Mock\n  private CollectorRegistry collectorRegistry;\n\n  private KafkaOffsetMetrics underTest;\n\n  @Before\n  public void before() {\n    underTest = new KafkaOffsetMetrics(adminClient, hostnameSupplier, collectorRegistry);\n  }\n\n  @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n  @Test\n  public void happyPath() {\n    scala.collection.immutable.List<GroupOverview> listAllGroupsFlattened = asScalaSet(\n        singleton(GroupOverview.apply(\"groupId\", \"\"))).toList();\n    when(adminClient.listAllGroupsFlattened()).thenReturn(listAllGroupsFlattened);\n\n    scala.collection.immutable.Map<TopicPartition, Object> offsets = asScalaMap(\n        singletonMap(new TopicPartition(\"topicName\", 0), (Object) 1L));\n    when(adminClient.listGroupOffsets(\"groupId\")).thenReturn(offsets);\n\n    when(hostnameSupplier.get()).thenReturn(\"localhost\");\n\n    List<Collector.MetricFamilySamples> collection = underTest.collect();\n\n    assertThat(collection.size(), is(1));\n    Collector.MetricFamilySamples mfs = collection.get(0);\n\n    assertThat(mfs.name, is(\"kafka-offset\"));\n    assertThat(mfs.type, is(GAUGE));\n    assertThat(mfs.samples, is(not(empty())));\n    assertThat(mfs.samples, is(hasSize(1)));\n\n    Collector.MetricFamilySamples.Sample sample = mfs.samples.get(0);\n\n    assertThat(sample.name, is(\"kafka-offset\"));\n    assertThat(sample.labelNames, is(asList(\"host\", \"group\", \"topic\", \"partition\")));\n    assertThat(sample.labelValues, is(asList(\"localhost\", \"groupId\", \"topicName\", \"0\")));\n    assertThat(sample.value, is(1.0d));\n  }\n\n  private scala.collection.immutable.Map<TopicPartition, Object> asScalaMap(Map<TopicPartition, Object> map) {\n    return mapAsScalaMap(map).toMap(Predef.<Tuple2<TopicPartition, Object>> conforms());\n  }\n}",
        "start_point": {
            "row": 50,
            "column": 0
        },
        "end_point": {
            "row": 103,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Before\npublic void before() {\n  underTest = new KafkaOffsetMetrics(adminClient, hostnameSupplier, collectorRegistry);\n}",
                "name": "before",
                "modifiers": "@Before\n  public",
                "return_type": null,
                "parameters": [],
                "body": "{\n  underTest = new KafkaOffsetMetrics(adminClient, hostnameSupplier, collectorRegistry);\n}",
                "start_point": {
                    "row": 64,
                    "column": 2
                },
                "end_point": {
                    "row": 67,
                    "column": 3
                }
            },
            {
                "definition": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n@Test\npublic void happyPath() {\n  scala.collection.immutable.List<GroupOverview> listAllGroupsFlattened = asScalaSet(\n      singleton(GroupOverview.apply(\"groupId\", \"\"))).toList();\n  when(adminClient.listAllGroupsFlattened()).thenReturn(listAllGroupsFlattened);\n\n  scala.collection.immutable.Map<TopicPartition, Object> offsets = asScalaMap(\n      singletonMap(new TopicPartition(\"topicName\", 0), (Object) 1L));\n  when(adminClient.listGroupOffsets(\"groupId\")).thenReturn(offsets);\n\n  when(hostnameSupplier.get()).thenReturn(\"localhost\");\n\n  List<Collector.MetricFamilySamples> collection = underTest.collect();\n\n  assertThat(collection.size(), is(1));\n  Collector.MetricFamilySamples mfs = collection.get(0);\n\n  assertThat(mfs.name, is(\"kafka-offset\"));\n  assertThat(mfs.type, is(GAUGE));\n  assertThat(mfs.samples, is(not(empty())));\n  assertThat(mfs.samples, is(hasSize(1)));\n\n  Collector.MetricFamilySamples.Sample sample = mfs.samples.get(0);\n\n  assertThat(sample.name, is(\"kafka-offset\"));\n  assertThat(sample.labelNames, is(asList(\"host\", \"group\", \"topic\", \"partition\")));\n  assertThat(sample.labelValues, is(asList(\"localhost\", \"groupId\", \"topicName\", \"0\")));\n  assertThat(sample.value, is(1.0d));\n}",
                "name": "happyPath",
                "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n  @Test\n  public",
                "return_type": null,
                "parameters": [],
                "body": "{\n  scala.collection.immutable.List<GroupOverview> listAllGroupsFlattened = asScalaSet(\n      singleton(GroupOverview.apply(\"groupId\", \"\"))).toList();\n  when(adminClient.listAllGroupsFlattened()).thenReturn(listAllGroupsFlattened);\n\n  scala.collection.immutable.Map<TopicPartition, Object> offsets = asScalaMap(\n      singletonMap(new TopicPartition(\"topicName\", 0), (Object) 1L));\n  when(adminClient.listGroupOffsets(\"groupId\")).thenReturn(offsets);\n\n  when(hostnameSupplier.get()).thenReturn(\"localhost\");\n\n  List<Collector.MetricFamilySamples> collection = underTest.collect();\n\n  assertThat(collection.size(), is(1));\n  Collector.MetricFamilySamples mfs = collection.get(0);\n\n  assertThat(mfs.name, is(\"kafka-offset\"));\n  assertThat(mfs.type, is(GAUGE));\n  assertThat(mfs.samples, is(not(empty())));\n  assertThat(mfs.samples, is(hasSize(1)));\n\n  Collector.MetricFamilySamples.Sample sample = mfs.samples.get(0);\n\n  assertThat(sample.name, is(\"kafka-offset\"));\n  assertThat(sample.labelNames, is(asList(\"host\", \"group\", \"topic\", \"partition\")));\n  assertThat(sample.labelValues, is(asList(\"localhost\", \"groupId\", \"topicName\", \"0\")));\n  assertThat(sample.value, is(1.0d));\n}",
                "start_point": {
                    "row": 69,
                    "column": 2
                },
                "end_point": {
                    "row": 98,
                    "column": 3
                }
            },
            {
                "definition": "private scala.collection.immutable.Map<TopicPartition, Object> asScalaMap(Map<TopicPartition, Object> map) {\n  return mapAsScalaMap(map).toMap(Predef.<Tuple2<TopicPartition, Object>> conforms());\n}",
                "name": "asScalaMap",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<TopicPartition, Object>",
                        "name": "map"
                    }
                ],
                "body": "{\n  return mapAsScalaMap(map).toMap(Predef.<Tuple2<TopicPartition, Object>> conforms());\n}",
                "start_point": {
                    "row": 100,
                    "column": 2
                },
                "end_point": {
                    "row": 102,
                    "column": 3
                }
            }
        ]
    }
]