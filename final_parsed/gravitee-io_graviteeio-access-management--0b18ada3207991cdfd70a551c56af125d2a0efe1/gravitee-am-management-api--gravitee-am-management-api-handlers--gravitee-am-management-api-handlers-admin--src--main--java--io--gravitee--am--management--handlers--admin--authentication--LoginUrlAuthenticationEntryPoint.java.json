[
    {
        "repo_name": "gravitee-io_graviteeio-access-management",
        "commit": "0b18ada3207991cdfd70a551c56af125d2a0efe1",
        "rev_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/authentication/LoginUrlAuthenticationEntryPoint.java",
        "definition": "public class LoginUrlAuthenticationEntryPoint extends org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint {\n\n    public LoginUrlAuthenticationEntryPoint(String loginFormUrl) {\n        super(loginFormUrl);\n    }\n\n    @Override\n    protected String buildRedirectUrlToLoginPage(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) {\n        String url = super.buildRedirectUrlToLoginPage(request, response, authException);\n\n        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);\n\n        String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);\n        if (scheme != null && !scheme.isEmpty()) {\n            builder.scheme(scheme);\n        }\n\n        String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);\n        if (host != null && !host.isEmpty()) {\n            if (host.contains(\":\")) {\n                // Forwarded host contains both host and port\n                String [] parts = host.split(\":\");\n                builder.host(parts[0]);\n                builder.port(parts[1]);\n            } else {\n                builder.host(host);\n            }\n        }\n\n        return builder.toUriString();\n    }\n}",
        "package": "package io.gravitee.am.management.handlers.admin.authentication;",
        "tree_path": "LoginUrlAuthenticationEntryPoint",
        "name": "LoginUrlAuthenticationEntryPoint",
        "modifiers": "public",
        "superclass": "extends org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint",
        "super_interfaces": null,
        "body": "{\n\n    public LoginUrlAuthenticationEntryPoint(String loginFormUrl) {\n        super(loginFormUrl);\n    }\n\n    @Override\n    protected String buildRedirectUrlToLoginPage(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) {\n        String url = super.buildRedirectUrlToLoginPage(request, response, authException);\n\n        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);\n\n        String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);\n        if (scheme != null && !scheme.isEmpty()) {\n            builder.scheme(scheme);\n        }\n\n        String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);\n        if (host != null && !host.isEmpty()) {\n            if (host.contains(\":\")) {\n                // Forwarded host contains both host and port\n                String [] parts = host.split(\":\");\n                builder.host(parts[0]);\n                builder.port(parts[1]);\n            } else {\n                builder.host(host);\n            }\n        }\n\n        return builder.toUriString();\n    }\n}",
        "start_point": {
            "row": 28,
            "column": 0
        },
        "end_point": {
            "row": 59,
            "column": 1
        },
        "file_mode": "Renamed-Modified",
        "map_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/authentication/OAuth2LoginUrlAuthenticationEntryPoint.java",
        "methods": [
            {
                "definition": "public LoginUrlAuthenticationEntryPoint(String loginFormUrl) {\n    super(loginFormUrl);\n}",
                "name": "LoginUrlAuthenticationEntryPoint",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "String",
                        "name": "loginFormUrl"
                    }
                ],
                "body": "{\n    super(loginFormUrl);\n}",
                "constructor": true,
                "start_point": {
                    "row": 30,
                    "column": 4
                },
                "end_point": {
                    "row": 32,
                    "column": 5
                }
            },
            {
                "definition": "@Override\nprotected String buildRedirectUrlToLoginPage(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) {\n    String url = super.buildRedirectUrlToLoginPage(request, response, authException);\n\n    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);\n\n    String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);\n    if (scheme != null && !scheme.isEmpty()) {\n        builder.scheme(scheme);\n    }\n\n    String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);\n    if (host != null && !host.isEmpty()) {\n        if (host.contains(\":\")) {\n            // Forwarded host contains both host and port\n            String [] parts = host.split(\":\");\n            builder.host(parts[0]);\n            builder.port(parts[1]);\n        } else {\n            builder.host(host);\n        }\n    }\n\n    return builder.toUriString();\n}",
                "name": "buildRedirectUrlToLoginPage",
                "modifiers": "@Override\n    protected",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    },
                    {
                        "type": "HttpServletResponse",
                        "name": "response"
                    },
                    {
                        "type": "AuthenticationException",
                        "name": "authException"
                    }
                ],
                "body": "{\n    String url = super.buildRedirectUrlToLoginPage(request, response, authException);\n\n    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);\n\n    String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);\n    if (scheme != null && !scheme.isEmpty()) {\n        builder.scheme(scheme);\n    }\n\n    String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);\n    if (host != null && !host.isEmpty()) {\n        if (host.contains(\":\")) {\n            // Forwarded host contains both host and port\n            String [] parts = host.split(\":\");\n            builder.host(parts[0]);\n            builder.port(parts[1]);\n        } else {\n            builder.host(host);\n        }\n    }\n\n    return builder.toUriString();\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 58,
                    "column": 5
                }
            }
        ]
    }
]