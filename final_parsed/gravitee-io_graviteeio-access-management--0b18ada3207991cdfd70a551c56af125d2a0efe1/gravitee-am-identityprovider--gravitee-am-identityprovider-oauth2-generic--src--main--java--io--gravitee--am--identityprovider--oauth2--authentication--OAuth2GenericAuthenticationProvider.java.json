[
    {
        "repo_name": "gravitee-io_graviteeio-access-management",
        "commit": "0b18ada3207991cdfd70a551c56af125d2a0efe1",
        "rev_path": "gravitee-am-identityprovider/gravitee-am-identityprovider-oauth2-generic/src/main/java/io/gravitee/am/identityprovider/oauth2/authentication/OAuth2GenericAuthenticationProvider.java",
        "definition": "@Import(OAuth2GenericAuthenticationProviderConfiguration.class)\npublic class OAuth2GenericAuthenticationProvider implements OAuth2AuthenticationProvider {\n\n    private static final Logger logger = LoggerFactory.getLogger(OAuth2GenericAuthenticationProvider.class);\n    private static final String CLIENT_ID = \"client_id\";\n    private static final String REDIRECT_URI = \"redirect_uri\";\n    private static final String GRANT_TYPE = \"grant_type\";\n    private static final String CLAIMS_SUB = \"sub\";\n    private ObjectMapper objectMapper = new ObjectMapper();\n\n    @Autowired\n    private HttpClient client;\n\n    @Autowired\n    private OAuth2IdentityProviderConfiguration configuration;\n\n    @Autowired\n    private OAuth2GenericIdentityProviderMapper mapper;\n\n    @Override\n    public User loadUserByUsername(Authentication authentication) {\n        try {\n            HttpPost post = new HttpPost(configuration.getAccessTokenUri());\n            List<NameValuePair> urlParameters = new ArrayList<>();\n            urlParameters.add(new BasicNameValuePair(CLIENT_ID, configuration.getClientId()));\n            urlParameters.add(new BasicNameValuePair(\"client_secret\", configuration.getClientSecret()));\n            urlParameters.add(new BasicNameValuePair(REDIRECT_URI, (String) authentication.getAdditionalInformation().get(REDIRECT_URI)));\n            urlParameters.add(new BasicNameValuePair(\"code\", (String) authentication.getCredentials()));\n            urlParameters.add(new BasicNameValuePair(GRANT_TYPE, \"authorization_code\"));\n            post.setEntity(new UrlEncodedFormEntity(urlParameters));\n\n            // authenticate user\n            HttpResponse response = client.execute(post);\n            BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n            String content = read(rd);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new BadCredentialsException(content);\n            }\n            JsonNode params = objectMapper.readTree(content);\n            String accessToken = params.get(\"access_token\").asText();\n\n            // get user profile\n            HttpGet request = new HttpGet(configuration.getUserProfileUri());\n            request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n            response = client.execute(request);\n            rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n            content = read(rd);\n            JsonNode jsonNode = objectMapper.readTree(content);\n            return createUser(jsonNode);\n        } catch (Exception e) {\n            logger.error(\"Fail to authenticate OAuth 2.0 generic user account\", e);\n            throw new InternalAuthenticationServiceException(e.getMessage());\n        }\n    }\n\n    @Override\n    public User loadUserByUsername(String username) {\n        return null;\n    }\n\n    @Override\n    public OAuth2IdentityProviderConfiguration configuration() {\n        return configuration;\n    }\n\n    private User createUser(JsonNode jsonNode) {\n        User user = new DefaultUser(jsonNode.get(CLAIMS_SUB).asText());\n        // set additional information\n        Map<String, Object> additionalInformation = new HashMap<>();\n        additionalInformation.put(\"sub\", jsonNode.get(CLAIMS_SUB).asText());\n        if (this.mapper.getMappers() != null) {\n            this.mapper.getMappers().forEach((k, v) -> {\n                if (jsonNode.get(v) != null) {\n                    additionalInformation.put(k, jsonNode.get(v).asText());\n                }\n            });\n        }\n        ((DefaultUser) user).setAdditonalInformation(additionalInformation);\n        return user;\n    }\n\n    private String read(Reader rd) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int cp;\n        while ((cp = rd.read()) != -1) {\n            sb.append((char) cp);\n        }\n        return sb.toString();\n    }\n\n    private Map<String, String> extractMap(String param) {\n        Map<String, String> query_pairs = new LinkedHashMap<>();\n        String[] pairs = param.split(\"&\");\n        for (String pair : pairs) {\n            int idx = pair.indexOf(\"=\");\n            query_pairs.put(pair.substring(0, idx), pair.substring(idx + 1));\n        }\n        return query_pairs;\n\n    }\n}",
        "package": "package io.gravitee.am.identityprovider.oauth2.authentication;",
        "tree_path": "OAuth2GenericAuthenticationProvider",
        "name": "OAuth2GenericAuthenticationProvider",
        "modifiers": "@Import(OAuth2GenericAuthenticationProviderConfiguration.class)\npublic",
        "superclass": null,
        "super_interfaces": "implements OAuth2AuthenticationProvider",
        "body": "{\n\n    private static final Logger logger = LoggerFactory.getLogger(OAuth2GenericAuthenticationProvider.class);\n    private static final String CLIENT_ID = \"client_id\";\n    private static final String REDIRECT_URI = \"redirect_uri\";\n    private static final String GRANT_TYPE = \"grant_type\";\n    private static final String CLAIMS_SUB = \"sub\";\n    private ObjectMapper objectMapper = new ObjectMapper();\n\n    @Autowired\n    private HttpClient client;\n\n    @Autowired\n    private OAuth2IdentityProviderConfiguration configuration;\n\n    @Autowired\n    private OAuth2GenericIdentityProviderMapper mapper;\n\n    @Override\n    public User loadUserByUsername(Authentication authentication) {\n        try {\n            HttpPost post = new HttpPost(configuration.getAccessTokenUri());\n            List<NameValuePair> urlParameters = new ArrayList<>();\n            urlParameters.add(new BasicNameValuePair(CLIENT_ID, configuration.getClientId()));\n            urlParameters.add(new BasicNameValuePair(\"client_secret\", configuration.getClientSecret()));\n            urlParameters.add(new BasicNameValuePair(REDIRECT_URI, (String) authentication.getAdditionalInformation().get(REDIRECT_URI)));\n            urlParameters.add(new BasicNameValuePair(\"code\", (String) authentication.getCredentials()));\n            urlParameters.add(new BasicNameValuePair(GRANT_TYPE, \"authorization_code\"));\n            post.setEntity(new UrlEncodedFormEntity(urlParameters));\n\n            // authenticate user\n            HttpResponse response = client.execute(post);\n            BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n            String content = read(rd);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new BadCredentialsException(content);\n            }\n            JsonNode params = objectMapper.readTree(content);\n            String accessToken = params.get(\"access_token\").asText();\n\n            // get user profile\n            HttpGet request = new HttpGet(configuration.getUserProfileUri());\n            request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n            response = client.execute(request);\n            rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n            content = read(rd);\n            JsonNode jsonNode = objectMapper.readTree(content);\n            return createUser(jsonNode);\n        } catch (Exception e) {\n            logger.error(\"Fail to authenticate OAuth 2.0 generic user account\", e);\n            throw new InternalAuthenticationServiceException(e.getMessage());\n        }\n    }\n\n    @Override\n    public User loadUserByUsername(String username) {\n        return null;\n    }\n\n    @Override\n    public OAuth2IdentityProviderConfiguration configuration() {\n        return configuration;\n    }\n\n    private User createUser(JsonNode jsonNode) {\n        User user = new DefaultUser(jsonNode.get(CLAIMS_SUB).asText());\n        // set additional information\n        Map<String, Object> additionalInformation = new HashMap<>();\n        additionalInformation.put(\"sub\", jsonNode.get(CLAIMS_SUB).asText());\n        if (this.mapper.getMappers() != null) {\n            this.mapper.getMappers().forEach((k, v) -> {\n                if (jsonNode.get(v) != null) {\n                    additionalInformation.put(k, jsonNode.get(v).asText());\n                }\n            });\n        }\n        ((DefaultUser) user).setAdditonalInformation(additionalInformation);\n        return user;\n    }\n\n    private String read(Reader rd) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int cp;\n        while ((cp = rd.read()) != -1) {\n            sb.append((char) cp);\n        }\n        return sb.toString();\n    }\n\n    private Map<String, String> extractMap(String param) {\n        Map<String, String> query_pairs = new LinkedHashMap<>();\n        String[] pairs = param.split(\"&\");\n        for (String pair : pairs) {\n            int idx = pair.indexOf(\"=\");\n            query_pairs.put(pair.substring(0, idx), pair.substring(idx + 1));\n        }\n        return query_pairs;\n\n    }\n}",
        "start_point": {
            "row": 50,
            "column": 0
        },
        "end_point": {
            "row": 150,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Override\npublic User loadUserByUsername(Authentication authentication) {\n    try {\n        HttpPost post = new HttpPost(configuration.getAccessTokenUri());\n        List<NameValuePair> urlParameters = new ArrayList<>();\n        urlParameters.add(new BasicNameValuePair(CLIENT_ID, configuration.getClientId()));\n        urlParameters.add(new BasicNameValuePair(\"client_secret\", configuration.getClientSecret()));\n        urlParameters.add(new BasicNameValuePair(REDIRECT_URI, (String) authentication.getAdditionalInformation().get(REDIRECT_URI)));\n        urlParameters.add(new BasicNameValuePair(\"code\", (String) authentication.getCredentials()));\n        urlParameters.add(new BasicNameValuePair(GRANT_TYPE, \"authorization_code\"));\n        post.setEntity(new UrlEncodedFormEntity(urlParameters));\n\n        // authenticate user\n        HttpResponse response = client.execute(post);\n        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n        String content = read(rd);\n        if (response.getStatusLine().getStatusCode() != 200) {\n            throw new BadCredentialsException(content);\n        }\n        JsonNode params = objectMapper.readTree(content);\n        String accessToken = params.get(\"access_token\").asText();\n\n        // get user profile\n        HttpGet request = new HttpGet(configuration.getUserProfileUri());\n        request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n        response = client.execute(request);\n        rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n        content = read(rd);\n        JsonNode jsonNode = objectMapper.readTree(content);\n        return createUser(jsonNode);\n    } catch (Exception e) {\n        logger.error(\"Fail to authenticate OAuth 2.0 generic user account\", e);\n        throw new InternalAuthenticationServiceException(e.getMessage());\n    }\n}",
                "name": "loadUserByUsername",
                "modifiers": "@Override\n    public",
                "return_type": "User",
                "parameters": [
                    {
                        "type": "Authentication",
                        "name": "authentication"
                    }
                ],
                "body": "{\n    try {\n        HttpPost post = new HttpPost(configuration.getAccessTokenUri());\n        List<NameValuePair> urlParameters = new ArrayList<>();\n        urlParameters.add(new BasicNameValuePair(CLIENT_ID, configuration.getClientId()));\n        urlParameters.add(new BasicNameValuePair(\"client_secret\", configuration.getClientSecret()));\n        urlParameters.add(new BasicNameValuePair(REDIRECT_URI, (String) authentication.getAdditionalInformation().get(REDIRECT_URI)));\n        urlParameters.add(new BasicNameValuePair(\"code\", (String) authentication.getCredentials()));\n        urlParameters.add(new BasicNameValuePair(GRANT_TYPE, \"authorization_code\"));\n        post.setEntity(new UrlEncodedFormEntity(urlParameters));\n\n        // authenticate user\n        HttpResponse response = client.execute(post);\n        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n        String content = read(rd);\n        if (response.getStatusLine().getStatusCode() != 200) {\n            throw new BadCredentialsException(content);\n        }\n        JsonNode params = objectMapper.readTree(content);\n        String accessToken = params.get(\"access_token\").asText();\n\n        // get user profile\n        HttpGet request = new HttpGet(configuration.getUserProfileUri());\n        request.addHeader(\"Authorization\", \"Bearer \" + accessToken);\n        response = client.execute(request);\n        rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n        content = read(rd);\n        JsonNode jsonNode = objectMapper.readTree(content);\n        return createUser(jsonNode);\n    } catch (Exception e) {\n        logger.error(\"Fail to authenticate OAuth 2.0 generic user account\", e);\n        throw new InternalAuthenticationServiceException(e.getMessage());\n    }\n}",
                "start_point": {
                    "row": 69,
                    "column": 4
                },
                "end_point": {
                    "row": 103,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic User loadUserByUsername(String username) {\n    return null;\n}",
                "name": "loadUserByUsername",
                "modifiers": "@Override\n    public",
                "return_type": "User",
                "parameters": [
                    {
                        "type": "String",
                        "name": "username"
                    }
                ],
                "body": "{\n    return null;\n}",
                "start_point": {
                    "row": 105,
                    "column": 4
                },
                "end_point": {
                    "row": 108,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic OAuth2IdentityProviderConfiguration configuration() {\n    return configuration;\n}",
                "name": "configuration",
                "modifiers": "@Override\n    public",
                "return_type": "OAuth2IdentityProviderConfiguration",
                "parameters": [],
                "body": "{\n    return configuration;\n}",
                "start_point": {
                    "row": 110,
                    "column": 4
                },
                "end_point": {
                    "row": 113,
                    "column": 5
                }
            },
            {
                "definition": "private User createUser(JsonNode jsonNode) {\n    User user = new DefaultUser(jsonNode.get(CLAIMS_SUB).asText());\n    // set additional information\n    Map<String, Object> additionalInformation = new HashMap<>();\n    additionalInformation.put(\"sub\", jsonNode.get(CLAIMS_SUB).asText());\n    if (this.mapper.getMappers() != null) {\n        this.mapper.getMappers().forEach((k, v) -> {\n            if (jsonNode.get(v) != null) {\n                additionalInformation.put(k, jsonNode.get(v).asText());\n            }\n        });\n    }\n    ((DefaultUser) user).setAdditonalInformation(additionalInformation);\n    return user;\n}",
                "name": "createUser",
                "modifiers": "private",
                "return_type": "User",
                "parameters": [
                    {
                        "type": "JsonNode",
                        "name": "jsonNode"
                    }
                ],
                "body": "{\n    User user = new DefaultUser(jsonNode.get(CLAIMS_SUB).asText());\n    // set additional information\n    Map<String, Object> additionalInformation = new HashMap<>();\n    additionalInformation.put(\"sub\", jsonNode.get(CLAIMS_SUB).asText());\n    if (this.mapper.getMappers() != null) {\n        this.mapper.getMappers().forEach((k, v) -> {\n            if (jsonNode.get(v) != null) {\n                additionalInformation.put(k, jsonNode.get(v).asText());\n            }\n        });\n    }\n    ((DefaultUser) user).setAdditonalInformation(additionalInformation);\n    return user;\n}",
                "start_point": {
                    "row": 115,
                    "column": 4
                },
                "end_point": {
                    "row": 129,
                    "column": 5
                }
            },
            {
                "definition": "private String read(Reader rd) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    int cp;\n    while ((cp = rd.read()) != -1) {\n        sb.append((char) cp);\n    }\n    return sb.toString();\n}",
                "name": "read",
                "modifiers": "private",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "Reader",
                        "name": "rd"
                    }
                ],
                "body": "{\n    StringBuilder sb = new StringBuilder();\n    int cp;\n    while ((cp = rd.read()) != -1) {\n        sb.append((char) cp);\n    }\n    return sb.toString();\n}",
                "start_point": {
                    "row": 131,
                    "column": 4
                },
                "end_point": {
                    "row": 138,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, String> extractMap(String param) {\n    Map<String, String> query_pairs = new LinkedHashMap<>();\n    String[] pairs = param.split(\"&\");\n    for (String pair : pairs) {\n        int idx = pair.indexOf(\"=\");\n        query_pairs.put(pair.substring(0, idx), pair.substring(idx + 1));\n    }\n    return query_pairs;\n\n}",
                "name": "extractMap",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "param"
                    }
                ],
                "body": "{\n    Map<String, String> query_pairs = new LinkedHashMap<>();\n    String[] pairs = param.split(\"&\");\n    for (String pair : pairs) {\n        int idx = pair.indexOf(\"=\");\n        query_pairs.put(pair.substring(0, idx), pair.substring(idx + 1));\n    }\n    return query_pairs;\n\n}",
                "start_point": {
                    "row": 140,
                    "column": 4
                },
                "end_point": {
                    "row": 149,
                    "column": 5
                }
            }
        ]
    }
]