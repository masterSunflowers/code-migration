[
    {
        "repo_name": "gravitee-io_graviteeio-access-management",
        "commit": "0b18ada3207991cdfd70a551c56af125d2a0efe1",
        "rev_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/spring/security/SecurityConfiguration.java",
        "definition": "@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private Environment environment;\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http\n            .sessionManagement()\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .and()\n                .cors()\n            .and()\n                .authorizeRequests()\n                    .antMatchers(HttpMethod.OPTIONS, \"/**\").permitAll()\n                    .anyRequest().authenticated()\n            .and()\n                .httpBasic()\n                    .disable()\n                .csrf()\n                    .disable()\n            .exceptionHandling()\n                .authenticationEntryPoint(restAuthenticationEntryPoint())\n                .and()\n            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n    }\n\n    @Bean\n    public Filter jwtAuthenticationFilter() {\n        return new JWTAuthenticationFilter(new AntPathRequestMatcher(\"/**\"));\n    }\n\n    @Bean\n    public AuthenticationEntryPoint restAuthenticationEntryPoint() {\n        return new RestAuthenticationEntryPoint();\n    }\n\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        final CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.setAllowedOrigins(getPropertiesAsList(\"http.cors.allow-origin\", \"*\"));\n        config.setAllowedHeaders(getPropertiesAsList(\"http.cors.allow-headers\", \"Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, If-Match\"));\n        config.setAllowedMethods(getPropertiesAsList(\"http.cors.allow-methods\", \"OPTIONS, GET, POST, PUT, DELETE\"));\n        config.setMaxAge(environment.getProperty(\"http.cors.max-age\", Long.class, 1728000L));\n\n        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", config);\n        return source;\n    }\n\n    private List<String> getPropertiesAsList(final String propertyKey, final String defaultValue) {\n        String property = environment.getProperty(propertyKey);\n        if (property == null) {\n            property = defaultValue;\n        }\n        return asList(property.replaceAll(\"\\\\s+\",\"\").split(\",\"));\n    }\n\n}",
        "package": "package io.gravitee.am.management.handlers.management.api.spring.security;",
        "tree_path": "SecurityConfiguration",
        "name": "SecurityConfiguration",
        "modifiers": "@Configuration\n@EnableWebSecurity\npublic",
        "superclass": "extends WebSecurityConfigurerAdapter",
        "super_interfaces": null,
        "body": "{\n\n    @Autowired\n    private Environment environment;\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http\n            .sessionManagement()\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .and()\n                .cors()\n            .and()\n                .authorizeRequests()\n                    .antMatchers(HttpMethod.OPTIONS, \"/**\").permitAll()\n                    .anyRequest().authenticated()\n            .and()\n                .httpBasic()\n                    .disable()\n                .csrf()\n                    .disable()\n            .exceptionHandling()\n                .authenticationEntryPoint(restAuthenticationEntryPoint())\n                .and()\n            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n    }\n\n    @Bean\n    public Filter jwtAuthenticationFilter() {\n        return new JWTAuthenticationFilter(new AntPathRequestMatcher(\"/**\"));\n    }\n\n    @Bean\n    public AuthenticationEntryPoint restAuthenticationEntryPoint() {\n        return new RestAuthenticationEntryPoint();\n    }\n\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        final CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.setAllowedOrigins(getPropertiesAsList(\"http.cors.allow-origin\", \"*\"));\n        config.setAllowedHeaders(getPropertiesAsList(\"http.cors.allow-headers\", \"Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, If-Match\"));\n        config.setAllowedMethods(getPropertiesAsList(\"http.cors.allow-methods\", \"OPTIONS, GET, POST, PUT, DELETE\"));\n        config.setMaxAge(environment.getProperty(\"http.cors.max-age\", Long.class, 1728000L));\n\n        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", config);\n        return source;\n    }\n\n    private List<String> getPropertiesAsList(final String propertyKey, final String defaultValue) {\n        String property = environment.getProperty(propertyKey);\n        if (property == null) {\n            property = defaultValue;\n        }\n        return asList(property.replaceAll(\"\\\\s+\",\"\").split(\",\"));\n    }\n\n}",
        "start_point": {
            "row": 44,
            "column": 0
        },
        "end_point": {
            "row": 105,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Override\npublic void configure(HttpSecurity http) throws Exception {\n    http\n        .sessionManagement()\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n        .and()\n            .cors()\n        .and()\n            .authorizeRequests()\n                .antMatchers(HttpMethod.OPTIONS, \"/**\").permitAll()\n                .anyRequest().authenticated()\n        .and()\n            .httpBasic()\n                .disable()\n            .csrf()\n                .disable()\n        .exceptionHandling()\n            .authenticationEntryPoint(restAuthenticationEntryPoint())\n            .and()\n        .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n}",
                "name": "configure",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "HttpSecurity",
                        "name": "http"
                    }
                ],
                "body": "{\n    http\n        .sessionManagement()\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n        .and()\n            .cors()\n        .and()\n            .authorizeRequests()\n                .antMatchers(HttpMethod.OPTIONS, \"/**\").permitAll()\n                .anyRequest().authenticated()\n        .and()\n            .httpBasic()\n                .disable()\n            .csrf()\n                .disable()\n        .exceptionHandling()\n            .authenticationEntryPoint(restAuthenticationEntryPoint())\n            .and()\n        .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n}",
                "start_point": {
                    "row": 51,
                    "column": 4
                },
                "end_point": {
                    "row": 71,
                    "column": 5
                }
            },
            {
                "definition": "@Bean\npublic Filter jwtAuthenticationFilter() {\n    return new JWTAuthenticationFilter(new AntPathRequestMatcher(\"/**\"));\n}",
                "name": "jwtAuthenticationFilter",
                "modifiers": "@Bean\n    public",
                "return_type": "Filter",
                "parameters": [],
                "body": "{\n    return new JWTAuthenticationFilter(new AntPathRequestMatcher(\"/**\"));\n}",
                "start_point": {
                    "row": 73,
                    "column": 4
                },
                "end_point": {
                    "row": 76,
                    "column": 5
                }
            },
            {
                "definition": "@Bean\npublic AuthenticationEntryPoint restAuthenticationEntryPoint() {\n    return new RestAuthenticationEntryPoint();\n}",
                "name": "restAuthenticationEntryPoint",
                "modifiers": "@Bean\n    public",
                "return_type": "AuthenticationEntryPoint",
                "parameters": [],
                "body": "{\n    return new RestAuthenticationEntryPoint();\n}",
                "start_point": {
                    "row": 78,
                    "column": 4
                },
                "end_point": {
                    "row": 81,
                    "column": 5
                }
            },
            {
                "definition": "@Bean\npublic CorsConfigurationSource corsConfigurationSource() {\n    final CorsConfiguration config = new CorsConfiguration();\n    config.setAllowCredentials(true);\n    config.setAllowedOrigins(getPropertiesAsList(\"http.cors.allow-origin\", \"*\"));\n    config.setAllowedHeaders(getPropertiesAsList(\"http.cors.allow-headers\", \"Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, If-Match\"));\n    config.setAllowedMethods(getPropertiesAsList(\"http.cors.allow-methods\", \"OPTIONS, GET, POST, PUT, DELETE\"));\n    config.setMaxAge(environment.getProperty(\"http.cors.max-age\", Long.class, 1728000L));\n\n    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    source.registerCorsConfiguration(\"/**\", config);\n    return source;\n}",
                "name": "corsConfigurationSource",
                "modifiers": "@Bean\n    public",
                "return_type": "CorsConfigurationSource",
                "parameters": [],
                "body": "{\n    final CorsConfiguration config = new CorsConfiguration();\n    config.setAllowCredentials(true);\n    config.setAllowedOrigins(getPropertiesAsList(\"http.cors.allow-origin\", \"*\"));\n    config.setAllowedHeaders(getPropertiesAsList(\"http.cors.allow-headers\", \"Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, If-Match\"));\n    config.setAllowedMethods(getPropertiesAsList(\"http.cors.allow-methods\", \"OPTIONS, GET, POST, PUT, DELETE\"));\n    config.setMaxAge(environment.getProperty(\"http.cors.max-age\", Long.class, 1728000L));\n\n    final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    source.registerCorsConfiguration(\"/**\", config);\n    return source;\n}",
                "start_point": {
                    "row": 83,
                    "column": 4
                },
                "end_point": {
                    "row": 95,
                    "column": 5
                }
            },
            {
                "definition": "private List<String> getPropertiesAsList(final String propertyKey, final String defaultValue) {\n    String property = environment.getProperty(propertyKey);\n    if (property == null) {\n        property = defaultValue;\n    }\n    return asList(property.replaceAll(\"\\\\s+\",\"\").split(\",\"));\n}",
                "name": "getPropertiesAsList",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n    String property = environment.getProperty(propertyKey);\n    if (property == null) {\n        property = defaultValue;\n    }\n    return asList(property.replaceAll(\"\\\\s+\",\"\").split(\",\"));\n}",
                "start_point": {
                    "row": 97,
                    "column": 4
                },
                "end_point": {
                    "row": 103,
                    "column": 5
                }
            }
        ]
    }
]