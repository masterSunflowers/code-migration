[
    {
        "repo_name": "apache_dubbo-admin",
        "commit": "995e06b547cb7554c99deb3129fca19b2c35aa8b",
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/service/impl/ConsumerServiceImpl.java",
        "definition": "@Component\npublic class ConsumerServiceImpl extends AbstractService implements ConsumerService {\n\n    public List<Consumer> findByService(String service) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByService(service));\n    }\n\n    public Consumer findConsumer(String id) {\n        return SyncUtils.url2Consumer(findConsumerUrl(id));\n    }\n\n    private Pair<String, URL> findConsumerUrl(String id) {\n        return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONSUMERS_CATEGORY, id);\n    }\n\n    public List<Consumer> findAll() {\n        return SyncUtils.url2ConsumerList(findAllConsumerUrl());\n    }\n\n    private Map<String, URL> findAllConsumerUrl() {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findAddresses() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (null == consumerUrls) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getAddress();\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n\n        if(consumerUrls == null)\n            return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    String addr = u.getAddress();\n                    if (addr != null) ret.add(addr);\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByService(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (null == consumerUrls) return ret;\n\n        for (Map.Entry<String, URL> e2 : consumerUrls.get(service).entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<Consumer> findByAddress(String consumerAddress) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByAddress(consumerAddress));\n    }\n\n    public List<String> findServicesByAddress(String address) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null || address == null || address.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (address.equals(u.getAddress())) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    private Map<String, URL> findConsumerUrlByAddress(String address) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findApplications() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getParameter(Constants.APPLICATION_KEY);\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findApplicationsByServiceName(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null) return ret;\n\n        Map<String, URL> value = consumerUrls.get(service);\n        if (value == null) {\n            return ret;\n        }\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<Consumer> findByApplication(String application) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByApplication(application));\n    }\n\n    public List<Consumer> findByAppandService(String app, String serviceName) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByAppandService(app, serviceName));\n    }\n\n    private Map<String, URL> findConsumerUrlByAppandService(String application, String service) {\n        Map<String, String> filter = new HashMap<>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, application);\n        filter.put(Constants.SERVICE_FILTER_KEY, service);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    private Map<String, URL> findConsumerUrlByApplication(String application) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, application);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findServicesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null || application == null || application.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findServices() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls != null) ret.addAll(consumerUrls.keySet());\n        return ret;\n    }\n\n    public Map<String, URL> findConsumerUrlByService(String service) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n}",
        "package": "package org.apache.dubbo.admin.service.impl;",
        "tree_path": "ConsumerServiceImpl",
        "name": "ConsumerServiceImpl",
        "modifiers": "@Component\npublic",
        "superclass": "extends AbstractService",
        "super_interfaces": "implements ConsumerService",
        "body": "{\n\n    public List<Consumer> findByService(String service) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByService(service));\n    }\n\n    public Consumer findConsumer(String id) {\n        return SyncUtils.url2Consumer(findConsumerUrl(id));\n    }\n\n    private Pair<String, URL> findConsumerUrl(String id) {\n        return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONSUMERS_CATEGORY, id);\n    }\n\n    public List<Consumer> findAll() {\n        return SyncUtils.url2ConsumerList(findAllConsumerUrl());\n    }\n\n    private Map<String, URL> findAllConsumerUrl() {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findAddresses() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (null == consumerUrls) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getAddress();\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n\n        if(consumerUrls == null)\n            return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    String addr = u.getAddress();\n                    if (addr != null) ret.add(addr);\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByService(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (null == consumerUrls) return ret;\n\n        for (Map.Entry<String, URL> e2 : consumerUrls.get(service).entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<Consumer> findByAddress(String consumerAddress) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByAddress(consumerAddress));\n    }\n\n    public List<String> findServicesByAddress(String address) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null || address == null || address.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (address.equals(u.getAddress())) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    private Map<String, URL> findConsumerUrlByAddress(String address) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findApplications() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getParameter(Constants.APPLICATION_KEY);\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findApplicationsByServiceName(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null) return ret;\n\n        Map<String, URL> value = consumerUrls.get(service);\n        if (value == null) {\n            return ret;\n        }\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<Consumer> findByApplication(String application) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByApplication(application));\n    }\n\n    public List<Consumer> findByAppandService(String app, String serviceName) {\n        return SyncUtils.url2ConsumerList(findConsumerUrlByAppandService(app, serviceName));\n    }\n\n    private Map<String, URL> findConsumerUrlByAppandService(String application, String service) {\n        Map<String, String> filter = new HashMap<>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, application);\n        filter.put(Constants.SERVICE_FILTER_KEY, service);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    private Map<String, URL> findConsumerUrlByApplication(String application) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, application);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findServicesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls == null || application == null || application.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findServices() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n        if (consumerUrls != null) ret.addAll(consumerUrls.keySet());\n        return ret;\n    }\n\n    public Map<String, URL> findConsumerUrlByService(String service) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n}",
        "start_point": {
            "row": 32,
            "column": 0
        },
        "end_point": {
            "row": 234,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public List<Consumer> findByService(String service) {\n    return SyncUtils.url2ConsumerList(findConsumerUrlByService(service));\n}",
                "name": "findByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ConsumerList(findConsumerUrlByService(service));\n}",
                "start_point": {
                    "row": 35,
                    "column": 4
                },
                "end_point": {
                    "row": 37,
                    "column": 5
                }
            },
            {
                "definition": "public Consumer findConsumer(String id) {\n    return SyncUtils.url2Consumer(findConsumerUrl(id));\n}",
                "name": "findConsumer",
                "modifiers": "public",
                "return_type": "Consumer",
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return SyncUtils.url2Consumer(findConsumerUrl(id));\n}",
                "start_point": {
                    "row": 39,
                    "column": 4
                },
                "end_point": {
                    "row": 41,
                    "column": 5
                }
            },
            {
                "definition": "private Pair<String, URL> findConsumerUrl(String id) {\n    return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONSUMERS_CATEGORY, id);\n}",
                "name": "findConsumerUrl",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONSUMERS_CATEGORY, id);\n}",
                "start_point": {
                    "row": 43,
                    "column": 4
                },
                "end_point": {
                    "row": 45,
                    "column": 5
                }
            },
            {
                "definition": "public List<Consumer> findAll() {\n    return SyncUtils.url2ConsumerList(findAllConsumerUrl());\n}",
                "name": "findAll",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    return SyncUtils.url2ConsumerList(findAllConsumerUrl());\n}",
                "start_point": {
                    "row": 47,
                    "column": 4
                },
                "end_point": {
                    "row": 49,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findAllConsumerUrl() {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findAllConsumerUrl",
                "modifiers": "private",
                "return_type": null,
                "parameters": [],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 51,
                    "column": 4
                },
                "end_point": {
                    "row": 55,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findAddresses() {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (null == consumerUrls) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "name": "findAddresses",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (null == consumerUrls) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 57,
                    "column": 4
                },
                "end_point": {
                    "row": 72,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findAddressesByApplication(String application) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n\n    if(consumerUrls == null)\n        return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                String addr = u.getAddress();\n                if (addr != null) ret.add(addr);\n            }\n        }\n    }\n\n    return ret;\n}",
                "name": "findAddressesByApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n\n    if(consumerUrls == null)\n        return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                String addr = u.getAddress();\n                if (addr != null) ret.add(addr);\n            }\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 74,
                    "column": 4
                },
                "end_point": {
                    "row": 93,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findAddressesByService(String service) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (null == consumerUrls) return ret;\n\n    for (Map.Entry<String, URL> e2 : consumerUrls.get(service).entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getAddress();\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "name": "findAddressesByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (null == consumerUrls) return ret;\n\n    for (Map.Entry<String, URL> e2 : consumerUrls.get(service).entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getAddress();\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 95,
                    "column": 4
                },
                "end_point": {
                    "row": 107,
                    "column": 5
                }
            },
            {
                "definition": "public List<Consumer> findByAddress(String consumerAddress) {\n    return SyncUtils.url2ConsumerList(findConsumerUrlByAddress(consumerAddress));\n}",
                "name": "findByAddress",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "consumerAddress"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ConsumerList(findConsumerUrlByAddress(consumerAddress));\n}",
                "start_point": {
                    "row": 109,
                    "column": 4
                },
                "end_point": {
                    "row": 111,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findServicesByAddress(String address) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null || address == null || address.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (address.equals(u.getAddress())) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "name": "findServicesByAddress",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null || address == null || address.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (address.equals(u.getAddress())) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 113,
                    "column": 4
                },
                "end_point": {
                    "row": 130,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findConsumerUrlByAddress(String address) {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findConsumerUrlByAddress",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 132,
                    "column": 4
                },
                "end_point": {
                    "row": 138,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findApplications() {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "name": "findApplications",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 140,
                    "column": 4
                },
                "end_point": {
                    "row": 155,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findApplicationsByServiceName(String service) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null) return ret;\n\n    Map<String, URL> value = consumerUrls.get(service);\n    if (value == null) {\n        return ret;\n    }\n    for (Map.Entry<String, URL> e2 : value.entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getParameter(Constants.APPLICATION_KEY);\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "name": "findApplicationsByServiceName",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null) return ret;\n\n    Map<String, URL> value = consumerUrls.get(service);\n    if (value == null) {\n        return ret;\n    }\n    for (Map.Entry<String, URL> e2 : value.entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getParameter(Constants.APPLICATION_KEY);\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 157,
                    "column": 4
                },
                "end_point": {
                    "row": 173,
                    "column": 5
                }
            },
            {
                "definition": "public List<Consumer> findByApplication(String application) {\n    return SyncUtils.url2ConsumerList(findConsumerUrlByApplication(application));\n}",
                "name": "findByApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ConsumerList(findConsumerUrlByApplication(application));\n}",
                "start_point": {
                    "row": 175,
                    "column": 4
                },
                "end_point": {
                    "row": 177,
                    "column": 5
                }
            },
            {
                "definition": "public List<Consumer> findByAppandService(String app, String serviceName) {\n    return SyncUtils.url2ConsumerList(findConsumerUrlByAppandService(app, serviceName));\n}",
                "name": "findByAppandService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "app"
                    },
                    {
                        "type": "String",
                        "name": "serviceName"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ConsumerList(findConsumerUrlByAppandService(app, serviceName));\n}",
                "start_point": {
                    "row": 179,
                    "column": 4
                },
                "end_point": {
                    "row": 181,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findConsumerUrlByAppandService(String application, String service) {\n    Map<String, String> filter = new HashMap<>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, application);\n    filter.put(Constants.SERVICE_FILTER_KEY, service);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findConsumerUrlByAppandService",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    },
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, application);\n    filter.put(Constants.SERVICE_FILTER_KEY, service);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 183,
                    "column": 4
                },
                "end_point": {
                    "row": 190,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findConsumerUrlByApplication(String application) {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, application);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findConsumerUrlByApplication",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, application);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 192,
                    "column": 4
                },
                "end_point": {
                    "row": 198,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findServicesByApplication(String application) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null || application == null || application.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "name": "findServicesByApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls == null || application == null || application.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : consumerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 200,
                    "column": 4
                },
                "end_point": {
                    "row": 217,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findServices() {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls != null) ret.addAll(consumerUrls.keySet());\n    return ret;\n}",
                "name": "findServices",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> consumerUrls = getRegistryCache().get(Constants.CONSUMERS_CATEGORY);\n    if (consumerUrls != null) ret.addAll(consumerUrls.keySet());\n    return ret;\n}",
                "start_point": {
                    "row": 219,
                    "column": 4
                },
                "end_point": {
                    "row": 224,
                    "column": 5
                }
            },
            {
                "definition": "public Map<String, URL> findConsumerUrlByService(String service) {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findConsumerUrlByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY);\n    filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 226,
                    "column": 4
                },
                "end_point": {
                    "row": 232,
                    "column": 5
                }
            }
        ]
    }
]