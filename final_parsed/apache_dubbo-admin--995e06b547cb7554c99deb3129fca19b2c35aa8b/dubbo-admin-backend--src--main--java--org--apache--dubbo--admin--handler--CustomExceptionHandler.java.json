[
    {
        "repo_name": "apache_dubbo-admin",
        "commit": "995e06b547cb7554c99deb3129fca19b2c35aa8b",
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/handler/CustomExceptionHandler.java",
        "definition": "@ControllerAdvice(annotations = ResponseBody.class)\npublic class CustomExceptionHandler {\n\n    private static final Logger logger = LoggerFactory.getLogger(CustomExceptionHandler.class);\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ExceptionHandler(value = Exception.class)\n    public CommonResponse commonExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[SystemException]Exception:\", e);\n        return commonResponse.fail(\"System Error, please try again later! Message:\" + e.getMessage());\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\n    @ExceptionHandler(value = ServiceException.class)\n    public CommonResponse serviceExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[ServiceException]Exception:\", e);\n        return commonResponse.fail(\"ServiceException, message:\" + e.getMessage());\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.UNAUTHORIZED)\n    @ExceptionHandler(value = PermissionDeniedException.class)\n    public CommonResponse permissionDeniedExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[PermissionDeniedException]Exception:\", e);\n        return commonResponse.fail(\"Permission Denied!\");\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(value = {ParamValidationException.class})\n    public CommonResponse paramValidationExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[ParamValidationException]Exception:\", e);\n        return commonResponse.fail(\"Parameter validation failure! Message:\" + e.getMessage());\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    @ExceptionHandler(value = {ResourceNotFoundException.class})\n    public CommonResponse resourceNotFoundExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[ResourceNotFoundException]Exception:\", e);\n        return commonResponse.fail(\"Resource not found! Message:\" + e.getMessage());\n    }\n}",
        "package": "package org.apache.dubbo.admin.handler;",
        "tree_path": "CustomExceptionHandler",
        "name": "CustomExceptionHandler",
        "modifiers": "@ControllerAdvice(annotations = ResponseBody.class)\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    private static final Logger logger = LoggerFactory.getLogger(CustomExceptionHandler.class);\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ExceptionHandler(value = Exception.class)\n    public CommonResponse commonExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[SystemException]Exception:\", e);\n        return commonResponse.fail(\"System Error, please try again later! Message:\" + e.getMessage());\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\n    @ExceptionHandler(value = ServiceException.class)\n    public CommonResponse serviceExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[ServiceException]Exception:\", e);\n        return commonResponse.fail(\"ServiceException, message:\" + e.getMessage());\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.UNAUTHORIZED)\n    @ExceptionHandler(value = PermissionDeniedException.class)\n    public CommonResponse permissionDeniedExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[PermissionDeniedException]Exception:\", e);\n        return commonResponse.fail(\"Permission Denied!\");\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(value = {ParamValidationException.class})\n    public CommonResponse paramValidationExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[ParamValidationException]Exception:\", e);\n        return commonResponse.fail(\"Parameter validation failure! Message:\" + e.getMessage());\n    }\n\n    @ResponseBody\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    @ExceptionHandler(value = {ResourceNotFoundException.class})\n    public CommonResponse resourceNotFoundExceptionHandle(Exception e) {\n        CommonResponse commonResponse = CommonResponse.createCommonResponse();\n        logger.error(\"[ResourceNotFoundException]Exception:\", e);\n        return commonResponse.fail(\"Resource not found! Message:\" + e.getMessage());\n    }\n}",
        "start_point": {
            "row": 34,
            "column": 0
        },
        "end_point": {
            "row": 83,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@ResponseBody\n@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n@ExceptionHandler(value = Exception.class)\npublic CommonResponse commonExceptionHandle(Exception e) {\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[SystemException]Exception:\", e);\n    return commonResponse.fail(\"System Error, please try again later! Message:\" + e.getMessage());\n}",
                "name": "commonExceptionHandle",
                "modifiers": "@ResponseBody\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ExceptionHandler(value = Exception.class)\n    public",
                "return_type": "CommonResponse",
                "parameters": [
                    {
                        "type": "Exception",
                        "name": "e"
                    }
                ],
                "body": "{\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[SystemException]Exception:\", e);\n    return commonResponse.fail(\"System Error, please try again later! Message:\" + e.getMessage());\n}",
                "start_point": {
                    "row": 39,
                    "column": 4
                },
                "end_point": {
                    "row": 46,
                    "column": 5
                }
            },
            {
                "definition": "@ResponseBody\n@ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\n@ExceptionHandler(value = ServiceException.class)\npublic CommonResponse serviceExceptionHandle(Exception e) {\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[ServiceException]Exception:\", e);\n    return commonResponse.fail(\"ServiceException, message:\" + e.getMessage());\n}",
                "name": "serviceExceptionHandle",
                "modifiers": "@ResponseBody\n    @ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\n    @ExceptionHandler(value = ServiceException.class)\n    public",
                "return_type": "CommonResponse",
                "parameters": [
                    {
                        "type": "Exception",
                        "name": "e"
                    }
                ],
                "body": "{\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[ServiceException]Exception:\", e);\n    return commonResponse.fail(\"ServiceException, message:\" + e.getMessage());\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 55,
                    "column": 5
                }
            },
            {
                "definition": "@ResponseBody\n@ResponseStatus(HttpStatus.UNAUTHORIZED)\n@ExceptionHandler(value = PermissionDeniedException.class)\npublic CommonResponse permissionDeniedExceptionHandle(Exception e) {\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[PermissionDeniedException]Exception:\", e);\n    return commonResponse.fail(\"Permission Denied!\");\n}",
                "name": "permissionDeniedExceptionHandle",
                "modifiers": "@ResponseBody\n    @ResponseStatus(HttpStatus.UNAUTHORIZED)\n    @ExceptionHandler(value = PermissionDeniedException.class)\n    public",
                "return_type": "CommonResponse",
                "parameters": [
                    {
                        "type": "Exception",
                        "name": "e"
                    }
                ],
                "body": "{\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[PermissionDeniedException]Exception:\", e);\n    return commonResponse.fail(\"Permission Denied!\");\n}",
                "start_point": {
                    "row": 57,
                    "column": 4
                },
                "end_point": {
                    "row": 64,
                    "column": 5
                }
            },
            {
                "definition": "@ResponseBody\n@ResponseStatus(HttpStatus.BAD_REQUEST)\n@ExceptionHandler(value = {ParamValidationException.class})\npublic CommonResponse paramValidationExceptionHandle(Exception e) {\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[ParamValidationException]Exception:\", e);\n    return commonResponse.fail(\"Parameter validation failure! Message:\" + e.getMessage());\n}",
                "name": "paramValidationExceptionHandle",
                "modifiers": "@ResponseBody\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(value = {ParamValidationException.class})\n    public",
                "return_type": "CommonResponse",
                "parameters": [
                    {
                        "type": "Exception",
                        "name": "e"
                    }
                ],
                "body": "{\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[ParamValidationException]Exception:\", e);\n    return commonResponse.fail(\"Parameter validation failure! Message:\" + e.getMessage());\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 73,
                    "column": 5
                }
            },
            {
                "definition": "@ResponseBody\n@ResponseStatus(HttpStatus.NOT_FOUND)\n@ExceptionHandler(value = {ResourceNotFoundException.class})\npublic CommonResponse resourceNotFoundExceptionHandle(Exception e) {\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[ResourceNotFoundException]Exception:\", e);\n    return commonResponse.fail(\"Resource not found! Message:\" + e.getMessage());\n}",
                "name": "resourceNotFoundExceptionHandle",
                "modifiers": "@ResponseBody\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    @ExceptionHandler(value = {ResourceNotFoundException.class})\n    public",
                "return_type": "CommonResponse",
                "parameters": [
                    {
                        "type": "Exception",
                        "name": "e"
                    }
                ],
                "body": "{\n    CommonResponse commonResponse = CommonResponse.createCommonResponse();\n    logger.error(\"[ResourceNotFoundException]Exception:\", e);\n    return commonResponse.fail(\"Resource not found! Message:\" + e.getMessage());\n}",
                "start_point": {
                    "row": 75,
                    "column": 4
                },
                "end_point": {
                    "row": 82,
                    "column": 5
                }
            }
        ]
    }
]