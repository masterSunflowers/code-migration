[
    {
        "repo_name": "apache_dubbo-admin",
        "commit": "995e06b547cb7554c99deb3129fca19b2c35aa8b",
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/common/util/SyncUtils.java",
        "definition": "public class SyncUtils {\n\n    public static final String SERVICE_FILTER_KEY = \".service\";\n\n    public static final String ADDRESS_FILTER_KEY = \".address\";\n\n    public static final String ID_FILTER_KEY = \".id\";\n\n    public static Provider url2Provider(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (url == null)\n            return null;\n\n        Provider p = new Provider();\n        p.setHash(id);\n        p.setService(url.getServiceKey());\n        p.setAddress(url.getAddress());\n        p.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n        p.setUrl(url.toIdentityString());\n        p.setParameters(url.toParameterString());\n\n        p.setDynamic(url.getParameter(\"dynamic\", true));\n        p.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n        p.setWeight(url.getParameter(Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT));\n        p.setUsername(url.getParameter(\"owner\"));\n\n        return p;\n    }\n\n    public static List<Provider> url2ProviderList(Map<String, URL> ps) {\n        List<Provider> ret = new ArrayList<>();\n        for (Map.Entry<String, URL> entry : ps.entrySet()) {\n            ret.add(url2Provider(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return ret;\n    }\n\n    public static Consumer url2Consumer(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (null == url)\n            return null;\n\n        Consumer c = new Consumer();\n        c.setHash(id);\n        c.setService(url.getServiceKey());\n        c.setAddress(url.getHost());\n        c.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n        c.setParameters(url.toParameterString());\n\n        return c;\n    }\n\n    public static List<Consumer> url2ConsumerList(Map<String, URL> cs) {\n        List<Consumer> list = new ArrayList<Consumer>();\n        if (cs == null) return list;\n        for (Map.Entry<String, URL> entry : cs.entrySet()) {\n            list.add(url2Consumer(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return list;\n    }\n\n    public static Route url2Route(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (null == url)\n            return null;\n\n        Route r = new Route();\n        r.setHash(id);\n        r.setName(url.getParameter(\"name\"));\n        r.setService(url.getServiceKey());\n        r.setPriority(url.getParameter(Constants.PRIORITY_KEY, 0));\n        r.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n        r.setForce(url.getParameter(Constants.FORCE_KEY, false));\n        r.setDynamic(url.getParameter(Constants.DYNAMIC_KEY, false));\n        r.setRuntime(url.getParameter(Constants.RUNTIME_KEY, false));\n        r.setRule(url.getParameterAndDecoded(Constants.RULE_KEY));\n        return r;\n    }\n\n    public static List<Route> url2RouteList(Map<String, URL> cs) {\n        List<Route> list = new ArrayList<Route>();\n        if (cs == null) return list;\n        for (Map.Entry<String, URL> entry : cs.entrySet()) {\n            list.add(url2Route(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return list;\n    }\n\n    public static Override url2Override(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (null == url)\n            return null;\n\n        Override o = new Override();\n        o.setHash(id);\n\n        Map<String, String> parameters = new HashMap<String, String>(url.getParameters());\n\n        o.setService(url.getServiceKey());\n        parameters.remove(Constants.INTERFACE_KEY);\n        parameters.remove(Constants.GROUP_KEY);\n        parameters.remove(Constants.VERSION_KEY);\n        parameters.remove(Constants.APPLICATION_KEY);\n        parameters.remove(Constants.CATEGORY_KEY);\n        parameters.remove(Constants.DYNAMIC_KEY);\n        parameters.remove(Constants.ENABLED_KEY);\n\n        o.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n\n        String host = url.getHost();\n        boolean anyhost = url.getParameter(Constants.ANYHOST_VALUE, false);\n        if (!anyhost || !\"0.0.0.0\".equals(host)) {\n            o.setAddress(url.getAddress());\n        }\n\n        o.setApplication(url.getParameter(Constants.APPLICATION_KEY, url.getUsername()));\n        parameters.remove(Constants.VERSION_KEY);\n\n        o.setParams(StringUtils.toQueryString(parameters));\n\n        return o;\n    }\n\n    // Map<category, Map<servicename, Map<Long, URL>>>\n    public static <SM extends Map<String, Map<String, URL>>> Map<String, URL> filterFromCategory(Map<String, SM> urls, Map<String, String> filter) {\n        String c = (String) filter.get(Constants.CATEGORY_KEY);\n        if (c == null) throw new IllegalArgumentException(\"no category\");\n\n        filter.remove(Constants.CATEGORY_KEY);\n        return filterFromService(urls.get(c), filter);\n    }\n\n    public static List<Override> url2OverrideList(Map<String, URL> cs) {\n        List<Override>\n            list = new ArrayList<Override>();\n        if (cs == null) return list;\n        for (Map.Entry<String, URL> entry : cs.entrySet()) {\n            list.add(url2Override(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return list;\n    }\n\n\n    // Map<servicename, Map<Long, URL>>\n    public static Map<String, URL> filterFromService(Map<String, Map<String, URL>> urls, Map<String, String> filter) {\n        Map<String, URL> ret = new HashMap<>();\n        if (urls == null) return ret;\n\n        String s = (String) filter.remove(SERVICE_FILTER_KEY);\n        if (s == null) {\n            for (Map.Entry<String, Map<String, URL>> entry : urls.entrySet()) {\n                filterFromUrls(entry.getValue(), ret, filter);\n            }\n        } else {\n            Map<String, URL> map = urls.get(s);\n            filterFromUrls(map, ret, filter);\n        }\n\n        return ret;\n    }\n\n    // Map<Long, URL>\n    static void filterFromUrls(Map<String, URL> from, Map<String, URL> to, Map<String, String> filter) {\n        if (from == null || from.isEmpty()) return;\n\n        for (Map.Entry<String, URL> entry : from.entrySet()) {\n            URL url = entry.getValue();\n\n            boolean match = true;\n            for (Map.Entry<String, String> e : filter.entrySet()) {\n                String key = e.getKey();\n                String value = e.getValue();\n\n                if (ADDRESS_FILTER_KEY.equals(key)) {\n                    if (!value.equals(url.getIp())) {\n                        match = false;\n                        break;\n                    }\n                } else {\n                    if (!value.equals(url.getParameter(key))) {\n                        match = false;\n                        break;\n                    }\n                }\n            }\n\n            if (match) {\n                to.put(entry.getKey(), url);\n            }\n        }\n    }\n\n    public static <SM extends Map<String, Map<String, URL>>> Pair<String, URL> filterFromCategory(Map<String, SM> urls, String category, String id) {\n        SM services = urls.get(category);\n        if (services == null) return null;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : services.entrySet()) {\n            Map<String, URL> u = e1.getValue();\n            if (u.containsKey(id)) return new Pair<>(id, u.get(id));\n        }\n        return null;\n    }\n}",
        "package": "package org.apache.dubbo.admin.common.util;",
        "tree_path": "SyncUtils",
        "name": "SyncUtils",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public static final String SERVICE_FILTER_KEY = \".service\";\n\n    public static final String ADDRESS_FILTER_KEY = \".address\";\n\n    public static final String ID_FILTER_KEY = \".id\";\n\n    public static Provider url2Provider(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (url == null)\n            return null;\n\n        Provider p = new Provider();\n        p.setHash(id);\n        p.setService(url.getServiceKey());\n        p.setAddress(url.getAddress());\n        p.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n        p.setUrl(url.toIdentityString());\n        p.setParameters(url.toParameterString());\n\n        p.setDynamic(url.getParameter(\"dynamic\", true));\n        p.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n        p.setWeight(url.getParameter(Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT));\n        p.setUsername(url.getParameter(\"owner\"));\n\n        return p;\n    }\n\n    public static List<Provider> url2ProviderList(Map<String, URL> ps) {\n        List<Provider> ret = new ArrayList<>();\n        for (Map.Entry<String, URL> entry : ps.entrySet()) {\n            ret.add(url2Provider(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return ret;\n    }\n\n    public static Consumer url2Consumer(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (null == url)\n            return null;\n\n        Consumer c = new Consumer();\n        c.setHash(id);\n        c.setService(url.getServiceKey());\n        c.setAddress(url.getHost());\n        c.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n        c.setParameters(url.toParameterString());\n\n        return c;\n    }\n\n    public static List<Consumer> url2ConsumerList(Map<String, URL> cs) {\n        List<Consumer> list = new ArrayList<Consumer>();\n        if (cs == null) return list;\n        for (Map.Entry<String, URL> entry : cs.entrySet()) {\n            list.add(url2Consumer(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return list;\n    }\n\n    public static Route url2Route(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (null == url)\n            return null;\n\n        Route r = new Route();\n        r.setHash(id);\n        r.setName(url.getParameter(\"name\"));\n        r.setService(url.getServiceKey());\n        r.setPriority(url.getParameter(Constants.PRIORITY_KEY, 0));\n        r.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n        r.setForce(url.getParameter(Constants.FORCE_KEY, false));\n        r.setDynamic(url.getParameter(Constants.DYNAMIC_KEY, false));\n        r.setRuntime(url.getParameter(Constants.RUNTIME_KEY, false));\n        r.setRule(url.getParameterAndDecoded(Constants.RULE_KEY));\n        return r;\n    }\n\n    public static List<Route> url2RouteList(Map<String, URL> cs) {\n        List<Route> list = new ArrayList<Route>();\n        if (cs == null) return list;\n        for (Map.Entry<String, URL> entry : cs.entrySet()) {\n            list.add(url2Route(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return list;\n    }\n\n    public static Override url2Override(Pair<String, URL> pair) {\n        if (pair == null) {\n            return null;\n        }\n\n        String id = pair.getKey();\n        URL url = pair.getValue();\n\n        if (null == url)\n            return null;\n\n        Override o = new Override();\n        o.setHash(id);\n\n        Map<String, String> parameters = new HashMap<String, String>(url.getParameters());\n\n        o.setService(url.getServiceKey());\n        parameters.remove(Constants.INTERFACE_KEY);\n        parameters.remove(Constants.GROUP_KEY);\n        parameters.remove(Constants.VERSION_KEY);\n        parameters.remove(Constants.APPLICATION_KEY);\n        parameters.remove(Constants.CATEGORY_KEY);\n        parameters.remove(Constants.DYNAMIC_KEY);\n        parameters.remove(Constants.ENABLED_KEY);\n\n        o.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n\n        String host = url.getHost();\n        boolean anyhost = url.getParameter(Constants.ANYHOST_VALUE, false);\n        if (!anyhost || !\"0.0.0.0\".equals(host)) {\n            o.setAddress(url.getAddress());\n        }\n\n        o.setApplication(url.getParameter(Constants.APPLICATION_KEY, url.getUsername()));\n        parameters.remove(Constants.VERSION_KEY);\n\n        o.setParams(StringUtils.toQueryString(parameters));\n\n        return o;\n    }\n\n    // Map<category, Map<servicename, Map<Long, URL>>>\n    public static <SM extends Map<String, Map<String, URL>>> Map<String, URL> filterFromCategory(Map<String, SM> urls, Map<String, String> filter) {\n        String c = (String) filter.get(Constants.CATEGORY_KEY);\n        if (c == null) throw new IllegalArgumentException(\"no category\");\n\n        filter.remove(Constants.CATEGORY_KEY);\n        return filterFromService(urls.get(c), filter);\n    }\n\n    public static List<Override> url2OverrideList(Map<String, URL> cs) {\n        List<Override>\n            list = new ArrayList<Override>();\n        if (cs == null) return list;\n        for (Map.Entry<String, URL> entry : cs.entrySet()) {\n            list.add(url2Override(new Pair<>(entry.getKey(), entry.getValue())));\n        }\n        return list;\n    }\n\n\n    // Map<servicename, Map<Long, URL>>\n    public static Map<String, URL> filterFromService(Map<String, Map<String, URL>> urls, Map<String, String> filter) {\n        Map<String, URL> ret = new HashMap<>();\n        if (urls == null) return ret;\n\n        String s = (String) filter.remove(SERVICE_FILTER_KEY);\n        if (s == null) {\n            for (Map.Entry<String, Map<String, URL>> entry : urls.entrySet()) {\n                filterFromUrls(entry.getValue(), ret, filter);\n            }\n        } else {\n            Map<String, URL> map = urls.get(s);\n            filterFromUrls(map, ret, filter);\n        }\n\n        return ret;\n    }\n\n    // Map<Long, URL>\n    static void filterFromUrls(Map<String, URL> from, Map<String, URL> to, Map<String, String> filter) {\n        if (from == null || from.isEmpty()) return;\n\n        for (Map.Entry<String, URL> entry : from.entrySet()) {\n            URL url = entry.getValue();\n\n            boolean match = true;\n            for (Map.Entry<String, String> e : filter.entrySet()) {\n                String key = e.getKey();\n                String value = e.getValue();\n\n                if (ADDRESS_FILTER_KEY.equals(key)) {\n                    if (!value.equals(url.getIp())) {\n                        match = false;\n                        break;\n                    }\n                } else {\n                    if (!value.equals(url.getParameter(key))) {\n                        match = false;\n                        break;\n                    }\n                }\n            }\n\n            if (match) {\n                to.put(entry.getKey(), url);\n            }\n        }\n    }\n\n    public static <SM extends Map<String, Map<String, URL>>> Pair<String, URL> filterFromCategory(Map<String, SM> urls, String category, String id) {\n        SM services = urls.get(category);\n        if (services == null) return null;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : services.entrySet()) {\n            Map<String, URL> u = e1.getValue();\n            if (u.containsKey(id)) return new Pair<>(id, u.get(id));\n        }\n        return null;\n    }\n}",
        "start_point": {
            "row": 31,
            "column": 0
        },
        "end_point": {
            "row": 257,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public static Provider url2Provider(Pair<String, URL> pair) {\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (url == null)\n        return null;\n\n    Provider p = new Provider();\n    p.setHash(id);\n    p.setService(url.getServiceKey());\n    p.setAddress(url.getAddress());\n    p.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n    p.setUrl(url.toIdentityString());\n    p.setParameters(url.toParameterString());\n\n    p.setDynamic(url.getParameter(\"dynamic\", true));\n    p.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n    p.setWeight(url.getParameter(Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT));\n    p.setUsername(url.getParameter(\"owner\"));\n\n    return p;\n}",
                "name": "url2Provider",
                "modifiers": "public static",
                "return_type": "Provider",
                "parameters": [
                    {
                        "type": "Pair<String, URL>",
                        "name": "pair"
                    }
                ],
                "body": "{\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (url == null)\n        return null;\n\n    Provider p = new Provider();\n    p.setHash(id);\n    p.setService(url.getServiceKey());\n    p.setAddress(url.getAddress());\n    p.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n    p.setUrl(url.toIdentityString());\n    p.setParameters(url.toParameterString());\n\n    p.setDynamic(url.getParameter(\"dynamic\", true));\n    p.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n    p.setWeight(url.getParameter(Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT));\n    p.setUsername(url.getParameter(\"owner\"));\n\n    return p;\n}",
                "start_point": {
                    "row": 39,
                    "column": 4
                },
                "end_point": {
                    "row": 64,
                    "column": 5
                }
            },
            {
                "definition": "public static List<Provider> url2ProviderList(Map<String, URL> ps) {\n    List<Provider> ret = new ArrayList<>();\n    for (Map.Entry<String, URL> entry : ps.entrySet()) {\n        ret.add(url2Provider(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return ret;\n}",
                "name": "url2ProviderList",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, URL>",
                        "name": "ps"
                    }
                ],
                "body": "{\n    List<Provider> ret = new ArrayList<>();\n    for (Map.Entry<String, URL> entry : ps.entrySet()) {\n        ret.add(url2Provider(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return ret;\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 72,
                    "column": 5
                }
            },
            {
                "definition": "public static Consumer url2Consumer(Pair<String, URL> pair) {\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (null == url)\n        return null;\n\n    Consumer c = new Consumer();\n    c.setHash(id);\n    c.setService(url.getServiceKey());\n    c.setAddress(url.getHost());\n    c.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n    c.setParameters(url.toParameterString());\n\n    return c;\n}",
                "name": "url2Consumer",
                "modifiers": "public static",
                "return_type": "Consumer",
                "parameters": [
                    {
                        "type": "Pair<String, URL>",
                        "name": "pair"
                    }
                ],
                "body": "{\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (null == url)\n        return null;\n\n    Consumer c = new Consumer();\n    c.setHash(id);\n    c.setService(url.getServiceKey());\n    c.setAddress(url.getHost());\n    c.setApplication(url.getParameter(Constants.APPLICATION_KEY));\n    c.setParameters(url.toParameterString());\n\n    return c;\n}",
                "start_point": {
                    "row": 74,
                    "column": 4
                },
                "end_point": {
                    "row": 93,
                    "column": 5
                }
            },
            {
                "definition": "public static List<Consumer> url2ConsumerList(Map<String, URL> cs) {\n    List<Consumer> list = new ArrayList<Consumer>();\n    if (cs == null) return list;\n    for (Map.Entry<String, URL> entry : cs.entrySet()) {\n        list.add(url2Consumer(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return list;\n}",
                "name": "url2ConsumerList",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, URL>",
                        "name": "cs"
                    }
                ],
                "body": "{\n    List<Consumer> list = new ArrayList<Consumer>();\n    if (cs == null) return list;\n    for (Map.Entry<String, URL> entry : cs.entrySet()) {\n        list.add(url2Consumer(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return list;\n}",
                "start_point": {
                    "row": 95,
                    "column": 4
                },
                "end_point": {
                    "row": 102,
                    "column": 5
                }
            },
            {
                "definition": "public static Route url2Route(Pair<String, URL> pair) {\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (null == url)\n        return null;\n\n    Route r = new Route();\n    r.setHash(id);\n    r.setName(url.getParameter(\"name\"));\n    r.setService(url.getServiceKey());\n    r.setPriority(url.getParameter(Constants.PRIORITY_KEY, 0));\n    r.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n    r.setForce(url.getParameter(Constants.FORCE_KEY, false));\n    r.setDynamic(url.getParameter(Constants.DYNAMIC_KEY, false));\n    r.setRuntime(url.getParameter(Constants.RUNTIME_KEY, false));\n    r.setRule(url.getParameterAndDecoded(Constants.RULE_KEY));\n    return r;\n}",
                "name": "url2Route",
                "modifiers": "public static",
                "return_type": "Route",
                "parameters": [
                    {
                        "type": "Pair<String, URL>",
                        "name": "pair"
                    }
                ],
                "body": "{\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (null == url)\n        return null;\n\n    Route r = new Route();\n    r.setHash(id);\n    r.setName(url.getParameter(\"name\"));\n    r.setService(url.getServiceKey());\n    r.setPriority(url.getParameter(Constants.PRIORITY_KEY, 0));\n    r.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n    r.setForce(url.getParameter(Constants.FORCE_KEY, false));\n    r.setDynamic(url.getParameter(Constants.DYNAMIC_KEY, false));\n    r.setRuntime(url.getParameter(Constants.RUNTIME_KEY, false));\n    r.setRule(url.getParameterAndDecoded(Constants.RULE_KEY));\n    return r;\n}",
                "start_point": {
                    "row": 104,
                    "column": 4
                },
                "end_point": {
                    "row": 126,
                    "column": 5
                }
            },
            {
                "definition": "public static List<Route> url2RouteList(Map<String, URL> cs) {\n    List<Route> list = new ArrayList<Route>();\n    if (cs == null) return list;\n    for (Map.Entry<String, URL> entry : cs.entrySet()) {\n        list.add(url2Route(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return list;\n}",
                "name": "url2RouteList",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, URL>",
                        "name": "cs"
                    }
                ],
                "body": "{\n    List<Route> list = new ArrayList<Route>();\n    if (cs == null) return list;\n    for (Map.Entry<String, URL> entry : cs.entrySet()) {\n        list.add(url2Route(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return list;\n}",
                "start_point": {
                    "row": 128,
                    "column": 4
                },
                "end_point": {
                    "row": 135,
                    "column": 5
                }
            },
            {
                "definition": "public static Override url2Override(Pair<String, URL> pair) {\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (null == url)\n        return null;\n\n    Override o = new Override();\n    o.setHash(id);\n\n    Map<String, String> parameters = new HashMap<String, String>(url.getParameters());\n\n    o.setService(url.getServiceKey());\n    parameters.remove(Constants.INTERFACE_KEY);\n    parameters.remove(Constants.GROUP_KEY);\n    parameters.remove(Constants.VERSION_KEY);\n    parameters.remove(Constants.APPLICATION_KEY);\n    parameters.remove(Constants.CATEGORY_KEY);\n    parameters.remove(Constants.DYNAMIC_KEY);\n    parameters.remove(Constants.ENABLED_KEY);\n\n    o.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n\n    String host = url.getHost();\n    boolean anyhost = url.getParameter(Constants.ANYHOST_VALUE, false);\n    if (!anyhost || !\"0.0.0.0\".equals(host)) {\n        o.setAddress(url.getAddress());\n    }\n\n    o.setApplication(url.getParameter(Constants.APPLICATION_KEY, url.getUsername()));\n    parameters.remove(Constants.VERSION_KEY);\n\n    o.setParams(StringUtils.toQueryString(parameters));\n\n    return o;\n}",
                "name": "url2Override",
                "modifiers": "public static",
                "return_type": "Override",
                "parameters": [
                    {
                        "type": "Pair<String, URL>",
                        "name": "pair"
                    }
                ],
                "body": "{\n    if (pair == null) {\n        return null;\n    }\n\n    String id = pair.getKey();\n    URL url = pair.getValue();\n\n    if (null == url)\n        return null;\n\n    Override o = new Override();\n    o.setHash(id);\n\n    Map<String, String> parameters = new HashMap<String, String>(url.getParameters());\n\n    o.setService(url.getServiceKey());\n    parameters.remove(Constants.INTERFACE_KEY);\n    parameters.remove(Constants.GROUP_KEY);\n    parameters.remove(Constants.VERSION_KEY);\n    parameters.remove(Constants.APPLICATION_KEY);\n    parameters.remove(Constants.CATEGORY_KEY);\n    parameters.remove(Constants.DYNAMIC_KEY);\n    parameters.remove(Constants.ENABLED_KEY);\n\n    o.setEnabled(url.getParameter(Constants.ENABLED_KEY, true));\n\n    String host = url.getHost();\n    boolean anyhost = url.getParameter(Constants.ANYHOST_VALUE, false);\n    if (!anyhost || !\"0.0.0.0\".equals(host)) {\n        o.setAddress(url.getAddress());\n    }\n\n    o.setApplication(url.getParameter(Constants.APPLICATION_KEY, url.getUsername()));\n    parameters.remove(Constants.VERSION_KEY);\n\n    o.setParams(StringUtils.toQueryString(parameters));\n\n    return o;\n}",
                "start_point": {
                    "row": 137,
                    "column": 4
                },
                "end_point": {
                    "row": 176,
                    "column": 5
                }
            },
            {
                "definition": "public static <SM extends Map<String, Map<String, URL>>> Map<String, URL> filterFromCategory(Map<String, SM> urls, Map<String, String> filter) {\n    String c = (String) filter.get(Constants.CATEGORY_KEY);\n    if (c == null) throw new IllegalArgumentException(\"no category\");\n\n    filter.remove(Constants.CATEGORY_KEY);\n    return filterFromService(urls.get(c), filter);\n}",
                "name": "filterFromCategory",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, SM>",
                        "name": "urls"
                    },
                    {
                        "type": "Map<String, String>",
                        "name": "filter"
                    }
                ],
                "body": "{\n    String c = (String) filter.get(Constants.CATEGORY_KEY);\n    if (c == null) throw new IllegalArgumentException(\"no category\");\n\n    filter.remove(Constants.CATEGORY_KEY);\n    return filterFromService(urls.get(c), filter);\n}",
                "start_point": {
                    "row": 179,
                    "column": 4
                },
                "end_point": {
                    "row": 185,
                    "column": 5
                }
            },
            {
                "definition": "public static List<Override> url2OverrideList(Map<String, URL> cs) {\n    List<Override>\n        list = new ArrayList<Override>();\n    if (cs == null) return list;\n    for (Map.Entry<String, URL> entry : cs.entrySet()) {\n        list.add(url2Override(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return list;\n}",
                "name": "url2OverrideList",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, URL>",
                        "name": "cs"
                    }
                ],
                "body": "{\n    List<Override>\n        list = new ArrayList<Override>();\n    if (cs == null) return list;\n    for (Map.Entry<String, URL> entry : cs.entrySet()) {\n        list.add(url2Override(new Pair<>(entry.getKey(), entry.getValue())));\n    }\n    return list;\n}",
                "start_point": {
                    "row": 187,
                    "column": 4
                },
                "end_point": {
                    "row": 195,
                    "column": 5
                }
            },
            {
                "definition": "public static Map<String, URL> filterFromService(Map<String, Map<String, URL>> urls, Map<String, String> filter) {\n    Map<String, URL> ret = new HashMap<>();\n    if (urls == null) return ret;\n\n    String s = (String) filter.remove(SERVICE_FILTER_KEY);\n    if (s == null) {\n        for (Map.Entry<String, Map<String, URL>> entry : urls.entrySet()) {\n            filterFromUrls(entry.getValue(), ret, filter);\n        }\n    } else {\n        Map<String, URL> map = urls.get(s);\n        filterFromUrls(map, ret, filter);\n    }\n\n    return ret;\n}",
                "name": "filterFromService",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, Map<String, URL>>",
                        "name": "urls"
                    },
                    {
                        "type": "Map<String, String>",
                        "name": "filter"
                    }
                ],
                "body": "{\n    Map<String, URL> ret = new HashMap<>();\n    if (urls == null) return ret;\n\n    String s = (String) filter.remove(SERVICE_FILTER_KEY);\n    if (s == null) {\n        for (Map.Entry<String, Map<String, URL>> entry : urls.entrySet()) {\n            filterFromUrls(entry.getValue(), ret, filter);\n        }\n    } else {\n        Map<String, URL> map = urls.get(s);\n        filterFromUrls(map, ret, filter);\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 199,
                    "column": 4
                },
                "end_point": {
                    "row": 214,
                    "column": 5
                }
            },
            {
                "definition": "static void filterFromUrls(Map<String, URL> from, Map<String, URL> to, Map<String, String> filter) {\n    if (from == null || from.isEmpty()) return;\n\n    for (Map.Entry<String, URL> entry : from.entrySet()) {\n        URL url = entry.getValue();\n\n        boolean match = true;\n        for (Map.Entry<String, String> e : filter.entrySet()) {\n            String key = e.getKey();\n            String value = e.getValue();\n\n            if (ADDRESS_FILTER_KEY.equals(key)) {\n                if (!value.equals(url.getIp())) {\n                    match = false;\n                    break;\n                }\n            } else {\n                if (!value.equals(url.getParameter(key))) {\n                    match = false;\n                    break;\n                }\n            }\n        }\n\n        if (match) {\n            to.put(entry.getKey(), url);\n        }\n    }\n}",
                "name": "filterFromUrls",
                "modifiers": "static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, URL>",
                        "name": "from"
                    },
                    {
                        "type": "Map<String, URL>",
                        "name": "to"
                    },
                    {
                        "type": "Map<String, String>",
                        "name": "filter"
                    }
                ],
                "body": "{\n    if (from == null || from.isEmpty()) return;\n\n    for (Map.Entry<String, URL> entry : from.entrySet()) {\n        URL url = entry.getValue();\n\n        boolean match = true;\n        for (Map.Entry<String, String> e : filter.entrySet()) {\n            String key = e.getKey();\n            String value = e.getValue();\n\n            if (ADDRESS_FILTER_KEY.equals(key)) {\n                if (!value.equals(url.getIp())) {\n                    match = false;\n                    break;\n                }\n            } else {\n                if (!value.equals(url.getParameter(key))) {\n                    match = false;\n                    break;\n                }\n            }\n        }\n\n        if (match) {\n            to.put(entry.getKey(), url);\n        }\n    }\n}",
                "start_point": {
                    "row": 217,
                    "column": 4
                },
                "end_point": {
                    "row": 245,
                    "column": 5
                }
            },
            {
                "definition": "public static <SM extends Map<String, Map<String, URL>>> Pair<String, URL> filterFromCategory(Map<String, SM> urls, String category, String id) {\n    SM services = urls.get(category);\n    if (services == null) return null;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : services.entrySet()) {\n        Map<String, URL> u = e1.getValue();\n        if (u.containsKey(id)) return new Pair<>(id, u.get(id));\n    }\n    return null;\n}",
                "name": "filterFromCategory",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Map<String, SM>",
                        "name": "urls"
                    },
                    {
                        "type": "String",
                        "name": "category"
                    },
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    SM services = urls.get(category);\n    if (services == null) return null;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : services.entrySet()) {\n        Map<String, URL> u = e1.getValue();\n        if (u.containsKey(id)) return new Pair<>(id, u.get(id));\n    }\n    return null;\n}",
                "start_point": {
                    "row": 247,
                    "column": 4
                },
                "end_point": {
                    "row": 256,
                    "column": 5
                }
            }
        ]
    }
]