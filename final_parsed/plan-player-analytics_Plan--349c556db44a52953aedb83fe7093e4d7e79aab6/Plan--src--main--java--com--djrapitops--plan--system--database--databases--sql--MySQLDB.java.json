[
    {
        "repo_name": "plan-player-analytics_Plan",
        "commit": "349c556db44a52953aedb83fe7093e4d7e79aab6",
        "rev_path": "Plan/src/main/java/com/djrapitops/plan/system/database/databases/sql/MySQLDB.java",
        "definition": "public class MySQLDB extends SQLDB {\n\n    protected DataSource dataSource;\n\n    public MySQLDB() {\n    }\n\n    /**\n     * Setups the {@link HikariDataSource}\n     */\n    @Override\n    public void setupDataSource() throws DBInitException {\n        HikariConfig config = new HikariConfig();\n\n        String host = Settings.DB_HOST.toString();\n        String port = Integer.toString(Settings.DB_PORT.getNumber());\n        String database = Settings.DB_DATABASE.toString();\n        String launchOptions = Settings.DB_LAUNCH_OPTIONS.toString();\n        if (launchOptions.isEmpty() || !launchOptions.startsWith(\"?\") || launchOptions.endsWith(\"&\")) {\n            Log.error(\"Launch Options were faulty, using default (?rewriteBatchedStatements=true&useSSL=false)\");\n            launchOptions = \"?rewriteBatchedStatements=true&useSSL=false\";\n        }\n        config.setJdbcUrl(\"jdbc:mysql://\" + host + \":\" + port + \"/\" + database + launchOptions);\n\n        String username = Settings.DB_USER.toString();\n        String password = Settings.DB_PASS.toString();\n\n        config.setUsername(username);\n        config.setPassword(password);\n\n        config.setPoolName(\"Plan Connection Pool\");\n        config.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\n        config.setAutoCommit(true);\n        config.setReadOnly(false);\n        config.setMaximumPoolSize(8);\n\n        this.dataSource = new HikariDataSource(config);\n    }\n\n    /**\n     * @return the name of the Database\n     */\n    @Override\n    public String getName() {\n        return \"MySQL\";\n    }\n\n    @Override\n    public Connection getConnection() throws SQLException {\n        return dataSource.getConnection();\n    }\n\n    @Override\n    public void close() {\n        if (dataSource instanceof HikariDataSource) {\n            ((HikariDataSource) dataSource).close();\n        }\n        super.close();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n        MySQLDB mySQLDB = (MySQLDB) o;\n        return Objects.equals(dataSource, mySQLDB.dataSource);\n    }\n\n    @Override\n    public int hashCode() {\n\n        return Objects.hash(super.hashCode(), dataSource);\n    }\n}",
        "package": "package com.djrapitops.plan.system.database.databases.sql;",
        "tree_path": "MySQLDB",
        "name": "MySQLDB",
        "modifiers": "public",
        "superclass": "extends SQLDB",
        "super_interfaces": null,
        "body": "{\n\n    protected DataSource dataSource;\n\n    public MySQLDB() {\n    }\n\n    /**\n     * Setups the {@link HikariDataSource}\n     */\n    @Override\n    public void setupDataSource() throws DBInitException {\n        HikariConfig config = new HikariConfig();\n\n        String host = Settings.DB_HOST.toString();\n        String port = Integer.toString(Settings.DB_PORT.getNumber());\n        String database = Settings.DB_DATABASE.toString();\n        String launchOptions = Settings.DB_LAUNCH_OPTIONS.toString();\n        if (launchOptions.isEmpty() || !launchOptions.startsWith(\"?\") || launchOptions.endsWith(\"&\")) {\n            Log.error(\"Launch Options were faulty, using default (?rewriteBatchedStatements=true&useSSL=false)\");\n            launchOptions = \"?rewriteBatchedStatements=true&useSSL=false\";\n        }\n        config.setJdbcUrl(\"jdbc:mysql://\" + host + \":\" + port + \"/\" + database + launchOptions);\n\n        String username = Settings.DB_USER.toString();\n        String password = Settings.DB_PASS.toString();\n\n        config.setUsername(username);\n        config.setPassword(password);\n\n        config.setPoolName(\"Plan Connection Pool\");\n        config.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\n        config.setAutoCommit(true);\n        config.setReadOnly(false);\n        config.setMaximumPoolSize(8);\n\n        this.dataSource = new HikariDataSource(config);\n    }\n\n    /**\n     * @return the name of the Database\n     */\n    @Override\n    public String getName() {\n        return \"MySQL\";\n    }\n\n    @Override\n    public Connection getConnection() throws SQLException {\n        return dataSource.getConnection();\n    }\n\n    @Override\n    public void close() {\n        if (dataSource instanceof HikariDataSource) {\n            ((HikariDataSource) dataSource).close();\n        }\n        super.close();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n        MySQLDB mySQLDB = (MySQLDB) o;\n        return Objects.equals(dataSource, mySQLDB.dataSource);\n    }\n\n    @Override\n    public int hashCode() {\n\n        return Objects.hash(super.hashCode(), dataSource);\n    }\n}",
        "start_point": {
            "row": 16,
            "column": 0
        },
        "end_point": {
            "row": 91,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public MySQLDB() {\n}",
                "name": "MySQLDB",
                "modifiers": "public",
                "parameters": [],
                "body": "{\n}",
                "constructor": true,
                "start_point": {
                    "row": 20,
                    "column": 4
                },
                "end_point": {
                    "row": 21,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void setupDataSource() throws DBInitException {\n    HikariConfig config = new HikariConfig();\n\n    String host = Settings.DB_HOST.toString();\n    String port = Integer.toString(Settings.DB_PORT.getNumber());\n    String database = Settings.DB_DATABASE.toString();\n    String launchOptions = Settings.DB_LAUNCH_OPTIONS.toString();\n    if (launchOptions.isEmpty() || !launchOptions.startsWith(\"?\") || launchOptions.endsWith(\"&\")) {\n        Log.error(\"Launch Options were faulty, using default (?rewriteBatchedStatements=true&useSSL=false)\");\n        launchOptions = \"?rewriteBatchedStatements=true&useSSL=false\";\n    }\n    config.setJdbcUrl(\"jdbc:mysql://\" + host + \":\" + port + \"/\" + database + launchOptions);\n\n    String username = Settings.DB_USER.toString();\n    String password = Settings.DB_PASS.toString();\n\n    config.setUsername(username);\n    config.setPassword(password);\n\n    config.setPoolName(\"Plan Connection Pool\");\n    config.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\n    config.setAutoCommit(true);\n    config.setReadOnly(false);\n    config.setMaximumPoolSize(8);\n\n    this.dataSource = new HikariDataSource(config);\n}",
                "name": "setupDataSource",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    HikariConfig config = new HikariConfig();\n\n    String host = Settings.DB_HOST.toString();\n    String port = Integer.toString(Settings.DB_PORT.getNumber());\n    String database = Settings.DB_DATABASE.toString();\n    String launchOptions = Settings.DB_LAUNCH_OPTIONS.toString();\n    if (launchOptions.isEmpty() || !launchOptions.startsWith(\"?\") || launchOptions.endsWith(\"&\")) {\n        Log.error(\"Launch Options were faulty, using default (?rewriteBatchedStatements=true&useSSL=false)\");\n        launchOptions = \"?rewriteBatchedStatements=true&useSSL=false\";\n    }\n    config.setJdbcUrl(\"jdbc:mysql://\" + host + \":\" + port + \"/\" + database + launchOptions);\n\n    String username = Settings.DB_USER.toString();\n    String password = Settings.DB_PASS.toString();\n\n    config.setUsername(username);\n    config.setPassword(password);\n\n    config.setPoolName(\"Plan Connection Pool\");\n    config.setDriverClassName(\"com.mysql.jdbc.Driver\");\n\n    config.setAutoCommit(true);\n    config.setReadOnly(false);\n    config.setMaximumPoolSize(8);\n\n    this.dataSource = new HikariDataSource(config);\n}",
                "start_point": {
                    "row": 26,
                    "column": 4
                },
                "end_point": {
                    "row": 54,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic String getName() {\n    return \"MySQL\";\n}",
                "name": "getName",
                "modifiers": "@Override\n    public",
                "return_type": "String",
                "parameters": [],
                "body": "{\n    return \"MySQL\";\n}",
                "start_point": {
                    "row": 59,
                    "column": 4
                },
                "end_point": {
                    "row": 62,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic Connection getConnection() throws SQLException {\n    return dataSource.getConnection();\n}",
                "name": "getConnection",
                "modifiers": "@Override\n    public",
                "return_type": "Connection",
                "parameters": [],
                "body": "{\n    return dataSource.getConnection();\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 67,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void close() {\n    if (dataSource instanceof HikariDataSource) {\n        ((HikariDataSource) dataSource).close();\n    }\n    super.close();\n}",
                "name": "close",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    if (dataSource instanceof HikariDataSource) {\n        ((HikariDataSource) dataSource).close();\n    }\n    super.close();\n}",
                "start_point": {
                    "row": 69,
                    "column": 4
                },
                "end_point": {
                    "row": 75,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    MySQLDB mySQLDB = (MySQLDB) o;\n    return Objects.equals(dataSource, mySQLDB.dataSource);\n}",
                "name": "equals",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Object",
                        "name": "o"
                    }
                ],
                "body": "{\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    MySQLDB mySQLDB = (MySQLDB) o;\n    return Objects.equals(dataSource, mySQLDB.dataSource);\n}",
                "start_point": {
                    "row": 77,
                    "column": 4
                },
                "end_point": {
                    "row": 84,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic int hashCode() {\n\n    return Objects.hash(super.hashCode(), dataSource);\n}",
                "name": "hashCode",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n\n    return Objects.hash(super.hashCode(), dataSource);\n}",
                "start_point": {
                    "row": 86,
                    "column": 4
                },
                "end_point": {
                    "row": 90,
                    "column": 5
                }
            }
        ]
    }
]