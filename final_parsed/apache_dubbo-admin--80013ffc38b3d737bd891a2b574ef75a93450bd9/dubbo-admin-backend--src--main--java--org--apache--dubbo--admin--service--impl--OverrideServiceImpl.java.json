[
    {
        "repo_name": "apache_dubbo-admin",
        "commit": "80013ffc38b3d737bd891a2b574ef75a93450bd9",
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/service/impl/OverrideServiceImpl.java",
        "definition": "@Component\npublic class OverrideServiceImpl extends AbstractService implements OverrideService {\n\n    public void saveOverride(Override override) {\n        URL url = getUrlFromOverride(override);\n        registryService.register(url);\n    }\n\n    public void updateOverride(Override override) {\n        String hash = override.getHash();\n        if (hash == null) {\n            throw new IllegalStateException(\"no override id\");\n        }\n        URL oldOverride = findOverrideUrl(hash);\n        if (oldOverride == null) {\n            throw new IllegalStateException(\"Route was changed!\");\n        }\n        URL newOverride = getUrlFromOverride(override);\n\n        registryService.unregister(oldOverride);\n        registryService.register(newOverride);\n\n    }\n\n    public void deleteOverride(String id) {\n        URL oldOverride = findOverrideUrl(id);\n        if (oldOverride == null) {\n            throw new IllegalStateException(\"Route was changed!\");\n        }\n        registryService.unregister(oldOverride);\n    }\n\n    public void enableOverride(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no override id\");\n        }\n\n        URL oldOverride = findOverrideUrl(id);\n        if (oldOverride == null) {\n            throw new IllegalStateException(\"Override was changed!\");\n        }\n        if (oldOverride.getParameter(\"enabled\", true)) {\n            return;\n        }\n\n        URL newOverride = oldOverride.addParameter(\"enabled\", true);\n        registryService.unregister(oldOverride);\n        registryService.register(newOverride);\n\n    }\n\n    public void disableOverride(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no override id\");\n        }\n\n        URL oldProvider = findOverrideUrl(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Override was changed!\");\n        }\n        if (!oldProvider.getParameter(\"enabled\", true)) {\n            return;\n        }\n\n        URL newProvider = oldProvider.addParameter(\"enabled\", false);\n        registryService.unregister(oldProvider);\n        registryService.register(newProvider);\n\n    }\n\n    private Map<String, URL> findOverrideUrl(String service, String address, String application) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n        if (service != null && service.length() > 0) {\n            filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n        }\n        if (address != null && address.length() > 0) {\n            filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n        }\n        if (application != null && application.length() > 0) {\n            filter.put(Constants.APPLICATION_KEY, application);\n        }\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<Override> findByAddress(String address) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(null, address, null));\n    }\n\n    public List<Override> findByServiceAndAddress(String service, String address) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(service, address, null));\n    }\n\n    public List<Override> findByApplication(String application) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(null, null, application));\n    }\n\n    public List<Override> findByService(String service) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(service, null, null));\n    }\n\n    public List<Override> findByServiceAndApplication(String service, String application) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(service, null, application));\n    }\n\n    public List<Override> findAll() {\n        return SyncUtils.url2OverrideList(findOverrideUrl(null, null, null));\n    }\n\n    private Pair<String, URL> findOverrideUrlPair(String id) {\n        return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONFIGURATORS_CATEGORY, id);\n    }\n\n    public Override findById(String id) {\n        return SyncUtils.url2Override(findOverrideUrlPair(id));\n    }\n\n    private URL getUrlFromOverride(Override override) {\n        return override.toUrl();\n        /*Map<String, String> params = ConvertUtil.serviceName2Map(override.getService());\n        if(!params.containsKey(Constants.INTERFACE_KEY)) {\n            throw new IllegalArgumentException(\"No interface info\");\n        }\n        if(!params.containsKey(Constants.VERSION_KEY)) {\n            throw new IllegalArgumentException(\"No version info\");\n        }\n        \n        boolean enabled = override.isEnabled();\n        if(!enabled) {\n            params.put(\"enabled\", \"false\");\n        }\n        String application = override.getApplication();\n        if(!StringUtils.isEmpty(application)) {\n            params.put(\"application\", application);\n        }\n        String address = override.getAddress();\n        if(!StringUtils.isEmpty(address)) {\n            params.put(\"address\", address);\n        }\n        \n        String overrideAddress = override.getOverrideAddress();\n        if(StringUtils.isEmpty(overrideAddress)) {\n            overrideAddress = \"0.0.0.0\";\n        }\n        params.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n        \n        URL url = new URL(\"override\", overrideAddress, -1, params);\n        url = url.addParameterString(override.getParams());\n        return url;*/\n    }\n\n    URL findOverrideUrl(String id) {\n        return getUrlFromOverride(findById(id));\n    }\n\n}",
        "package": "package org.apache.dubbo.admin.service.impl;",
        "tree_path": "OverrideServiceImpl",
        "name": "OverrideServiceImpl",
        "modifiers": "@Component\npublic",
        "superclass": "extends AbstractService",
        "super_interfaces": "implements OverrideService",
        "body": "{\n\n    public void saveOverride(Override override) {\n        URL url = getUrlFromOverride(override);\n        registryService.register(url);\n    }\n\n    public void updateOverride(Override override) {\n        String hash = override.getHash();\n        if (hash == null) {\n            throw new IllegalStateException(\"no override id\");\n        }\n        URL oldOverride = findOverrideUrl(hash);\n        if (oldOverride == null) {\n            throw new IllegalStateException(\"Route was changed!\");\n        }\n        URL newOverride = getUrlFromOverride(override);\n\n        registryService.unregister(oldOverride);\n        registryService.register(newOverride);\n\n    }\n\n    public void deleteOverride(String id) {\n        URL oldOverride = findOverrideUrl(id);\n        if (oldOverride == null) {\n            throw new IllegalStateException(\"Route was changed!\");\n        }\n        registryService.unregister(oldOverride);\n    }\n\n    public void enableOverride(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no override id\");\n        }\n\n        URL oldOverride = findOverrideUrl(id);\n        if (oldOverride == null) {\n            throw new IllegalStateException(\"Override was changed!\");\n        }\n        if (oldOverride.getParameter(\"enabled\", true)) {\n            return;\n        }\n\n        URL newOverride = oldOverride.addParameter(\"enabled\", true);\n        registryService.unregister(oldOverride);\n        registryService.register(newOverride);\n\n    }\n\n    public void disableOverride(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no override id\");\n        }\n\n        URL oldProvider = findOverrideUrl(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Override was changed!\");\n        }\n        if (!oldProvider.getParameter(\"enabled\", true)) {\n            return;\n        }\n\n        URL newProvider = oldProvider.addParameter(\"enabled\", false);\n        registryService.unregister(oldProvider);\n        registryService.register(newProvider);\n\n    }\n\n    private Map<String, URL> findOverrideUrl(String service, String address, String application) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n        if (service != null && service.length() > 0) {\n            filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n        }\n        if (address != null && address.length() > 0) {\n            filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n        }\n        if (application != null && application.length() > 0) {\n            filter.put(Constants.APPLICATION_KEY, application);\n        }\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<Override> findByAddress(String address) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(null, address, null));\n    }\n\n    public List<Override> findByServiceAndAddress(String service, String address) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(service, address, null));\n    }\n\n    public List<Override> findByApplication(String application) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(null, null, application));\n    }\n\n    public List<Override> findByService(String service) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(service, null, null));\n    }\n\n    public List<Override> findByServiceAndApplication(String service, String application) {\n        return SyncUtils.url2OverrideList(findOverrideUrl(service, null, application));\n    }\n\n    public List<Override> findAll() {\n        return SyncUtils.url2OverrideList(findOverrideUrl(null, null, null));\n    }\n\n    private Pair<String, URL> findOverrideUrlPair(String id) {\n        return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONFIGURATORS_CATEGORY, id);\n    }\n\n    public Override findById(String id) {\n        return SyncUtils.url2Override(findOverrideUrlPair(id));\n    }\n\n    private URL getUrlFromOverride(Override override) {\n        return override.toUrl();\n        /*Map<String, String> params = ConvertUtil.serviceName2Map(override.getService());\n        if(!params.containsKey(Constants.INTERFACE_KEY)) {\n            throw new IllegalArgumentException(\"No interface info\");\n        }\n        if(!params.containsKey(Constants.VERSION_KEY)) {\n            throw new IllegalArgumentException(\"No version info\");\n        }\n        \n        boolean enabled = override.isEnabled();\n        if(!enabled) {\n            params.put(\"enabled\", \"false\");\n        }\n        String application = override.getApplication();\n        if(!StringUtils.isEmpty(application)) {\n            params.put(\"application\", application);\n        }\n        String address = override.getAddress();\n        if(!StringUtils.isEmpty(address)) {\n            params.put(\"address\", address);\n        }\n        \n        String overrideAddress = override.getOverrideAddress();\n        if(StringUtils.isEmpty(overrideAddress)) {\n            overrideAddress = \"0.0.0.0\";\n        }\n        params.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n        \n        URL url = new URL(\"override\", overrideAddress, -1, params);\n        url = url.addParameterString(override.getParams());\n        return url;*/\n    }\n\n    URL findOverrideUrl(String id) {\n        return getUrlFromOverride(findById(id));\n    }\n\n}",
        "start_point": {
            "row": 34,
            "column": 0
        },
        "end_point": {
            "row": 189,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public void saveOverride(Override override) {\n    URL url = getUrlFromOverride(override);\n    registryService.register(url);\n}",
                "name": "saveOverride",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Override",
                        "name": "override"
                    }
                ],
                "body": "{\n    URL url = getUrlFromOverride(override);\n    registryService.register(url);\n}",
                "start_point": {
                    "row": 37,
                    "column": 4
                },
                "end_point": {
                    "row": 40,
                    "column": 5
                }
            },
            {
                "definition": "public void updateOverride(Override override) {\n    String hash = override.getHash();\n    if (hash == null) {\n        throw new IllegalStateException(\"no override id\");\n    }\n    URL oldOverride = findOverrideUrl(hash);\n    if (oldOverride == null) {\n        throw new IllegalStateException(\"Route was changed!\");\n    }\n    URL newOverride = getUrlFromOverride(override);\n\n    registryService.unregister(oldOverride);\n    registryService.register(newOverride);\n\n}",
                "name": "updateOverride",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Override",
                        "name": "override"
                    }
                ],
                "body": "{\n    String hash = override.getHash();\n    if (hash == null) {\n        throw new IllegalStateException(\"no override id\");\n    }\n    URL oldOverride = findOverrideUrl(hash);\n    if (oldOverride == null) {\n        throw new IllegalStateException(\"Route was changed!\");\n    }\n    URL newOverride = getUrlFromOverride(override);\n\n    registryService.unregister(oldOverride);\n    registryService.register(newOverride);\n\n}",
                "start_point": {
                    "row": 42,
                    "column": 4
                },
                "end_point": {
                    "row": 56,
                    "column": 5
                }
            },
            {
                "definition": "public void deleteOverride(String id) {\n    URL oldOverride = findOverrideUrl(id);\n    if (oldOverride == null) {\n        throw new IllegalStateException(\"Route was changed!\");\n    }\n    registryService.unregister(oldOverride);\n}",
                "name": "deleteOverride",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    URL oldOverride = findOverrideUrl(id);\n    if (oldOverride == null) {\n        throw new IllegalStateException(\"Route was changed!\");\n    }\n    registryService.unregister(oldOverride);\n}",
                "start_point": {
                    "row": 58,
                    "column": 4
                },
                "end_point": {
                    "row": 64,
                    "column": 5
                }
            },
            {
                "definition": "public void enableOverride(String id) {\n    if (id == null) {\n        throw new IllegalStateException(\"no override id\");\n    }\n\n    URL oldOverride = findOverrideUrl(id);\n    if (oldOverride == null) {\n        throw new IllegalStateException(\"Override was changed!\");\n    }\n    if (oldOverride.getParameter(\"enabled\", true)) {\n        return;\n    }\n\n    URL newOverride = oldOverride.addParameter(\"enabled\", true);\n    registryService.unregister(oldOverride);\n    registryService.register(newOverride);\n\n}",
                "name": "enableOverride",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    if (id == null) {\n        throw new IllegalStateException(\"no override id\");\n    }\n\n    URL oldOverride = findOverrideUrl(id);\n    if (oldOverride == null) {\n        throw new IllegalStateException(\"Override was changed!\");\n    }\n    if (oldOverride.getParameter(\"enabled\", true)) {\n        return;\n    }\n\n    URL newOverride = oldOverride.addParameter(\"enabled\", true);\n    registryService.unregister(oldOverride);\n    registryService.register(newOverride);\n\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 83,
                    "column": 5
                }
            },
            {
                "definition": "public void disableOverride(String id) {\n    if (id == null) {\n        throw new IllegalStateException(\"no override id\");\n    }\n\n    URL oldProvider = findOverrideUrl(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Override was changed!\");\n    }\n    if (!oldProvider.getParameter(\"enabled\", true)) {\n        return;\n    }\n\n    URL newProvider = oldProvider.addParameter(\"enabled\", false);\n    registryService.unregister(oldProvider);\n    registryService.register(newProvider);\n\n}",
                "name": "disableOverride",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    if (id == null) {\n        throw new IllegalStateException(\"no override id\");\n    }\n\n    URL oldProvider = findOverrideUrl(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Override was changed!\");\n    }\n    if (!oldProvider.getParameter(\"enabled\", true)) {\n        return;\n    }\n\n    URL newProvider = oldProvider.addParameter(\"enabled\", false);\n    registryService.unregister(oldProvider);\n    registryService.register(newProvider);\n\n}",
                "start_point": {
                    "row": 85,
                    "column": 4
                },
                "end_point": {
                    "row": 102,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findOverrideUrl(String service, String address, String application) {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n    if (service != null && service.length() > 0) {\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n    }\n    if (address != null && address.length() > 0) {\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n    }\n    if (application != null && application.length() > 0) {\n        filter.put(Constants.APPLICATION_KEY, application);\n    }\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findOverrideUrl",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    },
                    {
                        "type": "String",
                        "name": "address"
                    },
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n    if (service != null && service.length() > 0) {\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n    }\n    if (address != null && address.length() > 0) {\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n    }\n    if (application != null && application.length() > 0) {\n        filter.put(Constants.APPLICATION_KEY, application);\n    }\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 104,
                    "column": 4
                },
                "end_point": {
                    "row": 117,
                    "column": 5
                }
            },
            {
                "definition": "public List<Override> findByAddress(String address) {\n    return SyncUtils.url2OverrideList(findOverrideUrl(null, address, null));\n}",
                "name": "findByAddress",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    return SyncUtils.url2OverrideList(findOverrideUrl(null, address, null));\n}",
                "start_point": {
                    "row": 119,
                    "column": 4
                },
                "end_point": {
                    "row": 121,
                    "column": 5
                }
            },
            {
                "definition": "public List<Override> findByServiceAndAddress(String service, String address) {\n    return SyncUtils.url2OverrideList(findOverrideUrl(service, address, null));\n}",
                "name": "findByServiceAndAddress",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    },
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    return SyncUtils.url2OverrideList(findOverrideUrl(service, address, null));\n}",
                "start_point": {
                    "row": 123,
                    "column": 4
                },
                "end_point": {
                    "row": 125,
                    "column": 5
                }
            },
            {
                "definition": "public List<Override> findByApplication(String application) {\n    return SyncUtils.url2OverrideList(findOverrideUrl(null, null, application));\n}",
                "name": "findByApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    return SyncUtils.url2OverrideList(findOverrideUrl(null, null, application));\n}",
                "start_point": {
                    "row": 127,
                    "column": 4
                },
                "end_point": {
                    "row": 129,
                    "column": 5
                }
            },
            {
                "definition": "public List<Override> findByService(String service) {\n    return SyncUtils.url2OverrideList(findOverrideUrl(service, null, null));\n}",
                "name": "findByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    return SyncUtils.url2OverrideList(findOverrideUrl(service, null, null));\n}",
                "start_point": {
                    "row": 131,
                    "column": 4
                },
                "end_point": {
                    "row": 133,
                    "column": 5
                }
            },
            {
                "definition": "public List<Override> findByServiceAndApplication(String service, String application) {\n    return SyncUtils.url2OverrideList(findOverrideUrl(service, null, application));\n}",
                "name": "findByServiceAndApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    },
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    return SyncUtils.url2OverrideList(findOverrideUrl(service, null, application));\n}",
                "start_point": {
                    "row": 135,
                    "column": 4
                },
                "end_point": {
                    "row": 137,
                    "column": 5
                }
            },
            {
                "definition": "public List<Override> findAll() {\n    return SyncUtils.url2OverrideList(findOverrideUrl(null, null, null));\n}",
                "name": "findAll",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    return SyncUtils.url2OverrideList(findOverrideUrl(null, null, null));\n}",
                "start_point": {
                    "row": 139,
                    "column": 4
                },
                "end_point": {
                    "row": 141,
                    "column": 5
                }
            },
            {
                "definition": "private Pair<String, URL> findOverrideUrlPair(String id) {\n    return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONFIGURATORS_CATEGORY, id);\n}",
                "name": "findOverrideUrlPair",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return SyncUtils.filterFromCategory(getRegistryCache(), Constants.CONFIGURATORS_CATEGORY, id);\n}",
                "start_point": {
                    "row": 143,
                    "column": 4
                },
                "end_point": {
                    "row": 145,
                    "column": 5
                }
            },
            {
                "definition": "public Override findById(String id) {\n    return SyncUtils.url2Override(findOverrideUrlPair(id));\n}",
                "name": "findById",
                "modifiers": "public",
                "return_type": "Override",
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return SyncUtils.url2Override(findOverrideUrlPair(id));\n}",
                "start_point": {
                    "row": 147,
                    "column": 4
                },
                "end_point": {
                    "row": 149,
                    "column": 5
                }
            },
            {
                "definition": "private URL getUrlFromOverride(Override override) {\n    return override.toUrl();\n    /*Map<String, String> params = ConvertUtil.serviceName2Map(override.getService());\n    if(!params.containsKey(Constants.INTERFACE_KEY)) {\n        throw new IllegalArgumentException(\"No interface info\");\n    }\n    if(!params.containsKey(Constants.VERSION_KEY)) {\n        throw new IllegalArgumentException(\"No version info\");\n    }\n    \n    boolean enabled = override.isEnabled();\n    if(!enabled) {\n        params.put(\"enabled\", \"false\");\n    }\n    String application = override.getApplication();\n    if(!StringUtils.isEmpty(application)) {\n        params.put(\"application\", application);\n    }\n    String address = override.getAddress();\n    if(!StringUtils.isEmpty(address)) {\n        params.put(\"address\", address);\n    }\n    \n    String overrideAddress = override.getOverrideAddress();\n    if(StringUtils.isEmpty(overrideAddress)) {\n        overrideAddress = \"0.0.0.0\";\n    }\n    params.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n    \n    URL url = new URL(\"override\", overrideAddress, -1, params);\n    url = url.addParameterString(override.getParams());\n    return url;*/\n}",
                "name": "getUrlFromOverride",
                "modifiers": "private",
                "return_type": "URL",
                "parameters": [
                    {
                        "type": "Override",
                        "name": "override"
                    }
                ],
                "body": "{\n    return override.toUrl();\n    /*Map<String, String> params = ConvertUtil.serviceName2Map(override.getService());\n    if(!params.containsKey(Constants.INTERFACE_KEY)) {\n        throw new IllegalArgumentException(\"No interface info\");\n    }\n    if(!params.containsKey(Constants.VERSION_KEY)) {\n        throw new IllegalArgumentException(\"No version info\");\n    }\n    \n    boolean enabled = override.isEnabled();\n    if(!enabled) {\n        params.put(\"enabled\", \"false\");\n    }\n    String application = override.getApplication();\n    if(!StringUtils.isEmpty(application)) {\n        params.put(\"application\", application);\n    }\n    String address = override.getAddress();\n    if(!StringUtils.isEmpty(address)) {\n        params.put(\"address\", address);\n    }\n    \n    String overrideAddress = override.getOverrideAddress();\n    if(StringUtils.isEmpty(overrideAddress)) {\n        overrideAddress = \"0.0.0.0\";\n    }\n    params.put(Constants.CATEGORY_KEY, Constants.CONFIGURATORS_CATEGORY);\n    \n    URL url = new URL(\"override\", overrideAddress, -1, params);\n    url = url.addParameterString(override.getParams());\n    return url;*/\n}",
                "start_point": {
                    "row": 151,
                    "column": 4
                },
                "end_point": {
                    "row": 183,
                    "column": 5
                }
            },
            {
                "definition": "URL findOverrideUrl(String id) {\n    return getUrlFromOverride(findById(id));\n}",
                "name": "findOverrideUrl",
                "modifiers": null,
                "return_type": "URL",
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return getUrlFromOverride(findById(id));\n}",
                "start_point": {
                    "row": 185,
                    "column": 4
                },
                "end_point": {
                    "row": 187,
                    "column": 5
                }
            }
        ]
    }
]