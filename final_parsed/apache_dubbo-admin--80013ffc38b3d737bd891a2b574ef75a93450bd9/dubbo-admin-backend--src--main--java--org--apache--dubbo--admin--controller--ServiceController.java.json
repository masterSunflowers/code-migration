[
    {
        "repo_name": "apache_dubbo-admin",
        "commit": "80013ffc38b3d737bd891a2b574ef75a93450bd9",
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/controller/ServiceController.java",
        "definition": "@RestController\n@RequestMapping(\"/api/{env}/service\")\npublic class ServiceController {\n\n    private final ProviderService providerService;\n    private final ConsumerService consumerService;\n\n    @Autowired\n    public ServiceController(ProviderService providerService, ConsumerService consumerService) {\n        this.providerService = providerService;\n        this.consumerService = consumerService;\n    }\n\n    @RequestMapping(method = RequestMethod.GET)\n    public Set<ServiceDTO> searchService(@RequestParam String pattern,\n                                         @RequestParam String filter,@PathVariable String env) {\n\n        List<Provider> providers = new ArrayList<>();\n        if (!filter.contains(\"*\") && !filter.contains(\"?\")) {\n            if (pattern.equals(\"ip\")) {\n                providers = providerService.findByAddress(filter);\n            } else if (pattern.equals(\"serviceName\")) {\n                providers = providerService.findByService(filter);\n            } else if (pattern.equals(\"application\")) {\n                providers = providerService.findByApplication(filter);\n            }\n        } else {\n            List<String> candidates = Collections.emptyList();\n            if (pattern.equals(\"serviceName\")) {\n               candidates = providerService.findServices();\n            } else if (pattern.equals(\"application\")) {\n                candidates = providerService.findApplications();\n            }\n            filter = filter.toLowerCase().replace(\".\", \"\\\\.\");\n            if (filter.startsWith(\"*\")) {\n                filter = \".\" + filter;\n            }\n            Pattern regex = Pattern.compile(filter);\n            for (String candidate : candidates) {\n                Matcher matcher = regex.matcher(candidate);\n                if (matcher.matches() || matcher.lookingAt()) {\n                    if (pattern.equals(\"serviceName\")) {\n                        providers.addAll(providerService.findByService(candidate));\n                    } else {\n                        providers.addAll(providerService.findByApplication(candidate));\n                    }\n                }\n            }\n        }\n\n        Set<ServiceDTO> result = new TreeSet<>();\n        for (Provider provider : providers) {\n            Map<String, String> map = StringUtils.parseQueryString(provider.getParameters());\n            String app = provider.getApplication();\n            String service = map.get(Constants.INTERFACE_KEY);\n            String group = map.get(Constants.GROUP_KEY);\n            String version = map.get(Constants.VERSION_KEY);\n            ServiceDTO s = new ServiceDTO();\n            s.setAppName(app);\n            s.setService(service);\n            s.setGroup(group);\n            s.setVersion(version);\n            result.add(s);\n        }\n        return result;\n    }\n\n    @RequestMapping(value = \"/{service}\", method = RequestMethod.GET)\n    public ServiceDetailDTO serviceDetail(@PathVariable String service, @PathVariable String env) {\n        service = service.replace(\"*\", \"/\");\n        List<Provider> providers = providerService.findByService(service);\n\n        List<Consumer> consumers = consumerService.findByService(service);\n\n        ServiceDetailDTO serviceDetailDTO = new ServiceDetailDTO();\n        serviceDetailDTO.setConsumers(consumers);\n        serviceDetailDTO.setProviders(providers);\n        return serviceDetailDTO;\n    }\n}",
        "package": "package org.apache.dubbo.admin.controller;",
        "tree_path": "ServiceController",
        "name": "ServiceController",
        "modifiers": "@RestController\n@RequestMapping(\"/api/{env}/service\")\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    private final ProviderService providerService;\n    private final ConsumerService consumerService;\n\n    @Autowired\n    public ServiceController(ProviderService providerService, ConsumerService consumerService) {\n        this.providerService = providerService;\n        this.consumerService = consumerService;\n    }\n\n    @RequestMapping(method = RequestMethod.GET)\n    public Set<ServiceDTO> searchService(@RequestParam String pattern,\n                                         @RequestParam String filter,@PathVariable String env) {\n\n        List<Provider> providers = new ArrayList<>();\n        if (!filter.contains(\"*\") && !filter.contains(\"?\")) {\n            if (pattern.equals(\"ip\")) {\n                providers = providerService.findByAddress(filter);\n            } else if (pattern.equals(\"serviceName\")) {\n                providers = providerService.findByService(filter);\n            } else if (pattern.equals(\"application\")) {\n                providers = providerService.findByApplication(filter);\n            }\n        } else {\n            List<String> candidates = Collections.emptyList();\n            if (pattern.equals(\"serviceName\")) {\n               candidates = providerService.findServices();\n            } else if (pattern.equals(\"application\")) {\n                candidates = providerService.findApplications();\n            }\n            filter = filter.toLowerCase().replace(\".\", \"\\\\.\");\n            if (filter.startsWith(\"*\")) {\n                filter = \".\" + filter;\n            }\n            Pattern regex = Pattern.compile(filter);\n            for (String candidate : candidates) {\n                Matcher matcher = regex.matcher(candidate);\n                if (matcher.matches() || matcher.lookingAt()) {\n                    if (pattern.equals(\"serviceName\")) {\n                        providers.addAll(providerService.findByService(candidate));\n                    } else {\n                        providers.addAll(providerService.findByApplication(candidate));\n                    }\n                }\n            }\n        }\n\n        Set<ServiceDTO> result = new TreeSet<>();\n        for (Provider provider : providers) {\n            Map<String, String> map = StringUtils.parseQueryString(provider.getParameters());\n            String app = provider.getApplication();\n            String service = map.get(Constants.INTERFACE_KEY);\n            String group = map.get(Constants.GROUP_KEY);\n            String version = map.get(Constants.VERSION_KEY);\n            ServiceDTO s = new ServiceDTO();\n            s.setAppName(app);\n            s.setService(service);\n            s.setGroup(group);\n            s.setVersion(version);\n            result.add(s);\n        }\n        return result;\n    }\n\n    @RequestMapping(value = \"/{service}\", method = RequestMethod.GET)\n    public ServiceDetailDTO serviceDetail(@PathVariable String service, @PathVariable String env) {\n        service = service.replace(\"*\", \"/\");\n        List<Provider> providers = providerService.findByService(service);\n\n        List<Consumer> consumers = consumerService.findByService(service);\n\n        ServiceDetailDTO serviceDetailDTO = new ServiceDetailDTO();\n        serviceDetailDTO.setConsumers(consumers);\n        serviceDetailDTO.setProviders(providers);\n        return serviceDetailDTO;\n    }\n}",
        "start_point": {
            "row": 35,
            "column": 0
        },
        "end_point": {
            "row": 114,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Autowired\npublic ServiceController(ProviderService providerService, ConsumerService consumerService) {\n    this.providerService = providerService;\n    this.consumerService = consumerService;\n}",
                "name": "ServiceController",
                "modifiers": "@Autowired\n    public",
                "parameters": [
                    {
                        "type": "ProviderService",
                        "name": "providerService"
                    },
                    {
                        "type": "ConsumerService",
                        "name": "consumerService"
                    }
                ],
                "body": "{\n    this.providerService = providerService;\n    this.consumerService = consumerService;\n}",
                "constructor": true,
                "start_point": {
                    "row": 42,
                    "column": 4
                },
                "end_point": {
                    "row": 46,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(method = RequestMethod.GET)\npublic Set<ServiceDTO> searchService(@RequestParam String pattern,\n                                     @RequestParam String filter,@PathVariable String env) {\n\n    List<Provider> providers = new ArrayList<>();\n    if (!filter.contains(\"*\") && !filter.contains(\"?\")) {\n        if (pattern.equals(\"ip\")) {\n            providers = providerService.findByAddress(filter);\n        } else if (pattern.equals(\"serviceName\")) {\n            providers = providerService.findByService(filter);\n        } else if (pattern.equals(\"application\")) {\n            providers = providerService.findByApplication(filter);\n        }\n    } else {\n        List<String> candidates = Collections.emptyList();\n        if (pattern.equals(\"serviceName\")) {\n           candidates = providerService.findServices();\n        } else if (pattern.equals(\"application\")) {\n            candidates = providerService.findApplications();\n        }\n        filter = filter.toLowerCase().replace(\".\", \"\\\\.\");\n        if (filter.startsWith(\"*\")) {\n            filter = \".\" + filter;\n        }\n        Pattern regex = Pattern.compile(filter);\n        for (String candidate : candidates) {\n            Matcher matcher = regex.matcher(candidate);\n            if (matcher.matches() || matcher.lookingAt()) {\n                if (pattern.equals(\"serviceName\")) {\n                    providers.addAll(providerService.findByService(candidate));\n                } else {\n                    providers.addAll(providerService.findByApplication(candidate));\n                }\n            }\n        }\n    }\n\n    Set<ServiceDTO> result = new TreeSet<>();\n    for (Provider provider : providers) {\n        Map<String, String> map = StringUtils.parseQueryString(provider.getParameters());\n        String app = provider.getApplication();\n        String service = map.get(Constants.INTERFACE_KEY);\n        String group = map.get(Constants.GROUP_KEY);\n        String version = map.get(Constants.VERSION_KEY);\n        ServiceDTO s = new ServiceDTO();\n        s.setAppName(app);\n        s.setService(service);\n        s.setGroup(group);\n        s.setVersion(version);\n        result.add(s);\n    }\n    return result;\n}",
                "name": "searchService",
                "modifiers": "@RequestMapping(method = RequestMethod.GET)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@RequestParam",
                        "name": "String"
                    },
                    {
                        "type": "@RequestParam",
                        "name": "String"
                    },
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    }
                ],
                "body": "{\n\n    List<Provider> providers = new ArrayList<>();\n    if (!filter.contains(\"*\") && !filter.contains(\"?\")) {\n        if (pattern.equals(\"ip\")) {\n            providers = providerService.findByAddress(filter);\n        } else if (pattern.equals(\"serviceName\")) {\n            providers = providerService.findByService(filter);\n        } else if (pattern.equals(\"application\")) {\n            providers = providerService.findByApplication(filter);\n        }\n    } else {\n        List<String> candidates = Collections.emptyList();\n        if (pattern.equals(\"serviceName\")) {\n           candidates = providerService.findServices();\n        } else if (pattern.equals(\"application\")) {\n            candidates = providerService.findApplications();\n        }\n        filter = filter.toLowerCase().replace(\".\", \"\\\\.\");\n        if (filter.startsWith(\"*\")) {\n            filter = \".\" + filter;\n        }\n        Pattern regex = Pattern.compile(filter);\n        for (String candidate : candidates) {\n            Matcher matcher = regex.matcher(candidate);\n            if (matcher.matches() || matcher.lookingAt()) {\n                if (pattern.equals(\"serviceName\")) {\n                    providers.addAll(providerService.findByService(candidate));\n                } else {\n                    providers.addAll(providerService.findByApplication(candidate));\n                }\n            }\n        }\n    }\n\n    Set<ServiceDTO> result = new TreeSet<>();\n    for (Provider provider : providers) {\n        Map<String, String> map = StringUtils.parseQueryString(provider.getParameters());\n        String app = provider.getApplication();\n        String service = map.get(Constants.INTERFACE_KEY);\n        String group = map.get(Constants.GROUP_KEY);\n        String version = map.get(Constants.VERSION_KEY);\n        ServiceDTO s = new ServiceDTO();\n        s.setAppName(app);\n        s.setService(service);\n        s.setGroup(group);\n        s.setVersion(version);\n        result.add(s);\n    }\n    return result;\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 100,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"/{service}\", method = RequestMethod.GET)\npublic ServiceDetailDTO serviceDetail(@PathVariable String service, @PathVariable String env) {\n    service = service.replace(\"*\", \"/\");\n    List<Provider> providers = providerService.findByService(service);\n\n    List<Consumer> consumers = consumerService.findByService(service);\n\n    ServiceDetailDTO serviceDetailDTO = new ServiceDetailDTO();\n    serviceDetailDTO.setConsumers(consumers);\n    serviceDetailDTO.setProviders(providers);\n    return serviceDetailDTO;\n}",
                "name": "serviceDetail",
                "modifiers": "@RequestMapping(value = \"/{service}\", method = RequestMethod.GET)\n    public",
                "return_type": "ServiceDetailDTO",
                "parameters": [
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    },
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    }
                ],
                "body": "{\n    service = service.replace(\"*\", \"/\");\n    List<Provider> providers = providerService.findByService(service);\n\n    List<Consumer> consumers = consumerService.findByService(service);\n\n    ServiceDetailDTO serviceDetailDTO = new ServiceDetailDTO();\n    serviceDetailDTO.setConsumers(consumers);\n    serviceDetailDTO.setProviders(providers);\n    return serviceDetailDTO;\n}",
                "start_point": {
                    "row": 102,
                    "column": 4
                },
                "end_point": {
                    "row": 113,
                    "column": 5
                }
            }
        ]
    }
]