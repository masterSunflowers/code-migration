[
    {
        "repo_name": "apache_dubbo-admin",
        "commit": "80013ffc38b3d737bd891a2b574ef75a93450bd9",
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/controller/AccessesController.java",
        "definition": "@RestController\n@RequestMapping(\"/api/{env}/rules/access\")\npublic class AccessesController {\n    private static final Logger logger = LoggerFactory.getLogger(AccessesController.class);\n\n    private final RouteService routeService;\n\n    @Autowired\n    public AccessesController(RouteService routeService) {\n        this.routeService = routeService;\n    }\n\n    @RequestMapping(method = RequestMethod.GET)\n    public List<AccessDTO> searchAccess(@RequestParam(required = false) String service, @PathVariable String env) throws ParseException {\n        List<AccessDTO> result = new ArrayList<>();\n        List<Route> routes = new ArrayList<>();\n        if (StringUtils.isNotBlank(service)) {\n            Route route = routeService.getBlackwhitelistRouteByService(service.trim());\n            if (route != null) {\n                routes.add(route);\n            }\n        } else {\n            routes = routeService.findAllForceRoute();\n        }\n\n        for (Route route : routes) {\n            // Match WhiteBlackList Route\n            if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n                AccessDTO accessDTO = new AccessDTO();\n                accessDTO.setId(route.getHash());\n                accessDTO.setService(route.getService());\n                Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n                for (String key : when.keySet()) {\n                    accessDTO.setWhitelist(when.get(key).getUnmatches());\n                    accessDTO.setBlacklist(when.get(key).getMatches());\n                }\n                result.add(accessDTO);\n            }\n        }\n        return result;\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\n    public AccessDTO detailAccess(@PathVariable String id, @PathVariable String env) throws ParseException {\n        Route route = routeService.findRoute(id);\n        if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n            AccessDTO accessDTO = new AccessDTO();\n            accessDTO.setId(route.getHash());\n            accessDTO.setService(route.getService());\n            Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n            for (String key : when.keySet()) {\n                accessDTO.setWhitelist(when.get(key).getUnmatches());\n                accessDTO.setBlacklist(when.get(key).getMatches());\n            }\n            return accessDTO;\n        } else {\n            return null;\n        }\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\n    public void deleteAccess(@PathVariable String id, @PathVariable String env) {\n        routeService.deleteRoute(id);\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    @ResponseStatus(HttpStatus.CREATED)\n    public void createAccess(@RequestBody AccessDTO accessDTO, @PathVariable String env) {\n        if (StringUtils.isBlank(accessDTO.getService())) {\n            throw new ParamValidationException(\"Service is required.\");\n        }\n        if (accessDTO.getBlacklist() == null && accessDTO.getWhitelist() == null) {\n            throw new ParamValidationException(\"One of Blacklist/Whitelist is required.\");\n        }\n\n        Route route = routeService.getBlackwhitelistRouteByService(accessDTO.getService());\n\n        if (route != null) {\n            throw new ParamValidationException(accessDTO.getService() + \" is existed.\");\n        }\n\n        route = new Route();\n        route.setService(accessDTO.getService());\n        route.setForce(true);\n        route.setName(accessDTO.getService() + \" \" + AccessDTO.KEY_BLACK_WHITE_LIST);\n        route.setFilterRule(\"false\");\n        route.setEnabled(true);\n\n        Map<String, RouteRule.MatchPair> when = new HashMap<>();\n        RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n        when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n        if (accessDTO.getWhitelist() != null) {\n            matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n        }\n        if (accessDTO.getBlacklist() != null) {\n            matchPair.getMatches().addAll(accessDTO.getBlacklist());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        RouteRule.contidionToString(sb, when);\n        route.setMatchRule(sb.toString());\n        routeService.createRoute(route);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\n    public void updateAccess(@PathVariable String id, @RequestBody AccessDTO accessDTO, @PathVariable String env) {\n        Route route = routeService.findRoute(id);\n        if (Objects.isNull(route)) {\n            throw new ResourceNotFoundException(\"Unknown ID!\");\n        }\n        Map<String, RouteRule.MatchPair> when = new HashMap<>();\n        RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n        when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n        if (accessDTO.getWhitelist() != null) {\n            matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n        }\n        if (accessDTO.getBlacklist() != null) {\n            matchPair.getMatches().addAll(accessDTO.getBlacklist());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        RouteRule.contidionToString(sb, when);\n        route.setMatchRule(sb.toString());\n\n        routeService.updateRoute(route);\n    }\n}",
        "package": "package org.apache.dubbo.admin.controller;",
        "tree_path": "AccessesController",
        "name": "AccessesController",
        "modifiers": "@RestController\n@RequestMapping(\"/api/{env}/rules/access\")\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    private static final Logger logger = LoggerFactory.getLogger(AccessesController.class);\n\n    private final RouteService routeService;\n\n    @Autowired\n    public AccessesController(RouteService routeService) {\n        this.routeService = routeService;\n    }\n\n    @RequestMapping(method = RequestMethod.GET)\n    public List<AccessDTO> searchAccess(@RequestParam(required = false) String service, @PathVariable String env) throws ParseException {\n        List<AccessDTO> result = new ArrayList<>();\n        List<Route> routes = new ArrayList<>();\n        if (StringUtils.isNotBlank(service)) {\n            Route route = routeService.getBlackwhitelistRouteByService(service.trim());\n            if (route != null) {\n                routes.add(route);\n            }\n        } else {\n            routes = routeService.findAllForceRoute();\n        }\n\n        for (Route route : routes) {\n            // Match WhiteBlackList Route\n            if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n                AccessDTO accessDTO = new AccessDTO();\n                accessDTO.setId(route.getHash());\n                accessDTO.setService(route.getService());\n                Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n                for (String key : when.keySet()) {\n                    accessDTO.setWhitelist(when.get(key).getUnmatches());\n                    accessDTO.setBlacklist(when.get(key).getMatches());\n                }\n                result.add(accessDTO);\n            }\n        }\n        return result;\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\n    public AccessDTO detailAccess(@PathVariable String id, @PathVariable String env) throws ParseException {\n        Route route = routeService.findRoute(id);\n        if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n            AccessDTO accessDTO = new AccessDTO();\n            accessDTO.setId(route.getHash());\n            accessDTO.setService(route.getService());\n            Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n            for (String key : when.keySet()) {\n                accessDTO.setWhitelist(when.get(key).getUnmatches());\n                accessDTO.setBlacklist(when.get(key).getMatches());\n            }\n            return accessDTO;\n        } else {\n            return null;\n        }\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\n    public void deleteAccess(@PathVariable String id, @PathVariable String env) {\n        routeService.deleteRoute(id);\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    @ResponseStatus(HttpStatus.CREATED)\n    public void createAccess(@RequestBody AccessDTO accessDTO, @PathVariable String env) {\n        if (StringUtils.isBlank(accessDTO.getService())) {\n            throw new ParamValidationException(\"Service is required.\");\n        }\n        if (accessDTO.getBlacklist() == null && accessDTO.getWhitelist() == null) {\n            throw new ParamValidationException(\"One of Blacklist/Whitelist is required.\");\n        }\n\n        Route route = routeService.getBlackwhitelistRouteByService(accessDTO.getService());\n\n        if (route != null) {\n            throw new ParamValidationException(accessDTO.getService() + \" is existed.\");\n        }\n\n        route = new Route();\n        route.setService(accessDTO.getService());\n        route.setForce(true);\n        route.setName(accessDTO.getService() + \" \" + AccessDTO.KEY_BLACK_WHITE_LIST);\n        route.setFilterRule(\"false\");\n        route.setEnabled(true);\n\n        Map<String, RouteRule.MatchPair> when = new HashMap<>();\n        RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n        when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n        if (accessDTO.getWhitelist() != null) {\n            matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n        }\n        if (accessDTO.getBlacklist() != null) {\n            matchPair.getMatches().addAll(accessDTO.getBlacklist());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        RouteRule.contidionToString(sb, when);\n        route.setMatchRule(sb.toString());\n        routeService.createRoute(route);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\n    public void updateAccess(@PathVariable String id, @RequestBody AccessDTO accessDTO, @PathVariable String env) {\n        Route route = routeService.findRoute(id);\n        if (Objects.isNull(route)) {\n            throw new ResourceNotFoundException(\"Unknown ID!\");\n        }\n        Map<String, RouteRule.MatchPair> when = new HashMap<>();\n        RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n        when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n        if (accessDTO.getWhitelist() != null) {\n            matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n        }\n        if (accessDTO.getBlacklist() != null) {\n            matchPair.getMatches().addAll(accessDTO.getBlacklist());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        RouteRule.contidionToString(sb, when);\n        route.setMatchRule(sb.toString());\n\n        routeService.updateRoute(route);\n    }\n}",
        "start_point": {
            "row": 34,
            "column": 0
        },
        "end_point": {
            "row": 162,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Autowired\npublic AccessesController(RouteService routeService) {\n    this.routeService = routeService;\n}",
                "name": "AccessesController",
                "modifiers": "@Autowired\n    public",
                "parameters": [
                    {
                        "type": "RouteService",
                        "name": "routeService"
                    }
                ],
                "body": "{\n    this.routeService = routeService;\n}",
                "constructor": true,
                "start_point": {
                    "row": 41,
                    "column": 4
                },
                "end_point": {
                    "row": 44,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(method = RequestMethod.GET)\npublic List<AccessDTO> searchAccess(@RequestParam(required = false) String service, @PathVariable String env) throws ParseException {\n    List<AccessDTO> result = new ArrayList<>();\n    List<Route> routes = new ArrayList<>();\n    if (StringUtils.isNotBlank(service)) {\n        Route route = routeService.getBlackwhitelistRouteByService(service.trim());\n        if (route != null) {\n            routes.add(route);\n        }\n    } else {\n        routes = routeService.findAllForceRoute();\n    }\n\n    for (Route route : routes) {\n        // Match WhiteBlackList Route\n        if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n            AccessDTO accessDTO = new AccessDTO();\n            accessDTO.setId(route.getHash());\n            accessDTO.setService(route.getService());\n            Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n            for (String key : when.keySet()) {\n                accessDTO.setWhitelist(when.get(key).getUnmatches());\n                accessDTO.setBlacklist(when.get(key).getMatches());\n            }\n            result.add(accessDTO);\n        }\n    }\n    return result;\n}",
                "name": "searchAccess",
                "modifiers": "@RequestMapping(method = RequestMethod.GET)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@RequestParam(required = false)",
                        "name": "String"
                    },
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    }
                ],
                "body": "{\n    List<AccessDTO> result = new ArrayList<>();\n    List<Route> routes = new ArrayList<>();\n    if (StringUtils.isNotBlank(service)) {\n        Route route = routeService.getBlackwhitelistRouteByService(service.trim());\n        if (route != null) {\n            routes.add(route);\n        }\n    } else {\n        routes = routeService.findAllForceRoute();\n    }\n\n    for (Route route : routes) {\n        // Match WhiteBlackList Route\n        if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n            AccessDTO accessDTO = new AccessDTO();\n            accessDTO.setId(route.getHash());\n            accessDTO.setService(route.getService());\n            Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n            for (String key : when.keySet()) {\n                accessDTO.setWhitelist(when.get(key).getUnmatches());\n                accessDTO.setBlacklist(when.get(key).getMatches());\n            }\n            result.add(accessDTO);\n        }\n    }\n    return result;\n}",
                "start_point": {
                    "row": 46,
                    "column": 4
                },
                "end_point": {
                    "row": 74,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\npublic AccessDTO detailAccess(@PathVariable String id, @PathVariable String env) throws ParseException {\n    Route route = routeService.findRoute(id);\n    if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n        AccessDTO accessDTO = new AccessDTO();\n        accessDTO.setId(route.getHash());\n        accessDTO.setService(route.getService());\n        Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n        for (String key : when.keySet()) {\n            accessDTO.setWhitelist(when.get(key).getUnmatches());\n            accessDTO.setBlacklist(when.get(key).getMatches());\n        }\n        return accessDTO;\n    } else {\n        return null;\n    }\n}",
                "name": "detailAccess",
                "modifiers": "@RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\n    public",
                "return_type": "AccessDTO",
                "parameters": [
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    },
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    }
                ],
                "body": "{\n    Route route = routeService.findRoute(id);\n    if (route.getName().endsWith(AccessDTO.KEY_BLACK_WHITE_LIST)) {\n        AccessDTO accessDTO = new AccessDTO();\n        accessDTO.setId(route.getHash());\n        accessDTO.setService(route.getService());\n        Map<String, RouteRule.MatchPair> when = RouteRule.parseRule(route.getMatchRule());\n        for (String key : when.keySet()) {\n            accessDTO.setWhitelist(when.get(key).getUnmatches());\n            accessDTO.setBlacklist(when.get(key).getMatches());\n        }\n        return accessDTO;\n    } else {\n        return null;\n    }\n}",
                "start_point": {
                    "row": 76,
                    "column": 4
                },
                "end_point": {
                    "row": 92,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\npublic void deleteAccess(@PathVariable String id, @PathVariable String env) {\n    routeService.deleteRoute(id);\n}",
                "name": "deleteAccess",
                "modifiers": "@RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    },
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    }
                ],
                "body": "{\n    routeService.deleteRoute(id);\n}",
                "start_point": {
                    "row": 94,
                    "column": 4
                },
                "end_point": {
                    "row": 97,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(method = RequestMethod.POST)\n@ResponseStatus(HttpStatus.CREATED)\npublic void createAccess(@RequestBody AccessDTO accessDTO, @PathVariable String env) {\n    if (StringUtils.isBlank(accessDTO.getService())) {\n        throw new ParamValidationException(\"Service is required.\");\n    }\n    if (accessDTO.getBlacklist() == null && accessDTO.getWhitelist() == null) {\n        throw new ParamValidationException(\"One of Blacklist/Whitelist is required.\");\n    }\n\n    Route route = routeService.getBlackwhitelistRouteByService(accessDTO.getService());\n\n    if (route != null) {\n        throw new ParamValidationException(accessDTO.getService() + \" is existed.\");\n    }\n\n    route = new Route();\n    route.setService(accessDTO.getService());\n    route.setForce(true);\n    route.setName(accessDTO.getService() + \" \" + AccessDTO.KEY_BLACK_WHITE_LIST);\n    route.setFilterRule(\"false\");\n    route.setEnabled(true);\n\n    Map<String, RouteRule.MatchPair> when = new HashMap<>();\n    RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n    when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n    if (accessDTO.getWhitelist() != null) {\n        matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n    }\n    if (accessDTO.getBlacklist() != null) {\n        matchPair.getMatches().addAll(accessDTO.getBlacklist());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    RouteRule.contidionToString(sb, when);\n    route.setMatchRule(sb.toString());\n    routeService.createRoute(route);\n}",
                "name": "createAccess",
                "modifiers": "@RequestMapping(method = RequestMethod.POST)\n    @ResponseStatus(HttpStatus.CREATED)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@RequestBody",
                        "name": "AccessDTO"
                    },
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    }
                ],
                "body": "{\n    if (StringUtils.isBlank(accessDTO.getService())) {\n        throw new ParamValidationException(\"Service is required.\");\n    }\n    if (accessDTO.getBlacklist() == null && accessDTO.getWhitelist() == null) {\n        throw new ParamValidationException(\"One of Blacklist/Whitelist is required.\");\n    }\n\n    Route route = routeService.getBlackwhitelistRouteByService(accessDTO.getService());\n\n    if (route != null) {\n        throw new ParamValidationException(accessDTO.getService() + \" is existed.\");\n    }\n\n    route = new Route();\n    route.setService(accessDTO.getService());\n    route.setForce(true);\n    route.setName(accessDTO.getService() + \" \" + AccessDTO.KEY_BLACK_WHITE_LIST);\n    route.setFilterRule(\"false\");\n    route.setEnabled(true);\n\n    Map<String, RouteRule.MatchPair> when = new HashMap<>();\n    RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n    when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n    if (accessDTO.getWhitelist() != null) {\n        matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n    }\n    if (accessDTO.getBlacklist() != null) {\n        matchPair.getMatches().addAll(accessDTO.getBlacklist());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    RouteRule.contidionToString(sb, when);\n    route.setMatchRule(sb.toString());\n    routeService.createRoute(route);\n}",
                "start_point": {
                    "row": 99,
                    "column": 4
                },
                "end_point": {
                    "row": 137,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\npublic void updateAccess(@PathVariable String id, @RequestBody AccessDTO accessDTO, @PathVariable String env) {\n    Route route = routeService.findRoute(id);\n    if (Objects.isNull(route)) {\n        throw new ResourceNotFoundException(\"Unknown ID!\");\n    }\n    Map<String, RouteRule.MatchPair> when = new HashMap<>();\n    RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n    when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n    if (accessDTO.getWhitelist() != null) {\n        matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n    }\n    if (accessDTO.getBlacklist() != null) {\n        matchPair.getMatches().addAll(accessDTO.getBlacklist());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    RouteRule.contidionToString(sb, when);\n    route.setMatchRule(sb.toString());\n\n    routeService.updateRoute(route);\n}",
                "name": "updateAccess",
                "modifiers": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    },
                    {
                        "type": "@RequestBody",
                        "name": "AccessDTO"
                    },
                    {
                        "type": "@PathVariable",
                        "name": "String"
                    }
                ],
                "body": "{\n    Route route = routeService.findRoute(id);\n    if (Objects.isNull(route)) {\n        throw new ResourceNotFoundException(\"Unknown ID!\");\n    }\n    Map<String, RouteRule.MatchPair> when = new HashMap<>();\n    RouteRule.MatchPair matchPair = new RouteRule.MatchPair(new HashSet<>(), new HashSet<>());\n    when.put(Route.KEY_CONSUMER_HOST, matchPair);\n\n    if (accessDTO.getWhitelist() != null) {\n        matchPair.getUnmatches().addAll(accessDTO.getWhitelist());\n    }\n    if (accessDTO.getBlacklist() != null) {\n        matchPair.getMatches().addAll(accessDTO.getBlacklist());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    RouteRule.contidionToString(sb, when);\n    route.setMatchRule(sb.toString());\n\n    routeService.updateRoute(route);\n}",
                "start_point": {
                    "row": 139,
                    "column": 4
                },
                "end_point": {
                    "row": 161,
                    "column": 5
                }
            }
        ]
    }
]