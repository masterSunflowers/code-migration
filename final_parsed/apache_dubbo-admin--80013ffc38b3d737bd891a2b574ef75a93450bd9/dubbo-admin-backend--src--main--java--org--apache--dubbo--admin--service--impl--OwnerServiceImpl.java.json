[
    {
        "repo_name": "apache_dubbo-admin",
        "commit": "80013ffc38b3d737bd891a2b574ef75a93450bd9",
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/service/impl/OwnerServiceImpl.java",
        "definition": "@Component\npublic class OwnerServiceImpl extends AbstractService implements OwnerService {\n\n    @Autowired\n    ProviderService providerService;\n\n    @Autowired\n    OverrideService overrideService;\n\n    public List<String> findAllServiceNames() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public List<String> findServiceNamesByUsername(String username) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public List<String> findUsernamesByServiceName(String serviceName) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public List<Owner> findByService(String serviceName) {\n        List<Provider> pList = providerService.findByService(serviceName);\n        List<Override> cList = overrideService.findByServiceAndAddress(serviceName, Constants.ANYHOST_VALUE);\n        return toOverrideLiset(pList, cList);\n    }\n\n    public List<Owner> findAll() {\n        List<Provider> pList = providerService.findAll();\n        List<Override> cList = overrideService.findAll();\n        return toOverrideLiset(pList, cList);\n    }\n\n    public Owner findById(String id) {\n\n        return null;\n    }\n\n    private List<Owner> toOverrideLiset(List<Provider> pList, List<Override> cList) {\n        Map<String, Owner> oList = new HashMap<String, Owner>();\n        for (Provider p : pList) {\n            if (p.getUsername() != null) {\n                for (String username : Constants.COMMA_SPLIT_PATTERN.split(p.getUsername())) {\n                    Owner o = new Owner();\n                    o.setService(p.getService());\n                    o.setUsername(username);\n                    oList.put(o.getService() + \"/\" + o.getUsername(), o);\n                }\n            }\n        }\n        for (Override c : cList) {\n            Map<String, String> params = StringUtils.parseQueryString(c.getParams());\n            String usernames = params.get(\"owner\");\n            if (usernames != null && usernames.length() > 0) {\n                for (String username : Constants.COMMA_SPLIT_PATTERN.split(usernames)) {\n                    Owner o = new Owner();\n                    o.setService(c.getService());\n                    o.setUsername(username);\n                    oList.put(o.getService() + \"/\" + o.getUsername(), o);\n                }\n            }\n        }\n        return new ArrayList<Owner>(oList.values());\n    }\n\n    public void saveOwner(Owner owner) {\n        List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n        if (overrides == null || overrides.size() == 0) {\n            Override override = new Override();\n            override.setAddress(Constants.ANYHOST_VALUE);\n            override.setService(owner.getService());\n            override.setEnabled(true);\n            override.setParams(\"owner=\" + owner.getUsername());\n            overrideService.saveOverride(override);\n        } else {\n            for (Override override : overrides) {\n                Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                String usernames = params.get(\"owner\");\n                if (usernames == null || usernames.length() == 0) {\n                    usernames = owner.getUsername();\n                } else {\n                    usernames = usernames + \",\" + owner.getUsername();\n                }\n                params.put(\"owner\", usernames);\n                override.setParams(StringUtils.toQueryString(params));\n                overrideService.updateOverride(override);\n            }\n        }\n    }\n\n    public void deleteOwner(Owner owner) {\n        List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n        if (overrides == null || overrides.size() == 0) {\n            Override override = new Override();\n            override.setAddress(Constants.ANYHOST_VALUE);\n            override.setService(owner.getService());\n            override.setEnabled(true);\n            override.setParams(\"owner=\" + owner.getUsername());\n            overrideService.saveOverride(override);\n        } else {\n            for (Override override : overrides) {\n                Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                String usernames = params.get(\"owner\");\n                if (usernames != null && usernames.length() > 0) {\n                    if (usernames.equals(owner.getUsername())) {\n                        params.remove(\"owner\");\n                    } else {\n                        usernames = usernames.replace(owner.getUsername() + \",\", \"\").replace(\",\" + owner.getUsername(), \"\");\n                        params.put(\"owner\", usernames);\n                    }\n                    if (params.size() > 0) {\n                        override.setParams(StringUtils.toQueryString(params));\n                        overrideService.updateOverride(override);\n                    } else {\n                        overrideService.deleteOverride(override.getHash());\n                    }\n                }\n            }\n        }\n    }\n\n}",
        "package": "package org.apache.dubbo.admin.service.impl;",
        "tree_path": "OwnerServiceImpl",
        "name": "OwnerServiceImpl",
        "modifiers": "@Component\npublic",
        "superclass": "extends AbstractService",
        "super_interfaces": "implements OwnerService",
        "body": "{\n\n    @Autowired\n    ProviderService providerService;\n\n    @Autowired\n    OverrideService overrideService;\n\n    public List<String> findAllServiceNames() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public List<String> findServiceNamesByUsername(String username) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public List<String> findUsernamesByServiceName(String serviceName) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public List<Owner> findByService(String serviceName) {\n        List<Provider> pList = providerService.findByService(serviceName);\n        List<Override> cList = overrideService.findByServiceAndAddress(serviceName, Constants.ANYHOST_VALUE);\n        return toOverrideLiset(pList, cList);\n    }\n\n    public List<Owner> findAll() {\n        List<Provider> pList = providerService.findAll();\n        List<Override> cList = overrideService.findAll();\n        return toOverrideLiset(pList, cList);\n    }\n\n    public Owner findById(String id) {\n\n        return null;\n    }\n\n    private List<Owner> toOverrideLiset(List<Provider> pList, List<Override> cList) {\n        Map<String, Owner> oList = new HashMap<String, Owner>();\n        for (Provider p : pList) {\n            if (p.getUsername() != null) {\n                for (String username : Constants.COMMA_SPLIT_PATTERN.split(p.getUsername())) {\n                    Owner o = new Owner();\n                    o.setService(p.getService());\n                    o.setUsername(username);\n                    oList.put(o.getService() + \"/\" + o.getUsername(), o);\n                }\n            }\n        }\n        for (Override c : cList) {\n            Map<String, String> params = StringUtils.parseQueryString(c.getParams());\n            String usernames = params.get(\"owner\");\n            if (usernames != null && usernames.length() > 0) {\n                for (String username : Constants.COMMA_SPLIT_PATTERN.split(usernames)) {\n                    Owner o = new Owner();\n                    o.setService(c.getService());\n                    o.setUsername(username);\n                    oList.put(o.getService() + \"/\" + o.getUsername(), o);\n                }\n            }\n        }\n        return new ArrayList<Owner>(oList.values());\n    }\n\n    public void saveOwner(Owner owner) {\n        List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n        if (overrides == null || overrides.size() == 0) {\n            Override override = new Override();\n            override.setAddress(Constants.ANYHOST_VALUE);\n            override.setService(owner.getService());\n            override.setEnabled(true);\n            override.setParams(\"owner=\" + owner.getUsername());\n            overrideService.saveOverride(override);\n        } else {\n            for (Override override : overrides) {\n                Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                String usernames = params.get(\"owner\");\n                if (usernames == null || usernames.length() == 0) {\n                    usernames = owner.getUsername();\n                } else {\n                    usernames = usernames + \",\" + owner.getUsername();\n                }\n                params.put(\"owner\", usernames);\n                override.setParams(StringUtils.toQueryString(params));\n                overrideService.updateOverride(override);\n            }\n        }\n    }\n\n    public void deleteOwner(Owner owner) {\n        List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n        if (overrides == null || overrides.size() == 0) {\n            Override override = new Override();\n            override.setAddress(Constants.ANYHOST_VALUE);\n            override.setService(owner.getService());\n            override.setEnabled(true);\n            override.setParams(\"owner=\" + owner.getUsername());\n            overrideService.saveOverride(override);\n        } else {\n            for (Override override : overrides) {\n                Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                String usernames = params.get(\"owner\");\n                if (usernames != null && usernames.length() > 0) {\n                    if (usernames.equals(owner.getUsername())) {\n                        params.remove(\"owner\");\n                    } else {\n                        usernames = usernames.replace(owner.getUsername() + \",\", \"\").replace(\",\" + owner.getUsername(), \"\");\n                        params.put(\"owner\", usernames);\n                    }\n                    if (params.size() > 0) {\n                        override.setParams(StringUtils.toQueryString(params));\n                        overrideService.updateOverride(override);\n                    } else {\n                        overrideService.deleteOverride(override.getHash());\n                    }\n                }\n            }\n        }\n    }\n\n}",
        "start_point": {
            "row": 34,
            "column": 0
        },
        "end_point": {
            "row": 158,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public List<String> findAllServiceNames() {\n    // TODO Auto-generated method stub\n    return null;\n}",
                "name": "findAllServiceNames",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    // TODO Auto-generated method stub\n    return null;\n}",
                "start_point": {
                    "row": 43,
                    "column": 4
                },
                "end_point": {
                    "row": 46,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findServiceNamesByUsername(String username) {\n    // TODO Auto-generated method stub\n    return null;\n}",
                "name": "findServiceNamesByUsername",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "username"
                    }
                ],
                "body": "{\n    // TODO Auto-generated method stub\n    return null;\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 51,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findUsernamesByServiceName(String serviceName) {\n    // TODO Auto-generated method stub\n    return null;\n}",
                "name": "findUsernamesByServiceName",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "serviceName"
                    }
                ],
                "body": "{\n    // TODO Auto-generated method stub\n    return null;\n}",
                "start_point": {
                    "row": 53,
                    "column": 4
                },
                "end_point": {
                    "row": 56,
                    "column": 5
                }
            },
            {
                "definition": "public List<Owner> findByService(String serviceName) {\n    List<Provider> pList = providerService.findByService(serviceName);\n    List<Override> cList = overrideService.findByServiceAndAddress(serviceName, Constants.ANYHOST_VALUE);\n    return toOverrideLiset(pList, cList);\n}",
                "name": "findByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "serviceName"
                    }
                ],
                "body": "{\n    List<Provider> pList = providerService.findByService(serviceName);\n    List<Override> cList = overrideService.findByServiceAndAddress(serviceName, Constants.ANYHOST_VALUE);\n    return toOverrideLiset(pList, cList);\n}",
                "start_point": {
                    "row": 58,
                    "column": 4
                },
                "end_point": {
                    "row": 62,
                    "column": 5
                }
            },
            {
                "definition": "public List<Owner> findAll() {\n    List<Provider> pList = providerService.findAll();\n    List<Override> cList = overrideService.findAll();\n    return toOverrideLiset(pList, cList);\n}",
                "name": "findAll",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    List<Provider> pList = providerService.findAll();\n    List<Override> cList = overrideService.findAll();\n    return toOverrideLiset(pList, cList);\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "public Owner findById(String id) {\n\n    return null;\n}",
                "name": "findById",
                "modifiers": "public",
                "return_type": "Owner",
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n\n    return null;\n}",
                "start_point": {
                    "row": 70,
                    "column": 4
                },
                "end_point": {
                    "row": 73,
                    "column": 5
                }
            },
            {
                "definition": "private List<Owner> toOverrideLiset(List<Provider> pList, List<Override> cList) {\n    Map<String, Owner> oList = new HashMap<String, Owner>();\n    for (Provider p : pList) {\n        if (p.getUsername() != null) {\n            for (String username : Constants.COMMA_SPLIT_PATTERN.split(p.getUsername())) {\n                Owner o = new Owner();\n                o.setService(p.getService());\n                o.setUsername(username);\n                oList.put(o.getService() + \"/\" + o.getUsername(), o);\n            }\n        }\n    }\n    for (Override c : cList) {\n        Map<String, String> params = StringUtils.parseQueryString(c.getParams());\n        String usernames = params.get(\"owner\");\n        if (usernames != null && usernames.length() > 0) {\n            for (String username : Constants.COMMA_SPLIT_PATTERN.split(usernames)) {\n                Owner o = new Owner();\n                o.setService(c.getService());\n                o.setUsername(username);\n                oList.put(o.getService() + \"/\" + o.getUsername(), o);\n            }\n        }\n    }\n    return new ArrayList<Owner>(oList.values());\n}",
                "name": "toOverrideLiset",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "List<Provider>",
                        "name": "pList"
                    },
                    {
                        "type": "List<Override>",
                        "name": "cList"
                    }
                ],
                "body": "{\n    Map<String, Owner> oList = new HashMap<String, Owner>();\n    for (Provider p : pList) {\n        if (p.getUsername() != null) {\n            for (String username : Constants.COMMA_SPLIT_PATTERN.split(p.getUsername())) {\n                Owner o = new Owner();\n                o.setService(p.getService());\n                o.setUsername(username);\n                oList.put(o.getService() + \"/\" + o.getUsername(), o);\n            }\n        }\n    }\n    for (Override c : cList) {\n        Map<String, String> params = StringUtils.parseQueryString(c.getParams());\n        String usernames = params.get(\"owner\");\n        if (usernames != null && usernames.length() > 0) {\n            for (String username : Constants.COMMA_SPLIT_PATTERN.split(usernames)) {\n                Owner o = new Owner();\n                o.setService(c.getService());\n                o.setUsername(username);\n                oList.put(o.getService() + \"/\" + o.getUsername(), o);\n            }\n        }\n    }\n    return new ArrayList<Owner>(oList.values());\n}",
                "start_point": {
                    "row": 75,
                    "column": 4
                },
                "end_point": {
                    "row": 100,
                    "column": 5
                }
            },
            {
                "definition": "public void saveOwner(Owner owner) {\n    List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n    if (overrides == null || overrides.size() == 0) {\n        Override override = new Override();\n        override.setAddress(Constants.ANYHOST_VALUE);\n        override.setService(owner.getService());\n        override.setEnabled(true);\n        override.setParams(\"owner=\" + owner.getUsername());\n        overrideService.saveOverride(override);\n    } else {\n        for (Override override : overrides) {\n            Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n            String usernames = params.get(\"owner\");\n            if (usernames == null || usernames.length() == 0) {\n                usernames = owner.getUsername();\n            } else {\n                usernames = usernames + \",\" + owner.getUsername();\n            }\n            params.put(\"owner\", usernames);\n            override.setParams(StringUtils.toQueryString(params));\n            overrideService.updateOverride(override);\n        }\n    }\n}",
                "name": "saveOwner",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Owner",
                        "name": "owner"
                    }
                ],
                "body": "{\n    List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n    if (overrides == null || overrides.size() == 0) {\n        Override override = new Override();\n        override.setAddress(Constants.ANYHOST_VALUE);\n        override.setService(owner.getService());\n        override.setEnabled(true);\n        override.setParams(\"owner=\" + owner.getUsername());\n        overrideService.saveOverride(override);\n    } else {\n        for (Override override : overrides) {\n            Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n            String usernames = params.get(\"owner\");\n            if (usernames == null || usernames.length() == 0) {\n                usernames = owner.getUsername();\n            } else {\n                usernames = usernames + \",\" + owner.getUsername();\n            }\n            params.put(\"owner\", usernames);\n            override.setParams(StringUtils.toQueryString(params));\n            overrideService.updateOverride(override);\n        }\n    }\n}",
                "start_point": {
                    "row": 102,
                    "column": 4
                },
                "end_point": {
                    "row": 125,
                    "column": 5
                }
            },
            {
                "definition": "public void deleteOwner(Owner owner) {\n    List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n    if (overrides == null || overrides.size() == 0) {\n        Override override = new Override();\n        override.setAddress(Constants.ANYHOST_VALUE);\n        override.setService(owner.getService());\n        override.setEnabled(true);\n        override.setParams(\"owner=\" + owner.getUsername());\n        overrideService.saveOverride(override);\n    } else {\n        for (Override override : overrides) {\n            Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n            String usernames = params.get(\"owner\");\n            if (usernames != null && usernames.length() > 0) {\n                if (usernames.equals(owner.getUsername())) {\n                    params.remove(\"owner\");\n                } else {\n                    usernames = usernames.replace(owner.getUsername() + \",\", \"\").replace(\",\" + owner.getUsername(), \"\");\n                    params.put(\"owner\", usernames);\n                }\n                if (params.size() > 0) {\n                    override.setParams(StringUtils.toQueryString(params));\n                    overrideService.updateOverride(override);\n                } else {\n                    overrideService.deleteOverride(override.getHash());\n                }\n            }\n        }\n    }\n}",
                "name": "deleteOwner",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Owner",
                        "name": "owner"
                    }
                ],
                "body": "{\n    List<Override> overrides = overrideService.findByServiceAndAddress(owner.getService(), Constants.ANYHOST_VALUE);\n    if (overrides == null || overrides.size() == 0) {\n        Override override = new Override();\n        override.setAddress(Constants.ANYHOST_VALUE);\n        override.setService(owner.getService());\n        override.setEnabled(true);\n        override.setParams(\"owner=\" + owner.getUsername());\n        overrideService.saveOverride(override);\n    } else {\n        for (Override override : overrides) {\n            Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n            String usernames = params.get(\"owner\");\n            if (usernames != null && usernames.length() > 0) {\n                if (usernames.equals(owner.getUsername())) {\n                    params.remove(\"owner\");\n                } else {\n                    usernames = usernames.replace(owner.getUsername() + \",\", \"\").replace(\",\" + owner.getUsername(), \"\");\n                    params.put(\"owner\", usernames);\n                }\n                if (params.size() > 0) {\n                    override.setParams(StringUtils.toQueryString(params));\n                    overrideService.updateOverride(override);\n                } else {\n                    overrideService.deleteOverride(override.getHash());\n                }\n            }\n        }\n    }\n}",
                "start_point": {
                    "row": 127,
                    "column": 4
                },
                "end_point": {
                    "row": 156,
                    "column": 5
                }
            }
        ]
    }
]