[
    {
        "repo_name": "hippo-band_hippo",
        "commit": "dbca5a7b0b89b37a528542d9351647952adfa572",
        "rev_path": "hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java",
        "definition": "public class HippoCommand extends HystrixCommand<Object> {\n\n\tprivate HippoRequest hippoRequest;\n\n\tprivate int timeOut;\n\n\tprivate int retryTimes;\n\n\tprivate ServiceGovern serviceGovern;\n\n\tprivate HippoFailPolicy<?> hippoFailPolicy;\n\n\tpublic HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes, boolean isCircuitBreaker,\n\t\t\tint semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy, ServiceGovern serviceGovern)\n\t\t\tthrows InstantiationException, IllegalAccessException {\n\n\t\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\t\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\t\tthis.hippoRequest = hippoRequest;\n\t\tthis.timeOut = timeOut;\n\t\tthis.retryTimes = retryTimes;\n\t\tthis.serviceGovern = serviceGovern;\n\t\tinit(downgradeStrategy);\n\n\t}\n\n\tprivate void init(Class<?> downgradeStrategy) throws InstantiationException, IllegalAccessException {\n\n\t\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\t\tif (bean == null) {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t\t} else {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t\t}\n\t\t} else {\n\t\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t\t}\n\t}\n\n\t@Override\n\tprotected Object run() throws Exception {\n\n\t\ttry {\n\t\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t\t} catch (Throwable e) {\n\t\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t\t}\n\n\t}\n\n\t@Override\n\tprotected Object getFallback() {\n\t\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n\t}\n\n\tpublic Object getHippoResponse(HippoRequest request, int timeout, int retryTimes) throws Throwable {\n\n\t\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\t\tint index = retryTimes;\n\t\tif (retryTimes >= 5) {\n\t\t\tindex = 5;\n\t\t}\n\t\tHippoResponse result = getResult(request, timeout);\n\t\tif (result.isError()) {\n\t\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t\t} else {\n\t\t\t\tthrow result.getThrowable();\n\t\t\t}\n\t\t}\n\t\treturn result.getResult();\n\t}\n\n\tprivate HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n\t\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\t\tserviceGovern);\n\t\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\t\treturn callback.getResult();\n\t}\n\n}",
        "package": "package com.github.hippo.hystrix;",
        "tree_path": "HippoCommand",
        "name": "HippoCommand",
        "modifiers": "public",
        "superclass": "extends HystrixCommand<Object>",
        "super_interfaces": null,
        "body": "{\n\n\tprivate HippoRequest hippoRequest;\n\n\tprivate int timeOut;\n\n\tprivate int retryTimes;\n\n\tprivate ServiceGovern serviceGovern;\n\n\tprivate HippoFailPolicy<?> hippoFailPolicy;\n\n\tpublic HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes, boolean isCircuitBreaker,\n\t\t\tint semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy, ServiceGovern serviceGovern)\n\t\t\tthrows InstantiationException, IllegalAccessException {\n\n\t\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\t\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\t\tthis.hippoRequest = hippoRequest;\n\t\tthis.timeOut = timeOut;\n\t\tthis.retryTimes = retryTimes;\n\t\tthis.serviceGovern = serviceGovern;\n\t\tinit(downgradeStrategy);\n\n\t}\n\n\tprivate void init(Class<?> downgradeStrategy) throws InstantiationException, IllegalAccessException {\n\n\t\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\t\tif (bean == null) {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t\t} else {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t\t}\n\t\t} else {\n\t\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t\t}\n\t}\n\n\t@Override\n\tprotected Object run() throws Exception {\n\n\t\ttry {\n\t\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t\t} catch (Throwable e) {\n\t\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t\t}\n\n\t}\n\n\t@Override\n\tprotected Object getFallback() {\n\t\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n\t}\n\n\tpublic Object getHippoResponse(HippoRequest request, int timeout, int retryTimes) throws Throwable {\n\n\t\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\t\tint index = retryTimes;\n\t\tif (retryTimes >= 5) {\n\t\t\tindex = 5;\n\t\t}\n\t\tHippoResponse result = getResult(request, timeout);\n\t\tif (result.isError()) {\n\t\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t\t} else {\n\t\t\t\tthrow result.getThrowable();\n\t\t\t}\n\t\t}\n\t\treturn result.getResult();\n\t}\n\n\tprivate HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n\t\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\t\tserviceGovern);\n\t\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\t\treturn callback.getResult();\n\t}\n\n}",
        "start_point": {
            "row": 22,
            "column": 0
        },
        "end_point": {
            "row": 116,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes, boolean isCircuitBreaker,\n\t\tint semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy, ServiceGovern serviceGovern)\n\t\tthrows InstantiationException, IllegalAccessException {\n\n\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\tthis.hippoRequest = hippoRequest;\n\tthis.timeOut = timeOut;\n\tthis.retryTimes = retryTimes;\n\tthis.serviceGovern = serviceGovern;\n\tinit(downgradeStrategy);\n\n}",
                "name": "HippoCommand",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "hippoRequest"
                    },
                    {
                        "type": "int",
                        "name": "timeOut"
                    },
                    {
                        "type": "int",
                        "name": "retryTimes"
                    },
                    {
                        "type": "boolean",
                        "name": "isCircuitBreaker"
                    },
                    {
                        "type": "int",
                        "name": "semaphoreMaxConcurrentRequests"
                    },
                    {
                        "type": "Class<?>",
                        "name": "downgradeStrategy"
                    },
                    {
                        "type": "ServiceGovern",
                        "name": "serviceGovern"
                    }
                ],
                "body": "{\n\n\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\tthis.hippoRequest = hippoRequest;\n\tthis.timeOut = timeOut;\n\tthis.retryTimes = retryTimes;\n\tthis.serviceGovern = serviceGovern;\n\tinit(downgradeStrategy);\n\n}",
                "constructor": true,
                "start_point": {
                    "row": 34,
                    "column": 1
                },
                "end_point": {
                    "row": 56,
                    "column": 2
                }
            },
            {
                "definition": "private void init(Class<?> downgradeStrategy) throws InstantiationException, IllegalAccessException {\n\n\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\tif (bean == null) {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t} else {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t}\n\t} else {\n\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t}\n}",
                "name": "init",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Class<?>",
                        "name": "downgradeStrategy"
                    }
                ],
                "body": "{\n\n\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\tif (bean == null) {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t} else {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t}\n\t} else {\n\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t}\n}",
                "start_point": {
                    "row": 58,
                    "column": 1
                },
                "end_point": {
                    "row": 71,
                    "column": 2
                }
            },
            {
                "definition": "@Override\nprotected Object run() throws Exception {\n\n\ttry {\n\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t} catch (Throwable e) {\n\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t}\n\n}",
                "name": "run",
                "modifiers": "@Override\n\tprotected",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n\n\ttry {\n\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t} catch (Throwable e) {\n\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t}\n\n}",
                "start_point": {
                    "row": 73,
                    "column": 1
                },
                "end_point": {
                    "row": 83,
                    "column": 2
                }
            },
            {
                "definition": "@Override\nprotected Object getFallback() {\n\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n}",
                "name": "getFallback",
                "modifiers": "@Override\n\tprotected",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n}",
                "start_point": {
                    "row": 85,
                    "column": 1
                },
                "end_point": {
                    "row": 88,
                    "column": 2
                }
            },
            {
                "definition": "public Object getHippoResponse(HippoRequest request, int timeout, int retryTimes) throws Throwable {\n\n\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\tint index = retryTimes;\n\tif (retryTimes >= 5) {\n\t\tindex = 5;\n\t}\n\tHippoResponse result = getResult(request, timeout);\n\tif (result.isError()) {\n\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t} else {\n\t\t\tthrow result.getThrowable();\n\t\t}\n\t}\n\treturn result.getResult();\n}",
                "name": "getHippoResponse",
                "modifiers": "public",
                "return_type": "Object",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "timeout"
                    },
                    {
                        "type": "int",
                        "name": "retryTimes"
                    }
                ],
                "body": "{\n\n\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\tint index = retryTimes;\n\tif (retryTimes >= 5) {\n\t\tindex = 5;\n\t}\n\tHippoResponse result = getResult(request, timeout);\n\tif (result.isError()) {\n\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t} else {\n\t\t\tthrow result.getThrowable();\n\t\t}\n\t}\n\treturn result.getResult();\n}",
                "start_point": {
                    "row": 90,
                    "column": 1
                },
                "end_point": {
                    "row": 106,
                    "column": 2
                }
            },
            {
                "definition": "private HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\tserviceGovern);\n\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\treturn callback.getResult();\n}",
                "name": "getResult",
                "modifiers": "private",
                "return_type": "HippoResponse",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "timeout"
                    }
                ],
                "body": "{\n\n\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\tserviceGovern);\n\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\treturn callback.getResult();\n}",
                "start_point": {
                    "row": 108,
                    "column": 1
                },
                "end_point": {
                    "row": 114,
                    "column": 2
                }
            }
        ]
    }
]