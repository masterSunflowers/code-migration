[
    {
        "rev_path": "dom/src/test/java/org/estatio/dom/invoice/viewmodel/InvoiceSummaryForPropertyDueDateTest_viewModelInit.java",
        "definition": "public class InvoiceSummaryForPropertyDueDateTest_viewModelInit {\n\n    @Rule\n    public JUnitRuleMockery2 context = JUnitRuleMockery2.createFor(Mode.INTERFACES_ONLY);\n\n    @Mock\n    private ViewModelSupport viewModelSupport;\n    \n    @Mock\n    private ViewModelSupport.Memento viewModelSupportMemento;\n    \n\n    private InvoiceSummaryForPropertyDueDate viewModel;\n\n    @Before\n    public void setUp() throws Exception {\n        viewModel = new InvoiceSummaryForPropertyDueDate();\n        viewModel.injectViewModelSupport(viewModelSupport);\n        \n        viewModel.setReference(\"OXF\");\n        viewModel.setDueDate(new LocalDate(2013,4,1));\n        viewModel.setNetAmount(new BigDecimal(\"10.00\"));\n        viewModel.setVatAmount(new BigDecimal(\"1.75\"));\n        viewModel.setGrossAmount(new BigDecimal(\"11.75\"));\n        viewModel.setTotal(123);\n    }\n\n    @Test\n    public void memento() {\n        \n        context.checking(new Expectations() {\n            {\n                oneOf(viewModelSupport).create();\n                will(returnValue(viewModelSupportMemento));\n                \n                oneOf(viewModelSupportMemento).set(\"reference\", \"OXF\");\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"dueDate\", new LocalDate(2013,4,1));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"netAmount\", new BigDecimal(\"10.00\"));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"vatAmount\", new BigDecimal(\"1.75\"));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"grossAmount\", new BigDecimal(\"11.75\"));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"total\", 123);\n                will(returnValue(viewModelSupportMemento));\n                \n                oneOf(viewModelSupportMemento).asString();\n                will(returnValue(\"encodedXml\"));\n            }\n        });\n        \n        assertThat(viewModel.viewModelMemento(), is(\"encodedXml\"));\n    }\n\n    @Test\n    public void init() {\n        \n        context.checking(new Expectations() {\n            {\n                oneOf(viewModelSupport).parse(\"encodedXml\");\n                will(returnValue(viewModelSupportMemento));\n                \n                oneOf(viewModelSupportMemento).get(\"reference\", String.class);\n                will(returnValue(\"OXF\"));\n                oneOf(viewModelSupportMemento).get(\"dueDate\", LocalDate.class);\n                will(returnValue(new LocalDate(2013,4,1)));\n                oneOf(viewModelSupportMemento).get(\"netAmount\", BigDecimal.class);\n                will(returnValue(new BigDecimal(\"10.00\")));\n                oneOf(viewModelSupportMemento).get(\"vatAmount\", BigDecimal.class);\n                will(returnValue(new BigDecimal(\"1.75\")));\n                oneOf(viewModelSupportMemento).get(\"grossAmount\", BigDecimal.class);\n                will(returnValue(new BigDecimal(\"11.75\")));\n                oneOf(viewModelSupportMemento).get(\"total\", Integer.class);\n                will(returnValue(123));\n            }\n        });\n        \n        viewModel.viewModelInit(\"encodedXml\");\n        \n        assertThat(viewModel.getReference(), is(\"OXF\"));\n        assertThat(viewModel.getDueDate(), is(new LocalDate(2013,4,1)));\n        assertThat(viewModel.getNetAmount(), is(new BigDecimal(\"10.00\")));\n        assertThat(viewModel.getVatAmount(), is(new BigDecimal(\"1.75\")));\n        assertThat(viewModel.getGrossAmount(), is(new BigDecimal(\"11.75\")));\n        assertThat(viewModel.getTotal(), is(123));\n\n    }\n}",
        "package": "package org.estatio.dom.invoice.viewmodel;",
        "tree_path": "InvoiceSummaryForPropertyDueDateTest_viewModelInit",
        "name": "InvoiceSummaryForPropertyDueDateTest_viewModelInit",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    @Rule\n    public JUnitRuleMockery2 context = JUnitRuleMockery2.createFor(Mode.INTERFACES_ONLY);\n\n    @Mock\n    private ViewModelSupport viewModelSupport;\n    \n    @Mock\n    private ViewModelSupport.Memento viewModelSupportMemento;\n    \n\n    private InvoiceSummaryForPropertyDueDate viewModel;\n\n    @Before\n    public void setUp() throws Exception {\n        viewModel = new InvoiceSummaryForPropertyDueDate();\n        viewModel.injectViewModelSupport(viewModelSupport);\n        \n        viewModel.setReference(\"OXF\");\n        viewModel.setDueDate(new LocalDate(2013,4,1));\n        viewModel.setNetAmount(new BigDecimal(\"10.00\"));\n        viewModel.setVatAmount(new BigDecimal(\"1.75\"));\n        viewModel.setGrossAmount(new BigDecimal(\"11.75\"));\n        viewModel.setTotal(123);\n    }\n\n    @Test\n    public void memento() {\n        \n        context.checking(new Expectations() {\n            {\n                oneOf(viewModelSupport).create();\n                will(returnValue(viewModelSupportMemento));\n                \n                oneOf(viewModelSupportMemento).set(\"reference\", \"OXF\");\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"dueDate\", new LocalDate(2013,4,1));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"netAmount\", new BigDecimal(\"10.00\"));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"vatAmount\", new BigDecimal(\"1.75\"));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"grossAmount\", new BigDecimal(\"11.75\"));\n                will(returnValue(viewModelSupportMemento));\n                oneOf(viewModelSupportMemento).set(\"total\", 123);\n                will(returnValue(viewModelSupportMemento));\n                \n                oneOf(viewModelSupportMemento).asString();\n                will(returnValue(\"encodedXml\"));\n            }\n        });\n        \n        assertThat(viewModel.viewModelMemento(), is(\"encodedXml\"));\n    }\n\n    @Test\n    public void init() {\n        \n        context.checking(new Expectations() {\n            {\n                oneOf(viewModelSupport).parse(\"encodedXml\");\n                will(returnValue(viewModelSupportMemento));\n                \n                oneOf(viewModelSupportMemento).get(\"reference\", String.class);\n                will(returnValue(\"OXF\"));\n                oneOf(viewModelSupportMemento).get(\"dueDate\", LocalDate.class);\n                will(returnValue(new LocalDate(2013,4,1)));\n                oneOf(viewModelSupportMemento).get(\"netAmount\", BigDecimal.class);\n                will(returnValue(new BigDecimal(\"10.00\")));\n                oneOf(viewModelSupportMemento).get(\"vatAmount\", BigDecimal.class);\n                will(returnValue(new BigDecimal(\"1.75\")));\n                oneOf(viewModelSupportMemento).get(\"grossAmount\", BigDecimal.class);\n                will(returnValue(new BigDecimal(\"11.75\")));\n                oneOf(viewModelSupportMemento).get(\"total\", Integer.class);\n                will(returnValue(123));\n            }\n        });\n        \n        viewModel.viewModelInit(\"encodedXml\");\n        \n        assertThat(viewModel.getReference(), is(\"OXF\"));\n        assertThat(viewModel.getDueDate(), is(new LocalDate(2013,4,1)));\n        assertThat(viewModel.getNetAmount(), is(new BigDecimal(\"10.00\")));\n        assertThat(viewModel.getVatAmount(), is(new BigDecimal(\"1.75\")));\n        assertThat(viewModel.getGrossAmount(), is(new BigDecimal(\"11.75\")));\n        assertThat(viewModel.getTotal(), is(123));\n\n    }\n}",
        "start_point": {
            "row": 34,
            "column": 0
        },
        "end_point": {
            "row": 123,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Before\npublic void setUp() throws Exception {\n    viewModel = new InvoiceSummaryForPropertyDueDate();\n    viewModel.injectViewModelSupport(viewModelSupport);\n    \n    viewModel.setReference(\"OXF\");\n    viewModel.setDueDate(new LocalDate(2013,4,1));\n    viewModel.setNetAmount(new BigDecimal(\"10.00\"));\n    viewModel.setVatAmount(new BigDecimal(\"1.75\"));\n    viewModel.setGrossAmount(new BigDecimal(\"11.75\"));\n    viewModel.setTotal(123);\n}",
                "name": "setUp",
                "modifiers": "@Before\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    viewModel = new InvoiceSummaryForPropertyDueDate();\n    viewModel.injectViewModelSupport(viewModelSupport);\n    \n    viewModel.setReference(\"OXF\");\n    viewModel.setDueDate(new LocalDate(2013,4,1));\n    viewModel.setNetAmount(new BigDecimal(\"10.00\"));\n    viewModel.setVatAmount(new BigDecimal(\"1.75\"));\n    viewModel.setGrossAmount(new BigDecimal(\"11.75\"));\n    viewModel.setTotal(123);\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 59,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void memento() {\n    \n    context.checking(new Expectations() {\n        {\n            oneOf(viewModelSupport).create();\n            will(returnValue(viewModelSupportMemento));\n            \n            oneOf(viewModelSupportMemento).set(\"reference\", \"OXF\");\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"dueDate\", new LocalDate(2013,4,1));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"netAmount\", new BigDecimal(\"10.00\"));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"vatAmount\", new BigDecimal(\"1.75\"));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"grossAmount\", new BigDecimal(\"11.75\"));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"total\", 123);\n            will(returnValue(viewModelSupportMemento));\n            \n            oneOf(viewModelSupportMemento).asString();\n            will(returnValue(\"encodedXml\"));\n        }\n    });\n    \n    assertThat(viewModel.viewModelMemento(), is(\"encodedXml\"));\n}",
                "name": "memento",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    \n    context.checking(new Expectations() {\n        {\n            oneOf(viewModelSupport).create();\n            will(returnValue(viewModelSupportMemento));\n            \n            oneOf(viewModelSupportMemento).set(\"reference\", \"OXF\");\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"dueDate\", new LocalDate(2013,4,1));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"netAmount\", new BigDecimal(\"10.00\"));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"vatAmount\", new BigDecimal(\"1.75\"));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"grossAmount\", new BigDecimal(\"11.75\"));\n            will(returnValue(viewModelSupportMemento));\n            oneOf(viewModelSupportMemento).set(\"total\", 123);\n            will(returnValue(viewModelSupportMemento));\n            \n            oneOf(viewModelSupportMemento).asString();\n            will(returnValue(\"encodedXml\"));\n        }\n    });\n    \n    assertThat(viewModel.viewModelMemento(), is(\"encodedXml\"));\n}",
                "start_point": {
                    "row": 61,
                    "column": 4
                },
                "end_point": {
                    "row": 88,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void init() {\n    \n    context.checking(new Expectations() {\n        {\n            oneOf(viewModelSupport).parse(\"encodedXml\");\n            will(returnValue(viewModelSupportMemento));\n            \n            oneOf(viewModelSupportMemento).get(\"reference\", String.class);\n            will(returnValue(\"OXF\"));\n            oneOf(viewModelSupportMemento).get(\"dueDate\", LocalDate.class);\n            will(returnValue(new LocalDate(2013,4,1)));\n            oneOf(viewModelSupportMemento).get(\"netAmount\", BigDecimal.class);\n            will(returnValue(new BigDecimal(\"10.00\")));\n            oneOf(viewModelSupportMemento).get(\"vatAmount\", BigDecimal.class);\n            will(returnValue(new BigDecimal(\"1.75\")));\n            oneOf(viewModelSupportMemento).get(\"grossAmount\", BigDecimal.class);\n            will(returnValue(new BigDecimal(\"11.75\")));\n            oneOf(viewModelSupportMemento).get(\"total\", Integer.class);\n            will(returnValue(123));\n        }\n    });\n    \n    viewModel.viewModelInit(\"encodedXml\");\n    \n    assertThat(viewModel.getReference(), is(\"OXF\"));\n    assertThat(viewModel.getDueDate(), is(new LocalDate(2013,4,1)));\n    assertThat(viewModel.getNetAmount(), is(new BigDecimal(\"10.00\")));\n    assertThat(viewModel.getVatAmount(), is(new BigDecimal(\"1.75\")));\n    assertThat(viewModel.getGrossAmount(), is(new BigDecimal(\"11.75\")));\n    assertThat(viewModel.getTotal(), is(123));\n\n}",
                "name": "init",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    \n    context.checking(new Expectations() {\n        {\n            oneOf(viewModelSupport).parse(\"encodedXml\");\n            will(returnValue(viewModelSupportMemento));\n            \n            oneOf(viewModelSupportMemento).get(\"reference\", String.class);\n            will(returnValue(\"OXF\"));\n            oneOf(viewModelSupportMemento).get(\"dueDate\", LocalDate.class);\n            will(returnValue(new LocalDate(2013,4,1)));\n            oneOf(viewModelSupportMemento).get(\"netAmount\", BigDecimal.class);\n            will(returnValue(new BigDecimal(\"10.00\")));\n            oneOf(viewModelSupportMemento).get(\"vatAmount\", BigDecimal.class);\n            will(returnValue(new BigDecimal(\"1.75\")));\n            oneOf(viewModelSupportMemento).get(\"grossAmount\", BigDecimal.class);\n            will(returnValue(new BigDecimal(\"11.75\")));\n            oneOf(viewModelSupportMemento).get(\"total\", Integer.class);\n            will(returnValue(123));\n        }\n    });\n    \n    viewModel.viewModelInit(\"encodedXml\");\n    \n    assertThat(viewModel.getReference(), is(\"OXF\"));\n    assertThat(viewModel.getDueDate(), is(new LocalDate(2013,4,1)));\n    assertThat(viewModel.getNetAmount(), is(new BigDecimal(\"10.00\")));\n    assertThat(viewModel.getVatAmount(), is(new BigDecimal(\"1.75\")));\n    assertThat(viewModel.getGrossAmount(), is(new BigDecimal(\"11.75\")));\n    assertThat(viewModel.getTotal(), is(123));\n\n}",
                "start_point": {
                    "row": 90,
                    "column": 4
                },
                "end_point": {
                    "row": 122,
                    "column": 5
                }
            }
        ]
    }
]