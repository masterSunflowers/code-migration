[
    {
        "rev_path": "dom/src/main/java/org/estatio/api/Api.java",
        "definition": "@Named(\"Migration\")\npublic class Api extends AbstractFactoryAndRepository {\n\n    @Override\n    public String getId() {\n        return \"api\";\n    }\n\n    public String iconName() {\n        return \"Api\";\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putCountry(\n            @Named(\"code\") String code,\n            @Named(\"alpha2Code\") String alpha2Code,\n            @Named(\"name\") String name) {\n        Country country = countries.findCountry(code);\n        if (country == null) {\n            country = countries.createCountry(code, alpha2Code, name);\n        }\n    }\n\n    private Country fetchCountry(String countryCode) {\n        return fetchCountry(countryCode, true);\n    }\n\n    private Country fetchCountry(String countryCode, boolean exception) {\n        Country country = countries.findCountry(countryCode);\n        if (country == null && exception) {\n            throw new ApplicationException(String.format(\"Country with code %1$s not found\", countryCode));\n        }\n        return country;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putState(\n            @Named(\"code\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"countryCode\") String countryCode) {\n        Country country = fetchCountry(countryCode);\n        State state = states.findState(countryCode);\n        if (state == null) {\n            state = states.newState(reference, name, country);\n        }\n        state.setName(name);\n        state.setCountry(country);\n    }\n\n    private State fetchState(String stateCode, boolean exception) {\n        State country = states.findState(stateCode);\n        if (country == null && exception) {\n            throw new ApplicationException(String.format(\"State with code %1$s not found\", stateCode));\n        }\n        return country;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseType(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name) {\n        leaseTypes.findOrCreate(reference, name);\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putCharge(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"description\") String description,\n            @Named(\"taxReference\") String taxReference,\n            @Named(\"chargeGroupReference\") String chargeGroupReference) {\n        Tax tax = fetchTaxIfAny(taxReference);\n        ChargeGroup chargeGroup = fetchOrCreateChargeGroup(chargeGroupReference);\n        charges.newCharge(reference, name, description, tax, chargeGroup);\n    }\n\n    private Charge fetchCharge(String chargeReference) {\n        Charge charge = charges.findCharge(chargeReference);\n        if (charge == null) {\n            throw new ApplicationException(String.format(\"Charge with reference %s not found.\", chargeReference));\n        }\n        return charge;\n    }\n\n    private ChargeGroup fetchOrCreateChargeGroup(String chargeGroupReference) {\n        ChargeGroup chargeGroup = chargeGroups.findChargeGroup(chargeGroupReference);\n        if (chargeGroup == null) {\n            chargeGroup = chargeGroups.createChargeGroup(chargeGroupReference, null);\n        }\n        return chargeGroup;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putTax(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"percentage\") BigDecimal percentage,\n            @Named(\"startDate\") LocalDate startDate) {\n        Tax tax = fetchTaxIfAny(reference);\n        if (tax == null) {\n            tax = taxes.newTax(reference, name);\n            tax.setName(name);\n        }\n        tax.newRate(startDate, percentage);\n    }\n\n    private Tax fetchTaxIfAny(String reference) {\n        return taxes.findTaxByReference(reference);\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPerson(\n            @Named(\"reference\") String reference,\n            @Named(\"initials\") @Optional String initials,\n            @Named(\"firstName\") String firstName,\n            @Named(\"lastName\") String lastName) {\n        Person person = (Person) parties.findPartyByReference(reference);\n        if (person == null) {\n            person = persons.newPerson(reference, initials, firstName, lastName);\n        }\n        person.setFirstName(firstName);\n        person.setLastName(lastName);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putOrganisation(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"vatCode\") @Optional String vatCode,\n            @Named(\"fiscalCode\") @Optional String fiscalCode) {\n        Organisation org = (Organisation) parties.findPartyByReference(reference);\n        if (org == null) {\n            org = organisations.newOrganisation(reference, name);\n            org.setFiscalCode(fiscalCode);\n            org.setVatCode(vatCode);\n        }\n        org.setName(name);\n    }\n\n    private Party fetchParty(String partyReference) {\n        Party party = parties.findPartyByReference(partyReference);\n        if (party == null) {\n            throw new ApplicationException(String.format(\"Party with reference %s not found.\", partyReference));\n        }\n        return party;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putProperty(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"countryCode\") String countryCode,\n            @Named(\"city\") String city,\n            @Named(\"type\") String type,\n            @Named(\"acquireDate\") @Optional LocalDate acquireDate,\n            @Named(\"disposalDate\") @Optional LocalDate disposalDate,\n            @Named(\"openingDate\") @Optional LocalDate openingDate,\n            @Named(\"ownerReference\") @Optional String ownerReference,\n            @Named(\"numeratorFormat\") @Optional String numeratorFormat\n            ) {\n        Party owner = fetchParty(ownerReference);\n        Property property = fetchProperty(reference, true);\n        property.setName(name);\n        property.setCountry(fetchCountry(countryCode));\n        property.setCity(city);\n        property.setType(PropertyType.valueOf(type));\n        property.setAcquireDate(acquireDate);\n        property.setDisposalDate(disposalDate);\n        property.setOpeningDate(openingDate);\n        property.addRoleIfDoesNotExist(owner, FixedAssetRoleType.PROPERTY_OWNER, null, null);\n        if (numeratorFormat != null)\n            invoices.createInvoiceNumberNumerator(property, numeratorFormat, BigInteger.ZERO);\n    }\n\n    private Property fetchProperty(String reference, boolean createIfNotFond) {\n        Property property = properties.findPropertyByReference(reference);\n        if (property == null) {\n            if (!createIfNotFond)\n                throw new ApplicationException(String.format(\"Property with reference %s not found.\", reference));\n            property = properties.newProperty(reference, null, PropertyType.MIXED, null, null, null);\n        }\n        return property;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putUnit(\n            @Named(\"reference\") String reference,\n            @Named(\"propertyReference\") String propertyReference,\n            @Named(\"ownerReference\") @Optional String ownerReference,\n            @Named(\"name\") String name, @Named(\"type\") String type,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"area\") @Optional BigDecimal area,\n            @Named(\"salesArea\") @Optional BigDecimal salesArea,\n            @Named(\"storageArea\") @Optional BigDecimal storageArea,\n            @Named(\"mezzanineArea\") @Optional BigDecimal mezzanineArea,\n            @Named(\"dehorsArea\") @Optional BigDecimal dehorsArea,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"city\") @Optional String city,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") @Optional String countryCode) {\n        Property property = fetchProperty(propertyReference, false);\n        Unit unit = units.findUnitByReference(reference);\n        if (unit == null) {\n            unit = property.newUnit(reference, name, UnitType.BOUTIQUE);\n        }\n        // set attributes\n        unit.setName(name);\n        unit.setType(UnitType.valueOf(type));\n        unit.changeDates(startDate, endDate);\n        unit.setArea(area);\n        unit.setSalesArea(salesArea);\n        unit.setStorageArea(storageArea);\n        unit.setMezzanineArea(mezzanineArea);\n        unit.setDehorsArea(dehorsArea);\n        CommunicationChannel cc = communicationChannelContributions.findCommunicationChannelForType(unit, CommunicationChannelType.POSTAL_ADDRESS);\n        if (cc == null) {\n            communicationChannelContributions.newPostal(unit, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, null, postalCode, city);\n        }\n    }\n\n    private Unit fetchUnit(String unitReference) {\n        if (unitReference != null) {\n            Unit unit = units.findUnitByReference(unitReference);\n            if (unit == null) {\n                throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n            }\n            return unit;\n        }\n        return null;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPropertyPostalAddress(\n            @Named(\"propertyReference\") String propertyReference,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"address2\") @Optional String address2,\n            @Named(\"city\") String city,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") String countryCode) {\n        final Property property = properties.findPropertyByReference(propertyReference);\n        if (property == null) {\n            throw new ApplicationException(String.format(\"Property with reference %s not found.\", propertyReference));\n        }\n        final CommunicationChannel comm = communicationChannelContributions.findCommunicationChannelForType(property, null);\n        if (comm == null) {\n            communicationChannelContributions.newPostal(property, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, address2, postalCode, city);\n        }\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPartyCommunicationChannels(\n            @Named(\"partyReference\") String partyReference,\n            @Named(\"reference\") @Optional String reference,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"address2\") @Optional String address2,\n            @Named(\"city\") @Optional String city,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") @Optional String countryCode,\n            @Named(\"phoneNumber\") @Optional String phoneNumber,\n            @Named(\"faxNumber\") @Optional String faxNumber,\n            @Named(\"emailAddress\") @Optional String emailAddress\n            ) {\n        Party party = fetchParty(partyReference);\n        if (party == null)\n            throw new ApplicationException(String.format(\"Party with reference [%s] not found\", partyReference));\n\n        // Address\n        if (address1 != null) {\n            Country country = fetchCountry(countryCode);\n            PostalAddress comm = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, country);\n            if (comm == null) {\n                comm = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, states.findState(stateCode), countries.findCountry(countryCode));\n                comm.setReference(reference);\n            }\n        }\n        // Phone\n        if (phoneNumber != null) {\n            CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, phoneNumber);\n            if (comm == null) {\n                comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.PHONE_NUMBER, phoneNumber);\n                comm.setReference(reference);\n            }\n        }\n        // Fax\n        if (faxNumber != null) {\n            CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, faxNumber);\n            if (comm == null) {\n                comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.FAX_NUMBER, faxNumber);\n                comm.setReference(reference);\n            }\n        }\n        // Email\n        if (emailAddress != null) {\n            CommunicationChannel comm = emailAddresses.findByEmailAddress(party, emailAddress);\n            if (comm == null) {\n                comm = communicationChannels.newEmail(party, CommunicationChannelType.EMAIL_ADDRESS, emailAddress);\n                comm.setReference(reference);\n            }\n        }\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPropertyActor(\n            @Named(\"propertyReference\") String propertyReference,\n            @Named(\"partyReference\") String partyReference,\n            @Named(\"type\") String typeStr,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate) {\n        final Property property = fetchProperty(propertyReference, false);\n        final Party party = fetchParty(partyReference);\n        final FixedAssetRoleType type = FixedAssetRoleType.valueOf(typeStr);\n        property.addRoleIfDoesNotExist(party, type, startDate, endDate);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLease(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"landlordReference\") String landlordReference,\n            @Named(\"type\") String type,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"terminationDate\") @Optional LocalDate terminationDate,\n            @Named(\"propertyReference\") @Optional String propertyReference\n            ) {\n        Party tenant = fetchParty(tenantReference);\n        Party landlord = fetchParty(landlordReference);\n        Lease lease = leases.findLeaseByReference(reference);\n        LeaseType leaseType = leaseTypes.findOrCreate(type, null);\n        if (lease == null) {\n            lease = leases.newLease(reference, name, leaseType, startDate, null, endDate, landlord, tenant);\n        }\n        lease.setTerminationDate(terminationDate);\n    }\n\n    private Lease fetchLease(String leaseReference) {\n        Lease lease;\n        lease = leases.findLeaseByReference(leaseReference);\n        if (lease == null) {\n            throw new ApplicationException(String.format(\"Lease with reference %s not found.\", leaseReference));\n        }\n        return lease;\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseLink(@Named(\"leaseReference\") String leaseReference, @Named(\"previousLeaseReference\") String previousLeaseReference) {\n        Lease lease = fetchLease(leaseReference);\n        Lease previousLease = fetchLease(previousLeaseReference);\n        lease.modifyPrevious(previousLease);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putOccupancy(\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"tenancyStartDate\") @Optional LocalDate tenancyStartDate,\n            @Named(\"tenancyEndDate\") @Optional LocalDate tenancyEndDate,\n            @Named(\"size\") @Optional String size,\n            @Named(\"brand\") @Optional String brand,\n            @Named(\"sector\") @Optional String sector,\n            @Named(\"activity\") @Optional String activity,\n            @Named(\"reportTurnover\") @Optional String reportTurnover,\n            @Named(\"reportRent\") @Optional String reportRent,\n            @Named(\"reportOCR\") @Optional String reportOCR) {\n        Lease lease = fetchLease(leaseReference);\n        UnitForLease unit = (UnitForLease) units.findUnitByReference(unitReference);\n        if (unitReference != null && unit == null) {\n            throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n        }\n        Occupancy occupancy = occupancies.findByLeaseAndUnitAndStartDate(lease, unit, startDate);\n        if (occupancy == null) {\n            occupancy = lease.occupy(unit, startDate);\n        }\n\n        occupancy.setEndDate(endDate);\n        occupancy.setUnitSizeName(size);\n        occupancy.setBrandName(brand != null ? brand.replaceAll(\"\\\\p{C}\", \"\").trim() : null);\n        occupancy.setSectorName(sector);\n        occupancy.setActivityName(activity);\n        occupancy.setReportTurnover(reportTurnover != null ? OccupancyReportingType.valueOf(reportTurnover) : OccupancyReportingType.NO);\n        occupancy.setReportRent(reportRent != null ? OccupancyReportingType.valueOf(reportRent) : OccupancyReportingType.NO);\n        occupancy.setReportOCR(reportOCR != null ? OccupancyReportingType.valueOf(reportOCR) : OccupancyReportingType.NO);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseItem(\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"type\") @Optional String leaseItemTypeName,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"chargeReference\") @Optional String chargeReference,\n            @Named(\"nextDueDate\") @Optional LocalDate nextDueDate,\n            @Named(\"invoicingFrequency\") @Optional String invoicingFrequency,\n            @Named(\"paymentMethod\") @Optional String paymentMethod,\n            @Named(\"status\") @Optional String status) {\n        Lease lease = fetchLease(leaseReference);\n\n        @SuppressWarnings(\"unused\")\n        Unit unit = fetchUnit(unitReference);\n\n        LeaseItemType itemType = fetchLeaseItemType(leaseItemTypeName);\n        Charge charge = fetchCharge(chargeReference);\n        //\n        LeaseItem item = lease.findItem(itemType, startDate, sequence);\n        if (item == null) {\n            item = lease.newItem(itemType, charge, InvoicingFrequency.valueOf(invoicingFrequency), PaymentMethod.valueOf(paymentMethod), startDate);\n        }\n        final LeaseItemStatus leaseItemStatus = LeaseItemStatus.valueOfElse(status, LeaseItemStatus.APPROVED);\n        item.setStatus(leaseItemStatus);\n        item.setEndDate(endDate);\n        item.setSequence(sequence);\n    }\n\n    private LeaseItemType fetchLeaseItemType(String type) {\n        LeaseItemType itemType = LeaseItemType.valueOf(type);\n        if (itemType == null) {\n            throw new ApplicationException(String.format(\"Type with reference %s not found.\", type));\n        }\n        return itemType;\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeasePostalAddress(\n            @Named(\"partyReference\") String partyReference,\n            @Named(\"agreementRoleType\") String agreementRoleType,\n            @Named(\"leaseReference\") @Optional String leaseReference,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"address2\") @Optional String address2,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"city\") @Optional String city,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") @Optional String countryCode,\n            @Named(\"isInvoiceAddress\") @Optional BigInteger isInvoiceAddress\n            ) {\n        if (address1 != null && partyReference != null && leaseReference != null) {\n            Lease lease = fetchLease(leaseReference);\n            Party party = fetchParty(partyReference);\n            AgreementRoleCommunicationChannelType agreementRoleCommunicationChannelType = agreementRoleCommunicationChannelTypes.findByTitle(isInvoiceAddress.compareTo(BigInteger.ZERO) == 0 ? LeaseConstants.ARCCT_INVOICE_ADDRESS : LeaseConstants.ARCCT_ADMINISTRATION_ADDRESS);\n            if (agreementRoleCommunicationChannelType == null)\n                throw new ApplicationException(String.format(\"AgreementRoleCommunicationChannelType not found.\"));\n            PostalAddress address = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, fetchCountry(countryCode));\n            if (address == null) {\n                address = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, fetchState(stateCode, false), fetchCountry(countryCode, false));\n            }\n            AgreementRoleType art = agreementRoleTypes.findByTitle(StringUtils.capitalize(agreementRoleType.toLowerCase()));\n            if (art == null)\n                throw new ApplicationException(String.format(\"AgreementRoleType %s not found.\", agreementRoleType));\n            AgreementRole role = lease.findRole(party, art, clockService.now());\n            if (role == null)\n                throw new ApplicationException(String.format(\"Role for %s, %s not found.\", partyReference, agreementRoleType));\n            role.addCommunicationChannel(agreementRoleCommunicationChannelType, address);\n        }\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseTermForIndexableRent(\n            // start generic fields\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"itemSequence\") BigInteger itemSequence,\n            @Named(\"itemType\") String itemType,\n            @Named(\"itemStartDate\") LocalDate itemStartDate,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"status\") @Optional String statusStr,\n            // end generic fields\n            @Named(\"indexationStatus\") @Optional String indexationStatusStr,\n            @Named(\"reviewDate\") @Optional LocalDate reviewDate,\n            @Named(\"effectiveDate\") @Optional LocalDate effectiveDate,\n            @Named(\"baseValue\") @Optional BigDecimal baseValue,\n            @Named(\"indexedValue\") @Optional BigDecimal indexedValue,\n            @Named(\"settledValue\") @Optional BigDecimal settledValue,\n            @Named(\"levellingValue\") @Optional BigDecimal levellingValue,\n            @Named(\"levellingPercentage\") @Optional BigDecimal levellingPercentage,\n            @Named(\"indexReference\") @Optional String indexReference,\n            @Named(\"indexationFrequency\") @Optional String indexationFrequency,\n            @Named(\"indexationPercentage\") @Optional BigDecimal indexationPercentage,\n            @Named(\"baseIndexReference\") @Optional String baseIndexReference,\n            @Named(\"baseIndexStartDate\") @Optional LocalDate baseIndexStartDate,\n            @Named(\"baseIndexEndDate\") @Optional LocalDate baseIndexEndDate,\n            @Named(\"baseIndexValue\") @Optional BigDecimal baseIndexValue,\n            @Named(\"nextIndexReference\") @Optional String nextIndexReference,\n            @Named(\"nextIndexStartDate\") @Optional LocalDate nextIndexStartDate,\n            @Named(\"nextIndexEndDate\") @Optional LocalDate nextIndexEndDate,\n            @Named(\"nextIndexValue\") @Optional BigDecimal nextIndexValue) {\n        LeaseTermForIndexableRent term = (LeaseTermForIndexableRent) putLeaseTerm(\n                leaseReference,\n                unitReference,\n                itemSequence,\n                itemType,\n                itemStartDate,\n                startDate,\n                endDate,\n                sequence,\n                statusStr);\n        if (term != null) {\n            Index index = indices.findIndex(indexReference);\n            LeaseTermFrequency indexationFreq = LeaseTermFrequency.valueOf(indexationFrequency);\n            term.setIndex(index);\n            term.setFrequency(indexationFreq);\n            term.setEffectiveDate(effectiveDate);\n            term.setBaseValue(baseValue);\n            term.setIndexedValue(indexedValue);\n            term.setSettledValue(settledValue);\n            term.setBaseIndexStartDate(baseIndexStartDate);\n            term.setBaseIndexValue(baseIndexValue);\n            term.setNextIndexStartDate(nextIndexStartDate);\n            term.setNextIndexValue(nextIndexValue);\n            term.setIndexationPercentage(indexationPercentage);\n            IndexationStatus indexationStatus = indexationStatusStr == null ? null : IndexationStatus.valueOf(indexationStatusStr);\n            term.setIndexationStatus(indexationStatus);\n            term.setLevellingPercentage(levellingPercentage);\n        }\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseTermForTurnoverRent(\n            // start generic fields\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"itemSequence\") BigInteger itemSequence,\n            @Named(\"itemType\") String itemType,\n            @Named(\"itemStartDate\") LocalDate itemStartDate,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"status\") @Optional String status,\n            // end generic fields\n            @Named(\"turnoverRentRule\") @Optional String turnoverRentRule,\n            @Named(\"budgetedTurnover\") @Optional BigDecimal budgetedTurnover,\n            @Named(\"auditedTurnover\") @Optional BigDecimal auditedTurnover,\n            @Named(\"turnoverRentValue\") @Optional BigDecimal turnoverRentValue) {\n        LeaseTermForTurnoverRent term = (LeaseTermForTurnoverRent) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n        if (term != null) {\n            term.setTurnoverRentValue(turnoverRentValue);\n            term.setBudgetedTurnover(budgetedTurnover);\n            term.setAuditedTurnover(auditedTurnover);\n            term.setTurnoverRentRule(turnoverRentRule);\n        }\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseTermForServiceCharge(\n            // start generic fields\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"itemSequence\") BigInteger itemSequence,\n            @Named(\"itemType\") String itemType,\n            @Named(\"itemStartDate\") LocalDate itemStartDate,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"status\") @Optional String status,\n            // end generic fields\n            @Named(\"auditedValue\") @Optional BigDecimal auditedValue,\n            @Named(\"budgetedValue\") @Optional BigDecimal budgetedValue) {\n        LeaseTermForServiceCharge term = (LeaseTermForServiceCharge) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n        if (term != null) {\n            term.setAuditedValue(auditedValue);\n            term.setBudgetedValue(budgetedValue);\n        }\n    }\n\n    private LeaseTerm putLeaseTerm(\n            String leaseReference,\n            String unitReference,\n            BigInteger itemSequence,\n            String itemType,\n            LocalDate itemStartDate,\n            LocalDate startDate,\n            LocalDate endDate,\n            BigInteger sequence,\n            String statusStr) {\n        Lease lease = leases.findLeaseByReference(leaseReference);\n        if (lease == null) {\n            throw new ApplicationException(String.format(\"Leaseitem with reference %1$s not found.\", leaseReference));\n        }\n        Unit unit;\n        if (unitReference != null) {\n            unit = units.findUnitByReference(unitReference);\n            if (unitReference != null && unit == null) {\n                throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n            }\n        }\n        LeaseItemType leaseItemType = fetchLeaseItemType(itemType);\n        LeaseItem item = lease.findItem(leaseItemType, itemStartDate, itemSequence);\n        if (item == null) {\n            throw new ApplicationException(String.format(\"LeaseItem with reference %1$s, %2$s, %3$s, %4$s not found.\", leaseReference, leaseItemType.toString(), itemStartDate.toString(), itemSequence.toString()));\n        }\n        // check if the date is within range of lease\n        if (lease.getTerminationDate() == null || lease.getTerminationDate().compareTo(startDate) >= 0) {\n            LeaseTerm term = item.findTermWithSequence(sequence);\n            if (term == null) {\n                if (sequence.equals(BigInteger.ONE)) {\n                    term = item.newTerm(startDate);\n                } else {\n                    LeaseTerm previousTerm = item.findTermWithSequence(sequence.subtract(BigInteger.ONE));\n                    term = previousTerm.createNext(startDate);\n                }\n                term.setSequence(sequence);\n            }\n            term.setStatus(org.estatio.dom.lease.LeaseTermStatus.valueOf(statusStr));\n            // will be overwritten if there is a next term\n            term.setEndDate(lease.getTerminationDate());\n            return term;\n        }\n        return null;\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putBankAccount(\n            // start generic fields\n            @Named(\"reference\") @Optional String reference,\n            @Named(\"name\") @Optional String name,\n            @Named(\"bankAccountType\") @Optional String bankAccountType,\n            @Named(\"ownerReference\") String ownerReference,\n            @Named(\"iban\") @Optional String iban,\n            @Named(\"countryCode\") @Optional String countryCode,\n            @Named(\"nationalCheckCode\") @Optional String nationalCheckCode,\n            @Named(\"nationalBankCode\") @Optional String nationalBankCode,\n            @Named(\"branchCode\") @Optional String branchCode,\n            @Named(\"accountNumber\") @Optional String accountNumber\n            ) {\n        BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(reference);\n        Party owner = parties.findPartyByReference(ownerReference);\n        if (owner == null)\n            return;\n        if (bankAccount == null) {\n            bankAccount = financialAccounts.newBankAccount(owner, iban);\n        }\n        bankAccount.setReference(reference);\n        bankAccount.setAccountNumber(accountNumber);\n        bankAccount.setBranchCode(branchCode);\n        bankAccount.setName(name);\n        bankAccount.setCountry(fetchCountry(countryCode, false));\n        bankAccount.setNationalBankCode(nationalBankCode);\n        bankAccount.setNationalCheckCode(nationalCheckCode);\n        bankAccount.setBankAccountType(BankAccountType.valueOf(bankAccountType));\n        bankAccount.verifyIban();\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putBankMandate(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") @Optional String name,\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"debtorReference\") String debtorReference,\n            @Named(\"creditorReference\") String creditorReference,\n            @Named(\"bankAccountReference\") String bankAccountReference,\n            @Named(\"startDate\") LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate) {\n        BankMandate bankMandate = (BankMandate) agreements.findAgreementByReference(reference);\n        BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(bankAccountReference);\n        if (bankAccount == null)\n            throw new ApplicationException(String.format(\"BankAccount with reference %1$s not found\", bankAccountReference));\n        if (bankMandate == null) {\n            Party debtor = fetchParty(debtorReference);\n            Party creditor = fetchParty(creditorReference);\n            Lease lease = fetchLease(leaseReference);\n            bankMandate = bankMandates.newBankMandate(reference, name, startDate, endDate, debtor, creditor, bankAccount);\n            lease.paidBy(bankMandate);\n        }\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putBreakOption(\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"breakType\") String breakTypeStr,\n            @Named(\"breakExcerciseType\") String breakExcerciseTypeStr,\n            @Named(\"breakDate\") LocalDate breakDate,\n            @Named(\"notificationDate\") LocalDate notificationDate,\n            @Named(\"notificationPeriod\") @Optional String notificationPeriodStr,\n            @Named(\"description\") @Optional String description\n            ) {\n        Lease lease = fetchLease(leaseReference);\n        BreakType breakType = BreakType.valueOf(breakTypeStr);\n        BreakExerciseType breakExerciseType = BreakExerciseType.valueOf(breakExcerciseTypeStr);\n        if (notificationDate != null) {\n            Period period = new Period(notificationDate, breakDate);\n            notificationPeriodStr = JodaPeriodUtils.asSimpleString(period);\n        }\n        if (lease.validateNewBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description) == null) {\n            lease.newBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description);\n        }\n    }\n\n    // //////////////////////////////////////\n\n    private Agreements agreements;\n\n    public void injectAgreements(Agreements agreements) {\n        this.agreements = agreements;\n    }\n\n    private BankMandates bankMandates;\n\n    public void injectBankMandates(BankMandates bankMandates) {\n        this.bankMandates = bankMandates;\n    }\n\n    private ClockService clockService;\n\n    public void setClockService(ClockService clockService) {\n        this.clockService = clockService;\n    }\n\n    private Countries countries;\n\n    public void injectCountries(final Countries countries) {\n        this.countries = countries;\n    }\n\n    private States states;\n\n    public void injectStates(final States states) {\n        this.states = states;\n    }\n\n    private Units<Unit> units;\n\n    public void injectUnits(final Units<Unit> units) {\n        this.units = units;\n    }\n\n    private Properties properties;\n\n    public void injectProperties(final Properties properties) {\n        this.properties = properties;\n    }\n\n    private Parties parties;\n\n    public void injectParties(final Parties parties) {\n        this.parties = parties;\n    }\n\n    private Organisations organisations;\n\n    public void injectOrganisations(final Organisations organisations) {\n        this.organisations = organisations;\n    }\n\n    private Persons persons;\n\n    public void injectOrganisations(final Persons persons) {\n        this.persons = persons;\n    }\n\n    private CommunicationChannelContributions communicationChannelContributions;\n\n    public void injectCommunicationChannelContributedActions(final CommunicationChannelContributions communicationChannelContributedActions) {\n        this.communicationChannelContributions = communicationChannelContributedActions;\n    }\n\n    private CommunicationChannels communicationChannels;\n\n    public void injectCommunicationChannels(final CommunicationChannels communicationChannels) {\n        this.communicationChannels = communicationChannels;\n    }\n\n    private PostalAddresses postalAddresses;\n\n    public void injectPostalAddresses(PostalAddresses postalAddresses) {\n        this.postalAddresses = postalAddresses;\n    }\n\n    private EmailAddresses emailAddresses;\n\n    public void injectEmailAddresses(EmailAddresses emailAddresses) {\n        this.emailAddresses = emailAddresses;\n    }\n\n    private PhoneOrFaxNumbers phoneOrFaxNumbers;\n\n    public void setPhoneOrFaxNumbers(PhoneOrFaxNumbers phoneOrFaxNumbers) {\n        this.phoneOrFaxNumbers = phoneOrFaxNumbers;\n    }\n\n    private Leases leases;\n\n    public void injectLeaseRepository(final Leases leases) {\n        this.leases = leases;\n    }\n\n    private AgreementRoleTypes agreementRoleTypes;\n\n    public void injectAgreementRoleTypes(AgreementRoleTypes agreementRoleTypes) {\n        this.agreementRoleTypes = agreementRoleTypes;\n    }\n\n    private Occupancies occupancies;\n\n    public void injectLeaseUnits(final Occupancies leaseUnits) {\n        this.occupancies = leaseUnits;\n    }\n\n    private Taxes taxes;\n\n    public void injectTaxes(final Taxes taxes) {\n        this.taxes = taxes;\n    }\n\n    private Charges charges;\n\n    public void injectCharges(final Charges charges) {\n        this.charges = charges;\n    }\n\n    private ChargeGroups chargeGroups;\n\n    public void injectChargeGroups(final ChargeGroups chargeGroups) {\n        this.chargeGroups = chargeGroups;\n    }\n\n    private Indices indices;\n\n    public void injectIndices(final Indices indices) {\n        this.indices = indices;\n    }\n\n    private FinancialAccounts financialAccounts;\n\n    public void injectFinancialAccounts(FinancialAccounts financialAccounts) {\n        this.financialAccounts = financialAccounts;\n    }\n\n    private Invoices invoices;\n\n    public void injectInvoices(Invoices invoices) {\n        this.invoices = invoices;\n    }\n\n    private AgreementRoleCommunicationChannelTypes agreementRoleCommunicationChannelTypes;\n\n    public void injectAgreementRoleCommunicationChannelTypes(AgreementRoleCommunicationChannelTypes agreementRoleCommunicationChannelTypes) {\n        this.agreementRoleCommunicationChannelTypes = agreementRoleCommunicationChannelTypes;\n    }\n\n    private LeaseTypes leaseTypes;\n\n    public void injectLeaseTypes(LeaseTypes leaseTypes) {\n        this.leaseTypes = leaseTypes;\n    }\n\n}",
        "package": "package org.estatio.api;",
        "tree_path": "Api",
        "name": "Api",
        "modifiers": "@Named(\"Migration\")\npublic",
        "superclass": "extends AbstractFactoryAndRepository",
        "super_interfaces": null,
        "body": "{\n\n    @Override\n    public String getId() {\n        return \"api\";\n    }\n\n    public String iconName() {\n        return \"Api\";\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putCountry(\n            @Named(\"code\") String code,\n            @Named(\"alpha2Code\") String alpha2Code,\n            @Named(\"name\") String name) {\n        Country country = countries.findCountry(code);\n        if (country == null) {\n            country = countries.createCountry(code, alpha2Code, name);\n        }\n    }\n\n    private Country fetchCountry(String countryCode) {\n        return fetchCountry(countryCode, true);\n    }\n\n    private Country fetchCountry(String countryCode, boolean exception) {\n        Country country = countries.findCountry(countryCode);\n        if (country == null && exception) {\n            throw new ApplicationException(String.format(\"Country with code %1$s not found\", countryCode));\n        }\n        return country;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putState(\n            @Named(\"code\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"countryCode\") String countryCode) {\n        Country country = fetchCountry(countryCode);\n        State state = states.findState(countryCode);\n        if (state == null) {\n            state = states.newState(reference, name, country);\n        }\n        state.setName(name);\n        state.setCountry(country);\n    }\n\n    private State fetchState(String stateCode, boolean exception) {\n        State country = states.findState(stateCode);\n        if (country == null && exception) {\n            throw new ApplicationException(String.format(\"State with code %1$s not found\", stateCode));\n        }\n        return country;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseType(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name) {\n        leaseTypes.findOrCreate(reference, name);\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putCharge(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"description\") String description,\n            @Named(\"taxReference\") String taxReference,\n            @Named(\"chargeGroupReference\") String chargeGroupReference) {\n        Tax tax = fetchTaxIfAny(taxReference);\n        ChargeGroup chargeGroup = fetchOrCreateChargeGroup(chargeGroupReference);\n        charges.newCharge(reference, name, description, tax, chargeGroup);\n    }\n\n    private Charge fetchCharge(String chargeReference) {\n        Charge charge = charges.findCharge(chargeReference);\n        if (charge == null) {\n            throw new ApplicationException(String.format(\"Charge with reference %s not found.\", chargeReference));\n        }\n        return charge;\n    }\n\n    private ChargeGroup fetchOrCreateChargeGroup(String chargeGroupReference) {\n        ChargeGroup chargeGroup = chargeGroups.findChargeGroup(chargeGroupReference);\n        if (chargeGroup == null) {\n            chargeGroup = chargeGroups.createChargeGroup(chargeGroupReference, null);\n        }\n        return chargeGroup;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putTax(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"percentage\") BigDecimal percentage,\n            @Named(\"startDate\") LocalDate startDate) {\n        Tax tax = fetchTaxIfAny(reference);\n        if (tax == null) {\n            tax = taxes.newTax(reference, name);\n            tax.setName(name);\n        }\n        tax.newRate(startDate, percentage);\n    }\n\n    private Tax fetchTaxIfAny(String reference) {\n        return taxes.findTaxByReference(reference);\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPerson(\n            @Named(\"reference\") String reference,\n            @Named(\"initials\") @Optional String initials,\n            @Named(\"firstName\") String firstName,\n            @Named(\"lastName\") String lastName) {\n        Person person = (Person) parties.findPartyByReference(reference);\n        if (person == null) {\n            person = persons.newPerson(reference, initials, firstName, lastName);\n        }\n        person.setFirstName(firstName);\n        person.setLastName(lastName);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putOrganisation(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"vatCode\") @Optional String vatCode,\n            @Named(\"fiscalCode\") @Optional String fiscalCode) {\n        Organisation org = (Organisation) parties.findPartyByReference(reference);\n        if (org == null) {\n            org = organisations.newOrganisation(reference, name);\n            org.setFiscalCode(fiscalCode);\n            org.setVatCode(vatCode);\n        }\n        org.setName(name);\n    }\n\n    private Party fetchParty(String partyReference) {\n        Party party = parties.findPartyByReference(partyReference);\n        if (party == null) {\n            throw new ApplicationException(String.format(\"Party with reference %s not found.\", partyReference));\n        }\n        return party;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putProperty(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"countryCode\") String countryCode,\n            @Named(\"city\") String city,\n            @Named(\"type\") String type,\n            @Named(\"acquireDate\") @Optional LocalDate acquireDate,\n            @Named(\"disposalDate\") @Optional LocalDate disposalDate,\n            @Named(\"openingDate\") @Optional LocalDate openingDate,\n            @Named(\"ownerReference\") @Optional String ownerReference,\n            @Named(\"numeratorFormat\") @Optional String numeratorFormat\n            ) {\n        Party owner = fetchParty(ownerReference);\n        Property property = fetchProperty(reference, true);\n        property.setName(name);\n        property.setCountry(fetchCountry(countryCode));\n        property.setCity(city);\n        property.setType(PropertyType.valueOf(type));\n        property.setAcquireDate(acquireDate);\n        property.setDisposalDate(disposalDate);\n        property.setOpeningDate(openingDate);\n        property.addRoleIfDoesNotExist(owner, FixedAssetRoleType.PROPERTY_OWNER, null, null);\n        if (numeratorFormat != null)\n            invoices.createInvoiceNumberNumerator(property, numeratorFormat, BigInteger.ZERO);\n    }\n\n    private Property fetchProperty(String reference, boolean createIfNotFond) {\n        Property property = properties.findPropertyByReference(reference);\n        if (property == null) {\n            if (!createIfNotFond)\n                throw new ApplicationException(String.format(\"Property with reference %s not found.\", reference));\n            property = properties.newProperty(reference, null, PropertyType.MIXED, null, null, null);\n        }\n        return property;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putUnit(\n            @Named(\"reference\") String reference,\n            @Named(\"propertyReference\") String propertyReference,\n            @Named(\"ownerReference\") @Optional String ownerReference,\n            @Named(\"name\") String name, @Named(\"type\") String type,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"area\") @Optional BigDecimal area,\n            @Named(\"salesArea\") @Optional BigDecimal salesArea,\n            @Named(\"storageArea\") @Optional BigDecimal storageArea,\n            @Named(\"mezzanineArea\") @Optional BigDecimal mezzanineArea,\n            @Named(\"dehorsArea\") @Optional BigDecimal dehorsArea,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"city\") @Optional String city,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") @Optional String countryCode) {\n        Property property = fetchProperty(propertyReference, false);\n        Unit unit = units.findUnitByReference(reference);\n        if (unit == null) {\n            unit = property.newUnit(reference, name, UnitType.BOUTIQUE);\n        }\n        // set attributes\n        unit.setName(name);\n        unit.setType(UnitType.valueOf(type));\n        unit.changeDates(startDate, endDate);\n        unit.setArea(area);\n        unit.setSalesArea(salesArea);\n        unit.setStorageArea(storageArea);\n        unit.setMezzanineArea(mezzanineArea);\n        unit.setDehorsArea(dehorsArea);\n        CommunicationChannel cc = communicationChannelContributions.findCommunicationChannelForType(unit, CommunicationChannelType.POSTAL_ADDRESS);\n        if (cc == null) {\n            communicationChannelContributions.newPostal(unit, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, null, postalCode, city);\n        }\n    }\n\n    private Unit fetchUnit(String unitReference) {\n        if (unitReference != null) {\n            Unit unit = units.findUnitByReference(unitReference);\n            if (unit == null) {\n                throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n            }\n            return unit;\n        }\n        return null;\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPropertyPostalAddress(\n            @Named(\"propertyReference\") String propertyReference,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"address2\") @Optional String address2,\n            @Named(\"city\") String city,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") String countryCode) {\n        final Property property = properties.findPropertyByReference(propertyReference);\n        if (property == null) {\n            throw new ApplicationException(String.format(\"Property with reference %s not found.\", propertyReference));\n        }\n        final CommunicationChannel comm = communicationChannelContributions.findCommunicationChannelForType(property, null);\n        if (comm == null) {\n            communicationChannelContributions.newPostal(property, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, address2, postalCode, city);\n        }\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPartyCommunicationChannels(\n            @Named(\"partyReference\") String partyReference,\n            @Named(\"reference\") @Optional String reference,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"address2\") @Optional String address2,\n            @Named(\"city\") @Optional String city,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") @Optional String countryCode,\n            @Named(\"phoneNumber\") @Optional String phoneNumber,\n            @Named(\"faxNumber\") @Optional String faxNumber,\n            @Named(\"emailAddress\") @Optional String emailAddress\n            ) {\n        Party party = fetchParty(partyReference);\n        if (party == null)\n            throw new ApplicationException(String.format(\"Party with reference [%s] not found\", partyReference));\n\n        // Address\n        if (address1 != null) {\n            Country country = fetchCountry(countryCode);\n            PostalAddress comm = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, country);\n            if (comm == null) {\n                comm = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, states.findState(stateCode), countries.findCountry(countryCode));\n                comm.setReference(reference);\n            }\n        }\n        // Phone\n        if (phoneNumber != null) {\n            CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, phoneNumber);\n            if (comm == null) {\n                comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.PHONE_NUMBER, phoneNumber);\n                comm.setReference(reference);\n            }\n        }\n        // Fax\n        if (faxNumber != null) {\n            CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, faxNumber);\n            if (comm == null) {\n                comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.FAX_NUMBER, faxNumber);\n                comm.setReference(reference);\n            }\n        }\n        // Email\n        if (emailAddress != null) {\n            CommunicationChannel comm = emailAddresses.findByEmailAddress(party, emailAddress);\n            if (comm == null) {\n                comm = communicationChannels.newEmail(party, CommunicationChannelType.EMAIL_ADDRESS, emailAddress);\n                comm.setReference(reference);\n            }\n        }\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putPropertyActor(\n            @Named(\"propertyReference\") String propertyReference,\n            @Named(\"partyReference\") String partyReference,\n            @Named(\"type\") String typeStr,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate) {\n        final Property property = fetchProperty(propertyReference, false);\n        final Party party = fetchParty(partyReference);\n        final FixedAssetRoleType type = FixedAssetRoleType.valueOf(typeStr);\n        property.addRoleIfDoesNotExist(party, type, startDate, endDate);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLease(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") String name,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"landlordReference\") String landlordReference,\n            @Named(\"type\") String type,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"terminationDate\") @Optional LocalDate terminationDate,\n            @Named(\"propertyReference\") @Optional String propertyReference\n            ) {\n        Party tenant = fetchParty(tenantReference);\n        Party landlord = fetchParty(landlordReference);\n        Lease lease = leases.findLeaseByReference(reference);\n        LeaseType leaseType = leaseTypes.findOrCreate(type, null);\n        if (lease == null) {\n            lease = leases.newLease(reference, name, leaseType, startDate, null, endDate, landlord, tenant);\n        }\n        lease.setTerminationDate(terminationDate);\n    }\n\n    private Lease fetchLease(String leaseReference) {\n        Lease lease;\n        lease = leases.findLeaseByReference(leaseReference);\n        if (lease == null) {\n            throw new ApplicationException(String.format(\"Lease with reference %s not found.\", leaseReference));\n        }\n        return lease;\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseLink(@Named(\"leaseReference\") String leaseReference, @Named(\"previousLeaseReference\") String previousLeaseReference) {\n        Lease lease = fetchLease(leaseReference);\n        Lease previousLease = fetchLease(previousLeaseReference);\n        lease.modifyPrevious(previousLease);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putOccupancy(\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"tenancyStartDate\") @Optional LocalDate tenancyStartDate,\n            @Named(\"tenancyEndDate\") @Optional LocalDate tenancyEndDate,\n            @Named(\"size\") @Optional String size,\n            @Named(\"brand\") @Optional String brand,\n            @Named(\"sector\") @Optional String sector,\n            @Named(\"activity\") @Optional String activity,\n            @Named(\"reportTurnover\") @Optional String reportTurnover,\n            @Named(\"reportRent\") @Optional String reportRent,\n            @Named(\"reportOCR\") @Optional String reportOCR) {\n        Lease lease = fetchLease(leaseReference);\n        UnitForLease unit = (UnitForLease) units.findUnitByReference(unitReference);\n        if (unitReference != null && unit == null) {\n            throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n        }\n        Occupancy occupancy = occupancies.findByLeaseAndUnitAndStartDate(lease, unit, startDate);\n        if (occupancy == null) {\n            occupancy = lease.occupy(unit, startDate);\n        }\n\n        occupancy.setEndDate(endDate);\n        occupancy.setUnitSizeName(size);\n        occupancy.setBrandName(brand != null ? brand.replaceAll(\"\\\\p{C}\", \"\").trim() : null);\n        occupancy.setSectorName(sector);\n        occupancy.setActivityName(activity);\n        occupancy.setReportTurnover(reportTurnover != null ? OccupancyReportingType.valueOf(reportTurnover) : OccupancyReportingType.NO);\n        occupancy.setReportRent(reportRent != null ? OccupancyReportingType.valueOf(reportRent) : OccupancyReportingType.NO);\n        occupancy.setReportOCR(reportOCR != null ? OccupancyReportingType.valueOf(reportOCR) : OccupancyReportingType.NO);\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseItem(\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"type\") @Optional String leaseItemTypeName,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"chargeReference\") @Optional String chargeReference,\n            @Named(\"nextDueDate\") @Optional LocalDate nextDueDate,\n            @Named(\"invoicingFrequency\") @Optional String invoicingFrequency,\n            @Named(\"paymentMethod\") @Optional String paymentMethod,\n            @Named(\"status\") @Optional String status) {\n        Lease lease = fetchLease(leaseReference);\n\n        @SuppressWarnings(\"unused\")\n        Unit unit = fetchUnit(unitReference);\n\n        LeaseItemType itemType = fetchLeaseItemType(leaseItemTypeName);\n        Charge charge = fetchCharge(chargeReference);\n        //\n        LeaseItem item = lease.findItem(itemType, startDate, sequence);\n        if (item == null) {\n            item = lease.newItem(itemType, charge, InvoicingFrequency.valueOf(invoicingFrequency), PaymentMethod.valueOf(paymentMethod), startDate);\n        }\n        final LeaseItemStatus leaseItemStatus = LeaseItemStatus.valueOfElse(status, LeaseItemStatus.APPROVED);\n        item.setStatus(leaseItemStatus);\n        item.setEndDate(endDate);\n        item.setSequence(sequence);\n    }\n\n    private LeaseItemType fetchLeaseItemType(String type) {\n        LeaseItemType itemType = LeaseItemType.valueOf(type);\n        if (itemType == null) {\n            throw new ApplicationException(String.format(\"Type with reference %s not found.\", type));\n        }\n        return itemType;\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeasePostalAddress(\n            @Named(\"partyReference\") String partyReference,\n            @Named(\"agreementRoleType\") String agreementRoleType,\n            @Named(\"leaseReference\") @Optional String leaseReference,\n            @Named(\"address1\") @Optional String address1,\n            @Named(\"address2\") @Optional String address2,\n            @Named(\"postalCode\") @Optional String postalCode,\n            @Named(\"city\") @Optional String city,\n            @Named(\"stateCode\") @Optional String stateCode,\n            @Named(\"countryCode\") @Optional String countryCode,\n            @Named(\"isInvoiceAddress\") @Optional BigInteger isInvoiceAddress\n            ) {\n        if (address1 != null && partyReference != null && leaseReference != null) {\n            Lease lease = fetchLease(leaseReference);\n            Party party = fetchParty(partyReference);\n            AgreementRoleCommunicationChannelType agreementRoleCommunicationChannelType = agreementRoleCommunicationChannelTypes.findByTitle(isInvoiceAddress.compareTo(BigInteger.ZERO) == 0 ? LeaseConstants.ARCCT_INVOICE_ADDRESS : LeaseConstants.ARCCT_ADMINISTRATION_ADDRESS);\n            if (agreementRoleCommunicationChannelType == null)\n                throw new ApplicationException(String.format(\"AgreementRoleCommunicationChannelType not found.\"));\n            PostalAddress address = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, fetchCountry(countryCode));\n            if (address == null) {\n                address = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, fetchState(stateCode, false), fetchCountry(countryCode, false));\n            }\n            AgreementRoleType art = agreementRoleTypes.findByTitle(StringUtils.capitalize(agreementRoleType.toLowerCase()));\n            if (art == null)\n                throw new ApplicationException(String.format(\"AgreementRoleType %s not found.\", agreementRoleType));\n            AgreementRole role = lease.findRole(party, art, clockService.now());\n            if (role == null)\n                throw new ApplicationException(String.format(\"Role for %s, %s not found.\", partyReference, agreementRoleType));\n            role.addCommunicationChannel(agreementRoleCommunicationChannelType, address);\n        }\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseTermForIndexableRent(\n            // start generic fields\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"itemSequence\") BigInteger itemSequence,\n            @Named(\"itemType\") String itemType,\n            @Named(\"itemStartDate\") LocalDate itemStartDate,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"status\") @Optional String statusStr,\n            // end generic fields\n            @Named(\"indexationStatus\") @Optional String indexationStatusStr,\n            @Named(\"reviewDate\") @Optional LocalDate reviewDate,\n            @Named(\"effectiveDate\") @Optional LocalDate effectiveDate,\n            @Named(\"baseValue\") @Optional BigDecimal baseValue,\n            @Named(\"indexedValue\") @Optional BigDecimal indexedValue,\n            @Named(\"settledValue\") @Optional BigDecimal settledValue,\n            @Named(\"levellingValue\") @Optional BigDecimal levellingValue,\n            @Named(\"levellingPercentage\") @Optional BigDecimal levellingPercentage,\n            @Named(\"indexReference\") @Optional String indexReference,\n            @Named(\"indexationFrequency\") @Optional String indexationFrequency,\n            @Named(\"indexationPercentage\") @Optional BigDecimal indexationPercentage,\n            @Named(\"baseIndexReference\") @Optional String baseIndexReference,\n            @Named(\"baseIndexStartDate\") @Optional LocalDate baseIndexStartDate,\n            @Named(\"baseIndexEndDate\") @Optional LocalDate baseIndexEndDate,\n            @Named(\"baseIndexValue\") @Optional BigDecimal baseIndexValue,\n            @Named(\"nextIndexReference\") @Optional String nextIndexReference,\n            @Named(\"nextIndexStartDate\") @Optional LocalDate nextIndexStartDate,\n            @Named(\"nextIndexEndDate\") @Optional LocalDate nextIndexEndDate,\n            @Named(\"nextIndexValue\") @Optional BigDecimal nextIndexValue) {\n        LeaseTermForIndexableRent term = (LeaseTermForIndexableRent) putLeaseTerm(\n                leaseReference,\n                unitReference,\n                itemSequence,\n                itemType,\n                itemStartDate,\n                startDate,\n                endDate,\n                sequence,\n                statusStr);\n        if (term != null) {\n            Index index = indices.findIndex(indexReference);\n            LeaseTermFrequency indexationFreq = LeaseTermFrequency.valueOf(indexationFrequency);\n            term.setIndex(index);\n            term.setFrequency(indexationFreq);\n            term.setEffectiveDate(effectiveDate);\n            term.setBaseValue(baseValue);\n            term.setIndexedValue(indexedValue);\n            term.setSettledValue(settledValue);\n            term.setBaseIndexStartDate(baseIndexStartDate);\n            term.setBaseIndexValue(baseIndexValue);\n            term.setNextIndexStartDate(nextIndexStartDate);\n            term.setNextIndexValue(nextIndexValue);\n            term.setIndexationPercentage(indexationPercentage);\n            IndexationStatus indexationStatus = indexationStatusStr == null ? null : IndexationStatus.valueOf(indexationStatusStr);\n            term.setIndexationStatus(indexationStatus);\n            term.setLevellingPercentage(levellingPercentage);\n        }\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseTermForTurnoverRent(\n            // start generic fields\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"itemSequence\") BigInteger itemSequence,\n            @Named(\"itemType\") String itemType,\n            @Named(\"itemStartDate\") LocalDate itemStartDate,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"status\") @Optional String status,\n            // end generic fields\n            @Named(\"turnoverRentRule\") @Optional String turnoverRentRule,\n            @Named(\"budgetedTurnover\") @Optional BigDecimal budgetedTurnover,\n            @Named(\"auditedTurnover\") @Optional BigDecimal auditedTurnover,\n            @Named(\"turnoverRentValue\") @Optional BigDecimal turnoverRentValue) {\n        LeaseTermForTurnoverRent term = (LeaseTermForTurnoverRent) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n        if (term != null) {\n            term.setTurnoverRentValue(turnoverRentValue);\n            term.setBudgetedTurnover(budgetedTurnover);\n            term.setAuditedTurnover(auditedTurnover);\n            term.setTurnoverRentRule(turnoverRentRule);\n        }\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putLeaseTermForServiceCharge(\n            // start generic fields\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"tenantReference\") String tenantReference,\n            @Named(\"unitReference\") @Optional String unitReference,\n            @Named(\"itemSequence\") BigInteger itemSequence,\n            @Named(\"itemType\") String itemType,\n            @Named(\"itemStartDate\") LocalDate itemStartDate,\n            @Named(\"sequence\") BigInteger sequence,\n            @Named(\"startDate\") @Optional LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate,\n            @Named(\"status\") @Optional String status,\n            // end generic fields\n            @Named(\"auditedValue\") @Optional BigDecimal auditedValue,\n            @Named(\"budgetedValue\") @Optional BigDecimal budgetedValue) {\n        LeaseTermForServiceCharge term = (LeaseTermForServiceCharge) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n        if (term != null) {\n            term.setAuditedValue(auditedValue);\n            term.setBudgetedValue(budgetedValue);\n        }\n    }\n\n    private LeaseTerm putLeaseTerm(\n            String leaseReference,\n            String unitReference,\n            BigInteger itemSequence,\n            String itemType,\n            LocalDate itemStartDate,\n            LocalDate startDate,\n            LocalDate endDate,\n            BigInteger sequence,\n            String statusStr) {\n        Lease lease = leases.findLeaseByReference(leaseReference);\n        if (lease == null) {\n            throw new ApplicationException(String.format(\"Leaseitem with reference %1$s not found.\", leaseReference));\n        }\n        Unit unit;\n        if (unitReference != null) {\n            unit = units.findUnitByReference(unitReference);\n            if (unitReference != null && unit == null) {\n                throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n            }\n        }\n        LeaseItemType leaseItemType = fetchLeaseItemType(itemType);\n        LeaseItem item = lease.findItem(leaseItemType, itemStartDate, itemSequence);\n        if (item == null) {\n            throw new ApplicationException(String.format(\"LeaseItem with reference %1$s, %2$s, %3$s, %4$s not found.\", leaseReference, leaseItemType.toString(), itemStartDate.toString(), itemSequence.toString()));\n        }\n        // check if the date is within range of lease\n        if (lease.getTerminationDate() == null || lease.getTerminationDate().compareTo(startDate) >= 0) {\n            LeaseTerm term = item.findTermWithSequence(sequence);\n            if (term == null) {\n                if (sequence.equals(BigInteger.ONE)) {\n                    term = item.newTerm(startDate);\n                } else {\n                    LeaseTerm previousTerm = item.findTermWithSequence(sequence.subtract(BigInteger.ONE));\n                    term = previousTerm.createNext(startDate);\n                }\n                term.setSequence(sequence);\n            }\n            term.setStatus(org.estatio.dom.lease.LeaseTermStatus.valueOf(statusStr));\n            // will be overwritten if there is a next term\n            term.setEndDate(lease.getTerminationDate());\n            return term;\n        }\n        return null;\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putBankAccount(\n            // start generic fields\n            @Named(\"reference\") @Optional String reference,\n            @Named(\"name\") @Optional String name,\n            @Named(\"bankAccountType\") @Optional String bankAccountType,\n            @Named(\"ownerReference\") String ownerReference,\n            @Named(\"iban\") @Optional String iban,\n            @Named(\"countryCode\") @Optional String countryCode,\n            @Named(\"nationalCheckCode\") @Optional String nationalCheckCode,\n            @Named(\"nationalBankCode\") @Optional String nationalBankCode,\n            @Named(\"branchCode\") @Optional String branchCode,\n            @Named(\"accountNumber\") @Optional String accountNumber\n            ) {\n        BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(reference);\n        Party owner = parties.findPartyByReference(ownerReference);\n        if (owner == null)\n            return;\n        if (bankAccount == null) {\n            bankAccount = financialAccounts.newBankAccount(owner, iban);\n        }\n        bankAccount.setReference(reference);\n        bankAccount.setAccountNumber(accountNumber);\n        bankAccount.setBranchCode(branchCode);\n        bankAccount.setName(name);\n        bankAccount.setCountry(fetchCountry(countryCode, false));\n        bankAccount.setNationalBankCode(nationalBankCode);\n        bankAccount.setNationalCheckCode(nationalCheckCode);\n        bankAccount.setBankAccountType(BankAccountType.valueOf(bankAccountType));\n        bankAccount.verifyIban();\n    }\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putBankMandate(\n            @Named(\"reference\") String reference,\n            @Named(\"name\") @Optional String name,\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"debtorReference\") String debtorReference,\n            @Named(\"creditorReference\") String creditorReference,\n            @Named(\"bankAccountReference\") String bankAccountReference,\n            @Named(\"startDate\") LocalDate startDate,\n            @Named(\"endDate\") @Optional LocalDate endDate) {\n        BankMandate bankMandate = (BankMandate) agreements.findAgreementByReference(reference);\n        BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(bankAccountReference);\n        if (bankAccount == null)\n            throw new ApplicationException(String.format(\"BankAccount with reference %1$s not found\", bankAccountReference));\n        if (bankMandate == null) {\n            Party debtor = fetchParty(debtorReference);\n            Party creditor = fetchParty(creditorReference);\n            Lease lease = fetchLease(leaseReference);\n            bankMandate = bankMandates.newBankMandate(reference, name, startDate, endDate, debtor, creditor, bankAccount);\n            lease.paidBy(bankMandate);\n        }\n    }\n\n    // //////////////////////////////////////\n\n    @ActionSemantics(Of.IDEMPOTENT)\n    public void putBreakOption(\n            @Named(\"leaseReference\") String leaseReference,\n            @Named(\"breakType\") String breakTypeStr,\n            @Named(\"breakExcerciseType\") String breakExcerciseTypeStr,\n            @Named(\"breakDate\") LocalDate breakDate,\n            @Named(\"notificationDate\") LocalDate notificationDate,\n            @Named(\"notificationPeriod\") @Optional String notificationPeriodStr,\n            @Named(\"description\") @Optional String description\n            ) {\n        Lease lease = fetchLease(leaseReference);\n        BreakType breakType = BreakType.valueOf(breakTypeStr);\n        BreakExerciseType breakExerciseType = BreakExerciseType.valueOf(breakExcerciseTypeStr);\n        if (notificationDate != null) {\n            Period period = new Period(notificationDate, breakDate);\n            notificationPeriodStr = JodaPeriodUtils.asSimpleString(period);\n        }\n        if (lease.validateNewBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description) == null) {\n            lease.newBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description);\n        }\n    }\n\n    // //////////////////////////////////////\n\n    private Agreements agreements;\n\n    public void injectAgreements(Agreements agreements) {\n        this.agreements = agreements;\n    }\n\n    private BankMandates bankMandates;\n\n    public void injectBankMandates(BankMandates bankMandates) {\n        this.bankMandates = bankMandates;\n    }\n\n    private ClockService clockService;\n\n    public void setClockService(ClockService clockService) {\n        this.clockService = clockService;\n    }\n\n    private Countries countries;\n\n    public void injectCountries(final Countries countries) {\n        this.countries = countries;\n    }\n\n    private States states;\n\n    public void injectStates(final States states) {\n        this.states = states;\n    }\n\n    private Units<Unit> units;\n\n    public void injectUnits(final Units<Unit> units) {\n        this.units = units;\n    }\n\n    private Properties properties;\n\n    public void injectProperties(final Properties properties) {\n        this.properties = properties;\n    }\n\n    private Parties parties;\n\n    public void injectParties(final Parties parties) {\n        this.parties = parties;\n    }\n\n    private Organisations organisations;\n\n    public void injectOrganisations(final Organisations organisations) {\n        this.organisations = organisations;\n    }\n\n    private Persons persons;\n\n    public void injectOrganisations(final Persons persons) {\n        this.persons = persons;\n    }\n\n    private CommunicationChannelContributions communicationChannelContributions;\n\n    public void injectCommunicationChannelContributedActions(final CommunicationChannelContributions communicationChannelContributedActions) {\n        this.communicationChannelContributions = communicationChannelContributedActions;\n    }\n\n    private CommunicationChannels communicationChannels;\n\n    public void injectCommunicationChannels(final CommunicationChannels communicationChannels) {\n        this.communicationChannels = communicationChannels;\n    }\n\n    private PostalAddresses postalAddresses;\n\n    public void injectPostalAddresses(PostalAddresses postalAddresses) {\n        this.postalAddresses = postalAddresses;\n    }\n\n    private EmailAddresses emailAddresses;\n\n    public void injectEmailAddresses(EmailAddresses emailAddresses) {\n        this.emailAddresses = emailAddresses;\n    }\n\n    private PhoneOrFaxNumbers phoneOrFaxNumbers;\n\n    public void setPhoneOrFaxNumbers(PhoneOrFaxNumbers phoneOrFaxNumbers) {\n        this.phoneOrFaxNumbers = phoneOrFaxNumbers;\n    }\n\n    private Leases leases;\n\n    public void injectLeaseRepository(final Leases leases) {\n        this.leases = leases;\n    }\n\n    private AgreementRoleTypes agreementRoleTypes;\n\n    public void injectAgreementRoleTypes(AgreementRoleTypes agreementRoleTypes) {\n        this.agreementRoleTypes = agreementRoleTypes;\n    }\n\n    private Occupancies occupancies;\n\n    public void injectLeaseUnits(final Occupancies leaseUnits) {\n        this.occupancies = leaseUnits;\n    }\n\n    private Taxes taxes;\n\n    public void injectTaxes(final Taxes taxes) {\n        this.taxes = taxes;\n    }\n\n    private Charges charges;\n\n    public void injectCharges(final Charges charges) {\n        this.charges = charges;\n    }\n\n    private ChargeGroups chargeGroups;\n\n    public void injectChargeGroups(final ChargeGroups chargeGroups) {\n        this.chargeGroups = chargeGroups;\n    }\n\n    private Indices indices;\n\n    public void injectIndices(final Indices indices) {\n        this.indices = indices;\n    }\n\n    private FinancialAccounts financialAccounts;\n\n    public void injectFinancialAccounts(FinancialAccounts financialAccounts) {\n        this.financialAccounts = financialAccounts;\n    }\n\n    private Invoices invoices;\n\n    public void injectInvoices(Invoices invoices) {\n        this.invoices = invoices;\n    }\n\n    private AgreementRoleCommunicationChannelTypes agreementRoleCommunicationChannelTypes;\n\n    public void injectAgreementRoleCommunicationChannelTypes(AgreementRoleCommunicationChannelTypes agreementRoleCommunicationChannelTypes) {\n        this.agreementRoleCommunicationChannelTypes = agreementRoleCommunicationChannelTypes;\n    }\n\n    private LeaseTypes leaseTypes;\n\n    public void injectLeaseTypes(LeaseTypes leaseTypes) {\n        this.leaseTypes = leaseTypes;\n    }\n\n}",
        "start_point": {
            "row": 103,
            "column": 0
        },
        "end_point": {
            "row": 985,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Override\npublic String getId() {\n    return \"api\";\n}",
                "name": "getId",
                "modifiers": "@Override\n    public",
                "return_type": "String",
                "parameters": [],
                "body": "{\n    return \"api\";\n}",
                "start_point": {
                    "row": 106,
                    "column": 4
                },
                "end_point": {
                    "row": 109,
                    "column": 5
                }
            },
            {
                "definition": "public String iconName() {\n    return \"Api\";\n}",
                "name": "iconName",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [],
                "body": "{\n    return \"Api\";\n}",
                "start_point": {
                    "row": 111,
                    "column": 4
                },
                "end_point": {
                    "row": 113,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putCountry(\n        @Named(\"code\") String code,\n        @Named(\"alpha2Code\") String alpha2Code,\n        @Named(\"name\") String name) {\n    Country country = countries.findCountry(code);\n    if (country == null) {\n        country = countries.createCountry(code, alpha2Code, name);\n    }\n}",
                "name": "putCountry",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"code\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"alpha2Code\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    }
                ],
                "body": "{\n    Country country = countries.findCountry(code);\n    if (country == null) {\n        country = countries.createCountry(code, alpha2Code, name);\n    }\n}",
                "start_point": {
                    "row": 117,
                    "column": 4
                },
                "end_point": {
                    "row": 126,
                    "column": 5
                }
            },
            {
                "definition": "private Country fetchCountry(String countryCode) {\n    return fetchCountry(countryCode, true);\n}",
                "name": "fetchCountry",
                "modifiers": "private",
                "return_type": "Country",
                "parameters": [
                    {
                        "type": "String",
                        "name": "countryCode"
                    }
                ],
                "body": "{\n    return fetchCountry(countryCode, true);\n}",
                "start_point": {
                    "row": 128,
                    "column": 4
                },
                "end_point": {
                    "row": 130,
                    "column": 5
                }
            },
            {
                "definition": "private Country fetchCountry(String countryCode, boolean exception) {\n    Country country = countries.findCountry(countryCode);\n    if (country == null && exception) {\n        throw new ApplicationException(String.format(\"Country with code %1$s not found\", countryCode));\n    }\n    return country;\n}",
                "name": "fetchCountry",
                "modifiers": "private",
                "return_type": "Country",
                "parameters": [
                    {
                        "type": "String",
                        "name": "countryCode"
                    },
                    {
                        "type": "boolean",
                        "name": "exception"
                    }
                ],
                "body": "{\n    Country country = countries.findCountry(countryCode);\n    if (country == null && exception) {\n        throw new ApplicationException(String.format(\"Country with code %1$s not found\", countryCode));\n    }\n    return country;\n}",
                "start_point": {
                    "row": 132,
                    "column": 4
                },
                "end_point": {
                    "row": 138,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putState(\n        @Named(\"code\") String reference,\n        @Named(\"name\") String name,\n        @Named(\"countryCode\") String countryCode) {\n    Country country = fetchCountry(countryCode);\n    State state = states.findState(countryCode);\n    if (state == null) {\n        state = states.newState(reference, name, country);\n    }\n    state.setName(name);\n    state.setCountry(country);\n}",
                "name": "putState",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"code\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"countryCode\")",
                        "name": "String"
                    }
                ],
                "body": "{\n    Country country = fetchCountry(countryCode);\n    State state = states.findState(countryCode);\n    if (state == null) {\n        state = states.newState(reference, name, country);\n    }\n    state.setName(name);\n    state.setCountry(country);\n}",
                "start_point": {
                    "row": 142,
                    "column": 4
                },
                "end_point": {
                    "row": 154,
                    "column": 5
                }
            },
            {
                "definition": "private State fetchState(String stateCode, boolean exception) {\n    State country = states.findState(stateCode);\n    if (country == null && exception) {\n        throw new ApplicationException(String.format(\"State with code %1$s not found\", stateCode));\n    }\n    return country;\n}",
                "name": "fetchState",
                "modifiers": "private",
                "return_type": "State",
                "parameters": [
                    {
                        "type": "String",
                        "name": "stateCode"
                    },
                    {
                        "type": "boolean",
                        "name": "exception"
                    }
                ],
                "body": "{\n    State country = states.findState(stateCode);\n    if (country == null && exception) {\n        throw new ApplicationException(String.format(\"State with code %1$s not found\", stateCode));\n    }\n    return country;\n}",
                "start_point": {
                    "row": 156,
                    "column": 4
                },
                "end_point": {
                    "row": 162,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLeaseType(\n        @Named(\"reference\") String reference,\n        @Named(\"name\") String name) {\n    leaseTypes.findOrCreate(reference, name);\n}",
                "name": "putLeaseType",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    }
                ],
                "body": "{\n    leaseTypes.findOrCreate(reference, name);\n}",
                "start_point": {
                    "row": 166,
                    "column": 4
                },
                "end_point": {
                    "row": 171,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putCharge(\n        @Named(\"reference\") String reference,\n        @Named(\"name\") String name,\n        @Named(\"description\") String description,\n        @Named(\"taxReference\") String taxReference,\n        @Named(\"chargeGroupReference\") String chargeGroupReference) {\n    Tax tax = fetchTaxIfAny(taxReference);\n    ChargeGroup chargeGroup = fetchOrCreateChargeGroup(chargeGroupReference);\n    charges.newCharge(reference, name, description, tax, chargeGroup);\n}",
                "name": "putCharge",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"description\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"taxReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"chargeGroupReference\")",
                        "name": "String"
                    }
                ],
                "body": "{\n    Tax tax = fetchTaxIfAny(taxReference);\n    ChargeGroup chargeGroup = fetchOrCreateChargeGroup(chargeGroupReference);\n    charges.newCharge(reference, name, description, tax, chargeGroup);\n}",
                "start_point": {
                    "row": 175,
                    "column": 4
                },
                "end_point": {
                    "row": 185,
                    "column": 5
                }
            },
            {
                "definition": "private Charge fetchCharge(String chargeReference) {\n    Charge charge = charges.findCharge(chargeReference);\n    if (charge == null) {\n        throw new ApplicationException(String.format(\"Charge with reference %s not found.\", chargeReference));\n    }\n    return charge;\n}",
                "name": "fetchCharge",
                "modifiers": "private",
                "return_type": "Charge",
                "parameters": [
                    {
                        "type": "String",
                        "name": "chargeReference"
                    }
                ],
                "body": "{\n    Charge charge = charges.findCharge(chargeReference);\n    if (charge == null) {\n        throw new ApplicationException(String.format(\"Charge with reference %s not found.\", chargeReference));\n    }\n    return charge;\n}",
                "start_point": {
                    "row": 187,
                    "column": 4
                },
                "end_point": {
                    "row": 193,
                    "column": 5
                }
            },
            {
                "definition": "private ChargeGroup fetchOrCreateChargeGroup(String chargeGroupReference) {\n    ChargeGroup chargeGroup = chargeGroups.findChargeGroup(chargeGroupReference);\n    if (chargeGroup == null) {\n        chargeGroup = chargeGroups.createChargeGroup(chargeGroupReference, null);\n    }\n    return chargeGroup;\n}",
                "name": "fetchOrCreateChargeGroup",
                "modifiers": "private",
                "return_type": "ChargeGroup",
                "parameters": [
                    {
                        "type": "String",
                        "name": "chargeGroupReference"
                    }
                ],
                "body": "{\n    ChargeGroup chargeGroup = chargeGroups.findChargeGroup(chargeGroupReference);\n    if (chargeGroup == null) {\n        chargeGroup = chargeGroups.createChargeGroup(chargeGroupReference, null);\n    }\n    return chargeGroup;\n}",
                "start_point": {
                    "row": 195,
                    "column": 4
                },
                "end_point": {
                    "row": 201,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putTax(\n        @Named(\"reference\") String reference,\n        @Named(\"name\") String name,\n        @Named(\"percentage\") BigDecimal percentage,\n        @Named(\"startDate\") LocalDate startDate) {\n    Tax tax = fetchTaxIfAny(reference);\n    if (tax == null) {\n        tax = taxes.newTax(reference, name);\n        tax.setName(name);\n    }\n    tax.newRate(startDate, percentage);\n}",
                "name": "putTax",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"percentage\")",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"startDate\")",
                        "name": "LocalDate"
                    }
                ],
                "body": "{\n    Tax tax = fetchTaxIfAny(reference);\n    if (tax == null) {\n        tax = taxes.newTax(reference, name);\n        tax.setName(name);\n    }\n    tax.newRate(startDate, percentage);\n}",
                "start_point": {
                    "row": 205,
                    "column": 4
                },
                "end_point": {
                    "row": 217,
                    "column": 5
                }
            },
            {
                "definition": "private Tax fetchTaxIfAny(String reference) {\n    return taxes.findTaxByReference(reference);\n}",
                "name": "fetchTaxIfAny",
                "modifiers": "private",
                "return_type": "Tax",
                "parameters": [
                    {
                        "type": "String",
                        "name": "reference"
                    }
                ],
                "body": "{\n    return taxes.findTaxByReference(reference);\n}",
                "start_point": {
                    "row": 219,
                    "column": 4
                },
                "end_point": {
                    "row": 221,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putPerson(\n        @Named(\"reference\") String reference,\n        @Named(\"initials\") @Optional String initials,\n        @Named(\"firstName\") String firstName,\n        @Named(\"lastName\") String lastName) {\n    Person person = (Person) parties.findPartyByReference(reference);\n    if (person == null) {\n        person = persons.newPerson(reference, initials, firstName, lastName);\n    }\n    person.setFirstName(firstName);\n    person.setLastName(lastName);\n}",
                "name": "putPerson",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"initials\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"firstName\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"lastName\")",
                        "name": "String"
                    }
                ],
                "body": "{\n    Person person = (Person) parties.findPartyByReference(reference);\n    if (person == null) {\n        person = persons.newPerson(reference, initials, firstName, lastName);\n    }\n    person.setFirstName(firstName);\n    person.setLastName(lastName);\n}",
                "start_point": {
                    "row": 225,
                    "column": 4
                },
                "end_point": {
                    "row": 237,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putOrganisation(\n        @Named(\"reference\") String reference,\n        @Named(\"name\") String name,\n        @Named(\"vatCode\") @Optional String vatCode,\n        @Named(\"fiscalCode\") @Optional String fiscalCode) {\n    Organisation org = (Organisation) parties.findPartyByReference(reference);\n    if (org == null) {\n        org = organisations.newOrganisation(reference, name);\n        org.setFiscalCode(fiscalCode);\n        org.setVatCode(vatCode);\n    }\n    org.setName(name);\n}",
                "name": "putOrganisation",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"vatCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"fiscalCode\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Organisation org = (Organisation) parties.findPartyByReference(reference);\n    if (org == null) {\n        org = organisations.newOrganisation(reference, name);\n        org.setFiscalCode(fiscalCode);\n        org.setVatCode(vatCode);\n    }\n    org.setName(name);\n}",
                "start_point": {
                    "row": 239,
                    "column": 4
                },
                "end_point": {
                    "row": 252,
                    "column": 5
                }
            },
            {
                "definition": "private Party fetchParty(String partyReference) {\n    Party party = parties.findPartyByReference(partyReference);\n    if (party == null) {\n        throw new ApplicationException(String.format(\"Party with reference %s not found.\", partyReference));\n    }\n    return party;\n}",
                "name": "fetchParty",
                "modifiers": "private",
                "return_type": "Party",
                "parameters": [
                    {
                        "type": "String",
                        "name": "partyReference"
                    }
                ],
                "body": "{\n    Party party = parties.findPartyByReference(partyReference);\n    if (party == null) {\n        throw new ApplicationException(String.format(\"Party with reference %s not found.\", partyReference));\n    }\n    return party;\n}",
                "start_point": {
                    "row": 254,
                    "column": 4
                },
                "end_point": {
                    "row": 260,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putProperty(\n        @Named(\"reference\") String reference,\n        @Named(\"name\") String name,\n        @Named(\"countryCode\") String countryCode,\n        @Named(\"city\") String city,\n        @Named(\"type\") String type,\n        @Named(\"acquireDate\") @Optional LocalDate acquireDate,\n        @Named(\"disposalDate\") @Optional LocalDate disposalDate,\n        @Named(\"openingDate\") @Optional LocalDate openingDate,\n        @Named(\"ownerReference\") @Optional String ownerReference,\n        @Named(\"numeratorFormat\") @Optional String numeratorFormat\n        ) {\n    Party owner = fetchParty(ownerReference);\n    Property property = fetchProperty(reference, true);\n    property.setName(name);\n    property.setCountry(fetchCountry(countryCode));\n    property.setCity(city);\n    property.setType(PropertyType.valueOf(type));\n    property.setAcquireDate(acquireDate);\n    property.setDisposalDate(disposalDate);\n    property.setOpeningDate(openingDate);\n    property.addRoleIfDoesNotExist(owner, FixedAssetRoleType.PROPERTY_OWNER, null, null);\n    if (numeratorFormat != null)\n        invoices.createInvoiceNumberNumerator(property, numeratorFormat, BigInteger.ZERO);\n}",
                "name": "putProperty",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"countryCode\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"city\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"type\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"acquireDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"disposalDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"openingDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"ownerReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"numeratorFormat\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Party owner = fetchParty(ownerReference);\n    Property property = fetchProperty(reference, true);\n    property.setName(name);\n    property.setCountry(fetchCountry(countryCode));\n    property.setCity(city);\n    property.setType(PropertyType.valueOf(type));\n    property.setAcquireDate(acquireDate);\n    property.setDisposalDate(disposalDate);\n    property.setOpeningDate(openingDate);\n    property.addRoleIfDoesNotExist(owner, FixedAssetRoleType.PROPERTY_OWNER, null, null);\n    if (numeratorFormat != null)\n        invoices.createInvoiceNumberNumerator(property, numeratorFormat, BigInteger.ZERO);\n}",
                "start_point": {
                    "row": 264,
                    "column": 4
                },
                "end_point": {
                    "row": 289,
                    "column": 5
                }
            },
            {
                "definition": "private Property fetchProperty(String reference, boolean createIfNotFond) {\n    Property property = properties.findPropertyByReference(reference);\n    if (property == null) {\n        if (!createIfNotFond)\n            throw new ApplicationException(String.format(\"Property with reference %s not found.\", reference));\n        property = properties.newProperty(reference, null, PropertyType.MIXED, null, null, null);\n    }\n    return property;\n}",
                "name": "fetchProperty",
                "modifiers": "private",
                "return_type": "Property",
                "parameters": [
                    {
                        "type": "String",
                        "name": "reference"
                    },
                    {
                        "type": "boolean",
                        "name": "createIfNotFond"
                    }
                ],
                "body": "{\n    Property property = properties.findPropertyByReference(reference);\n    if (property == null) {\n        if (!createIfNotFond)\n            throw new ApplicationException(String.format(\"Property with reference %s not found.\", reference));\n        property = properties.newProperty(reference, null, PropertyType.MIXED, null, null, null);\n    }\n    return property;\n}",
                "start_point": {
                    "row": 291,
                    "column": 4
                },
                "end_point": {
                    "row": 299,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putUnit(\n        @Named(\"reference\") String reference,\n        @Named(\"propertyReference\") String propertyReference,\n        @Named(\"ownerReference\") @Optional String ownerReference,\n        @Named(\"name\") String name, @Named(\"type\") String type,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate,\n        @Named(\"area\") @Optional BigDecimal area,\n        @Named(\"salesArea\") @Optional BigDecimal salesArea,\n        @Named(\"storageArea\") @Optional BigDecimal storageArea,\n        @Named(\"mezzanineArea\") @Optional BigDecimal mezzanineArea,\n        @Named(\"dehorsArea\") @Optional BigDecimal dehorsArea,\n        @Named(\"address1\") @Optional String address1,\n        @Named(\"city\") @Optional String city,\n        @Named(\"postalCode\") @Optional String postalCode,\n        @Named(\"stateCode\") @Optional String stateCode,\n        @Named(\"countryCode\") @Optional String countryCode) {\n    Property property = fetchProperty(propertyReference, false);\n    Unit unit = units.findUnitByReference(reference);\n    if (unit == null) {\n        unit = property.newUnit(reference, name, UnitType.BOUTIQUE);\n    }\n    // set attributes\n    unit.setName(name);\n    unit.setType(UnitType.valueOf(type));\n    unit.changeDates(startDate, endDate);\n    unit.setArea(area);\n    unit.setSalesArea(salesArea);\n    unit.setStorageArea(storageArea);\n    unit.setMezzanineArea(mezzanineArea);\n    unit.setDehorsArea(dehorsArea);\n    CommunicationChannel cc = communicationChannelContributions.findCommunicationChannelForType(unit, CommunicationChannelType.POSTAL_ADDRESS);\n    if (cc == null) {\n        communicationChannelContributions.newPostal(unit, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, null, postalCode, city);\n    }\n}",
                "name": "putUnit",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"propertyReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"ownerReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"type\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"area\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"salesArea\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"storageArea\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"mezzanineArea\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"dehorsArea\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"address1\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"city\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"postalCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"stateCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"countryCode\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Property property = fetchProperty(propertyReference, false);\n    Unit unit = units.findUnitByReference(reference);\n    if (unit == null) {\n        unit = property.newUnit(reference, name, UnitType.BOUTIQUE);\n    }\n    // set attributes\n    unit.setName(name);\n    unit.setType(UnitType.valueOf(type));\n    unit.changeDates(startDate, endDate);\n    unit.setArea(area);\n    unit.setSalesArea(salesArea);\n    unit.setStorageArea(storageArea);\n    unit.setMezzanineArea(mezzanineArea);\n    unit.setDehorsArea(dehorsArea);\n    CommunicationChannel cc = communicationChannelContributions.findCommunicationChannelForType(unit, CommunicationChannelType.POSTAL_ADDRESS);\n    if (cc == null) {\n        communicationChannelContributions.newPostal(unit, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, null, postalCode, city);\n    }\n}",
                "start_point": {
                    "row": 303,
                    "column": 4
                },
                "end_point": {
                    "row": 339,
                    "column": 5
                }
            },
            {
                "definition": "private Unit fetchUnit(String unitReference) {\n    if (unitReference != null) {\n        Unit unit = units.findUnitByReference(unitReference);\n        if (unit == null) {\n            throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n        }\n        return unit;\n    }\n    return null;\n}",
                "name": "fetchUnit",
                "modifiers": "private",
                "return_type": "Unit",
                "parameters": [
                    {
                        "type": "String",
                        "name": "unitReference"
                    }
                ],
                "body": "{\n    if (unitReference != null) {\n        Unit unit = units.findUnitByReference(unitReference);\n        if (unit == null) {\n            throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n        }\n        return unit;\n    }\n    return null;\n}",
                "start_point": {
                    "row": 341,
                    "column": 4
                },
                "end_point": {
                    "row": 350,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putPropertyPostalAddress(\n        @Named(\"propertyReference\") String propertyReference,\n        @Named(\"address1\") @Optional String address1,\n        @Named(\"address2\") @Optional String address2,\n        @Named(\"city\") String city,\n        @Named(\"postalCode\") @Optional String postalCode,\n        @Named(\"stateCode\") @Optional String stateCode,\n        @Named(\"countryCode\") String countryCode) {\n    final Property property = properties.findPropertyByReference(propertyReference);\n    if (property == null) {\n        throw new ApplicationException(String.format(\"Property with reference %s not found.\", propertyReference));\n    }\n    final CommunicationChannel comm = communicationChannelContributions.findCommunicationChannelForType(property, null);\n    if (comm == null) {\n        communicationChannelContributions.newPostal(property, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, address2, postalCode, city);\n    }\n}",
                "name": "putPropertyPostalAddress",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"propertyReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"address1\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"address2\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"city\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"postalCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"stateCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"countryCode\")",
                        "name": "String"
                    }
                ],
                "body": "{\n    final Property property = properties.findPropertyByReference(propertyReference);\n    if (property == null) {\n        throw new ApplicationException(String.format(\"Property with reference %s not found.\", propertyReference));\n    }\n    final CommunicationChannel comm = communicationChannelContributions.findCommunicationChannelForType(property, null);\n    if (comm == null) {\n        communicationChannelContributions.newPostal(property, CommunicationChannelType.POSTAL_ADDRESS, countries.findCountry(countryCode), states.findState(stateCode), address1, address2, postalCode, city);\n    }\n}",
                "start_point": {
                    "row": 354,
                    "column": 4
                },
                "end_point": {
                    "row": 371,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putPartyCommunicationChannels(\n        @Named(\"partyReference\") String partyReference,\n        @Named(\"reference\") @Optional String reference,\n        @Named(\"address1\") @Optional String address1,\n        @Named(\"address2\") @Optional String address2,\n        @Named(\"city\") @Optional String city,\n        @Named(\"postalCode\") @Optional String postalCode,\n        @Named(\"stateCode\") @Optional String stateCode,\n        @Named(\"countryCode\") @Optional String countryCode,\n        @Named(\"phoneNumber\") @Optional String phoneNumber,\n        @Named(\"faxNumber\") @Optional String faxNumber,\n        @Named(\"emailAddress\") @Optional String emailAddress\n        ) {\n    Party party = fetchParty(partyReference);\n    if (party == null)\n        throw new ApplicationException(String.format(\"Party with reference [%s] not found\", partyReference));\n\n    // Address\n    if (address1 != null) {\n        Country country = fetchCountry(countryCode);\n        PostalAddress comm = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, country);\n        if (comm == null) {\n            comm = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, states.findState(stateCode), countries.findCountry(countryCode));\n            comm.setReference(reference);\n        }\n    }\n    // Phone\n    if (phoneNumber != null) {\n        CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, phoneNumber);\n        if (comm == null) {\n            comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.PHONE_NUMBER, phoneNumber);\n            comm.setReference(reference);\n        }\n    }\n    // Fax\n    if (faxNumber != null) {\n        CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, faxNumber);\n        if (comm == null) {\n            comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.FAX_NUMBER, faxNumber);\n            comm.setReference(reference);\n        }\n    }\n    // Email\n    if (emailAddress != null) {\n        CommunicationChannel comm = emailAddresses.findByEmailAddress(party, emailAddress);\n        if (comm == null) {\n            comm = communicationChannels.newEmail(party, CommunicationChannelType.EMAIL_ADDRESS, emailAddress);\n            comm.setReference(reference);\n        }\n    }\n}",
                "name": "putPartyCommunicationChannels",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"partyReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"reference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"address1\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"address2\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"city\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"postalCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"stateCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"countryCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"phoneNumber\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"faxNumber\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"emailAddress\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Party party = fetchParty(partyReference);\n    if (party == null)\n        throw new ApplicationException(String.format(\"Party with reference [%s] not found\", partyReference));\n\n    // Address\n    if (address1 != null) {\n        Country country = fetchCountry(countryCode);\n        PostalAddress comm = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, country);\n        if (comm == null) {\n            comm = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, states.findState(stateCode), countries.findCountry(countryCode));\n            comm.setReference(reference);\n        }\n    }\n    // Phone\n    if (phoneNumber != null) {\n        CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, phoneNumber);\n        if (comm == null) {\n            comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.PHONE_NUMBER, phoneNumber);\n            comm.setReference(reference);\n        }\n    }\n    // Fax\n    if (faxNumber != null) {\n        CommunicationChannel comm = phoneOrFaxNumbers.findByPhoneOrFaxNumber(party, faxNumber);\n        if (comm == null) {\n            comm = communicationChannels.newPhoneOrFax(party, CommunicationChannelType.FAX_NUMBER, faxNumber);\n            comm.setReference(reference);\n        }\n    }\n    // Email\n    if (emailAddress != null) {\n        CommunicationChannel comm = emailAddresses.findByEmailAddress(party, emailAddress);\n        if (comm == null) {\n            comm = communicationChannels.newEmail(party, CommunicationChannelType.EMAIL_ADDRESS, emailAddress);\n            comm.setReference(reference);\n        }\n    }\n}",
                "start_point": {
                    "row": 375,
                    "column": 4
                },
                "end_point": {
                    "row": 426,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putPropertyActor(\n        @Named(\"propertyReference\") String propertyReference,\n        @Named(\"partyReference\") String partyReference,\n        @Named(\"type\") String typeStr,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate) {\n    final Property property = fetchProperty(propertyReference, false);\n    final Party party = fetchParty(partyReference);\n    final FixedAssetRoleType type = FixedAssetRoleType.valueOf(typeStr);\n    property.addRoleIfDoesNotExist(party, type, startDate, endDate);\n}",
                "name": "putPropertyActor",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"propertyReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"partyReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"type\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    }
                ],
                "body": "{\n    final Property property = fetchProperty(propertyReference, false);\n    final Party party = fetchParty(partyReference);\n    final FixedAssetRoleType type = FixedAssetRoleType.valueOf(typeStr);\n    property.addRoleIfDoesNotExist(party, type, startDate, endDate);\n}",
                "start_point": {
                    "row": 430,
                    "column": 4
                },
                "end_point": {
                    "row": 441,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLease(\n        @Named(\"reference\") String reference,\n        @Named(\"name\") String name,\n        @Named(\"tenantReference\") String tenantReference,\n        @Named(\"landlordReference\") String landlordReference,\n        @Named(\"type\") String type,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate,\n        @Named(\"terminationDate\") @Optional LocalDate terminationDate,\n        @Named(\"propertyReference\") @Optional String propertyReference\n        ) {\n    Party tenant = fetchParty(tenantReference);\n    Party landlord = fetchParty(landlordReference);\n    Lease lease = leases.findLeaseByReference(reference);\n    LeaseType leaseType = leaseTypes.findOrCreate(type, null);\n    if (lease == null) {\n        lease = leases.newLease(reference, name, leaseType, startDate, null, endDate, landlord, tenant);\n    }\n    lease.setTerminationDate(terminationDate);\n}",
                "name": "putLease",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"tenantReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"landlordReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"type\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"terminationDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"propertyReference\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Party tenant = fetchParty(tenantReference);\n    Party landlord = fetchParty(landlordReference);\n    Lease lease = leases.findLeaseByReference(reference);\n    LeaseType leaseType = leaseTypes.findOrCreate(type, null);\n    if (lease == null) {\n        lease = leases.newLease(reference, name, leaseType, startDate, null, endDate, landlord, tenant);\n    }\n    lease.setTerminationDate(terminationDate);\n}",
                "start_point": {
                    "row": 443,
                    "column": 4
                },
                "end_point": {
                    "row": 463,
                    "column": 5
                }
            },
            {
                "definition": "private Lease fetchLease(String leaseReference) {\n    Lease lease;\n    lease = leases.findLeaseByReference(leaseReference);\n    if (lease == null) {\n        throw new ApplicationException(String.format(\"Lease with reference %s not found.\", leaseReference));\n    }\n    return lease;\n}",
                "name": "fetchLease",
                "modifiers": "private",
                "return_type": "Lease",
                "parameters": [
                    {
                        "type": "String",
                        "name": "leaseReference"
                    }
                ],
                "body": "{\n    Lease lease;\n    lease = leases.findLeaseByReference(leaseReference);\n    if (lease == null) {\n        throw new ApplicationException(String.format(\"Lease with reference %s not found.\", leaseReference));\n    }\n    return lease;\n}",
                "start_point": {
                    "row": 465,
                    "column": 4
                },
                "end_point": {
                    "row": 472,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLeaseLink(@Named(\"leaseReference\") String leaseReference, @Named(\"previousLeaseReference\") String previousLeaseReference) {\n    Lease lease = fetchLease(leaseReference);\n    Lease previousLease = fetchLease(previousLeaseReference);\n    lease.modifyPrevious(previousLease);\n}",
                "name": "putLeaseLink",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"previousLeaseReference\")",
                        "name": "String"
                    }
                ],
                "body": "{\n    Lease lease = fetchLease(leaseReference);\n    Lease previousLease = fetchLease(previousLeaseReference);\n    lease.modifyPrevious(previousLease);\n}",
                "start_point": {
                    "row": 474,
                    "column": 4
                },
                "end_point": {
                    "row": 479,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putOccupancy(\n        @Named(\"leaseReference\") String leaseReference,\n        @Named(\"unitReference\") @Optional String unitReference,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate,\n        @Named(\"tenancyStartDate\") @Optional LocalDate tenancyStartDate,\n        @Named(\"tenancyEndDate\") @Optional LocalDate tenancyEndDate,\n        @Named(\"size\") @Optional String size,\n        @Named(\"brand\") @Optional String brand,\n        @Named(\"sector\") @Optional String sector,\n        @Named(\"activity\") @Optional String activity,\n        @Named(\"reportTurnover\") @Optional String reportTurnover,\n        @Named(\"reportRent\") @Optional String reportRent,\n        @Named(\"reportOCR\") @Optional String reportOCR) {\n    Lease lease = fetchLease(leaseReference);\n    UnitForLease unit = (UnitForLease) units.findUnitByReference(unitReference);\n    if (unitReference != null && unit == null) {\n        throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n    }\n    Occupancy occupancy = occupancies.findByLeaseAndUnitAndStartDate(lease, unit, startDate);\n    if (occupancy == null) {\n        occupancy = lease.occupy(unit, startDate);\n    }\n\n    occupancy.setEndDate(endDate);\n    occupancy.setUnitSizeName(size);\n    occupancy.setBrandName(brand != null ? brand.replaceAll(\"\\\\p{C}\", \"\").trim() : null);\n    occupancy.setSectorName(sector);\n    occupancy.setActivityName(activity);\n    occupancy.setReportTurnover(reportTurnover != null ? OccupancyReportingType.valueOf(reportTurnover) : OccupancyReportingType.NO);\n    occupancy.setReportRent(reportRent != null ? OccupancyReportingType.valueOf(reportRent) : OccupancyReportingType.NO);\n    occupancy.setReportOCR(reportOCR != null ? OccupancyReportingType.valueOf(reportOCR) : OccupancyReportingType.NO);\n}",
                "name": "putOccupancy",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"unitReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"tenancyStartDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"tenancyEndDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"size\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"brand\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"sector\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"activity\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"reportTurnover\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"reportRent\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"reportOCR\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Lease lease = fetchLease(leaseReference);\n    UnitForLease unit = (UnitForLease) units.findUnitByReference(unitReference);\n    if (unitReference != null && unit == null) {\n        throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n    }\n    Occupancy occupancy = occupancies.findByLeaseAndUnitAndStartDate(lease, unit, startDate);\n    if (occupancy == null) {\n        occupancy = lease.occupy(unit, startDate);\n    }\n\n    occupancy.setEndDate(endDate);\n    occupancy.setUnitSizeName(size);\n    occupancy.setBrandName(brand != null ? brand.replaceAll(\"\\\\p{C}\", \"\").trim() : null);\n    occupancy.setSectorName(sector);\n    occupancy.setActivityName(activity);\n    occupancy.setReportTurnover(reportTurnover != null ? OccupancyReportingType.valueOf(reportTurnover) : OccupancyReportingType.NO);\n    occupancy.setReportRent(reportRent != null ? OccupancyReportingType.valueOf(reportRent) : OccupancyReportingType.NO);\n    occupancy.setReportOCR(reportOCR != null ? OccupancyReportingType.valueOf(reportOCR) : OccupancyReportingType.NO);\n}",
                "start_point": {
                    "row": 481,
                    "column": 4
                },
                "end_point": {
                    "row": 514,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLeaseItem(\n        @Named(\"leaseReference\") String leaseReference,\n        @Named(\"tenantReference\") String tenantReference,\n        @Named(\"unitReference\") @Optional String unitReference,\n        @Named(\"type\") @Optional String leaseItemTypeName,\n        @Named(\"sequence\") BigInteger sequence,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate,\n        @Named(\"chargeReference\") @Optional String chargeReference,\n        @Named(\"nextDueDate\") @Optional LocalDate nextDueDate,\n        @Named(\"invoicingFrequency\") @Optional String invoicingFrequency,\n        @Named(\"paymentMethod\") @Optional String paymentMethod,\n        @Named(\"status\") @Optional String status) {\n    Lease lease = fetchLease(leaseReference);\n\n    @SuppressWarnings(\"unused\")\n    Unit unit = fetchUnit(unitReference);\n\n    LeaseItemType itemType = fetchLeaseItemType(leaseItemTypeName);\n    Charge charge = fetchCharge(chargeReference);\n    //\n    LeaseItem item = lease.findItem(itemType, startDate, sequence);\n    if (item == null) {\n        item = lease.newItem(itemType, charge, InvoicingFrequency.valueOf(invoicingFrequency), PaymentMethod.valueOf(paymentMethod), startDate);\n    }\n    final LeaseItemStatus leaseItemStatus = LeaseItemStatus.valueOfElse(status, LeaseItemStatus.APPROVED);\n    item.setStatus(leaseItemStatus);\n    item.setEndDate(endDate);\n    item.setSequence(sequence);\n}",
                "name": "putLeaseItem",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"tenantReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"unitReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"type\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"sequence\")",
                        "name": "BigInteger"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"chargeReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"nextDueDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"invoicingFrequency\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"paymentMethod\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"status\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Lease lease = fetchLease(leaseReference);\n\n    @SuppressWarnings(\"unused\")\n    Unit unit = fetchUnit(unitReference);\n\n    LeaseItemType itemType = fetchLeaseItemType(leaseItemTypeName);\n    Charge charge = fetchCharge(chargeReference);\n    //\n    LeaseItem item = lease.findItem(itemType, startDate, sequence);\n    if (item == null) {\n        item = lease.newItem(itemType, charge, InvoicingFrequency.valueOf(invoicingFrequency), PaymentMethod.valueOf(paymentMethod), startDate);\n    }\n    final LeaseItemStatus leaseItemStatus = LeaseItemStatus.valueOfElse(status, LeaseItemStatus.APPROVED);\n    item.setStatus(leaseItemStatus);\n    item.setEndDate(endDate);\n    item.setSequence(sequence);\n}",
                "start_point": {
                    "row": 516,
                    "column": 4
                },
                "end_point": {
                    "row": 546,
                    "column": 5
                }
            },
            {
                "definition": "private LeaseItemType fetchLeaseItemType(String type) {\n    LeaseItemType itemType = LeaseItemType.valueOf(type);\n    if (itemType == null) {\n        throw new ApplicationException(String.format(\"Type with reference %s not found.\", type));\n    }\n    return itemType;\n}",
                "name": "fetchLeaseItemType",
                "modifiers": "private",
                "return_type": "LeaseItemType",
                "parameters": [
                    {
                        "type": "String",
                        "name": "type"
                    }
                ],
                "body": "{\n    LeaseItemType itemType = LeaseItemType.valueOf(type);\n    if (itemType == null) {\n        throw new ApplicationException(String.format(\"Type with reference %s not found.\", type));\n    }\n    return itemType;\n}",
                "start_point": {
                    "row": 548,
                    "column": 4
                },
                "end_point": {
                    "row": 554,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLeasePostalAddress(\n        @Named(\"partyReference\") String partyReference,\n        @Named(\"agreementRoleType\") String agreementRoleType,\n        @Named(\"leaseReference\") @Optional String leaseReference,\n        @Named(\"address1\") @Optional String address1,\n        @Named(\"address2\") @Optional String address2,\n        @Named(\"postalCode\") @Optional String postalCode,\n        @Named(\"city\") @Optional String city,\n        @Named(\"stateCode\") @Optional String stateCode,\n        @Named(\"countryCode\") @Optional String countryCode,\n        @Named(\"isInvoiceAddress\") @Optional BigInteger isInvoiceAddress\n        ) {\n    if (address1 != null && partyReference != null && leaseReference != null) {\n        Lease lease = fetchLease(leaseReference);\n        Party party = fetchParty(partyReference);\n        AgreementRoleCommunicationChannelType agreementRoleCommunicationChannelType = agreementRoleCommunicationChannelTypes.findByTitle(isInvoiceAddress.compareTo(BigInteger.ZERO) == 0 ? LeaseConstants.ARCCT_INVOICE_ADDRESS : LeaseConstants.ARCCT_ADMINISTRATION_ADDRESS);\n        if (agreementRoleCommunicationChannelType == null)\n            throw new ApplicationException(String.format(\"AgreementRoleCommunicationChannelType not found.\"));\n        PostalAddress address = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, fetchCountry(countryCode));\n        if (address == null) {\n            address = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, fetchState(stateCode, false), fetchCountry(countryCode, false));\n        }\n        AgreementRoleType art = agreementRoleTypes.findByTitle(StringUtils.capitalize(agreementRoleType.toLowerCase()));\n        if (art == null)\n            throw new ApplicationException(String.format(\"AgreementRoleType %s not found.\", agreementRoleType));\n        AgreementRole role = lease.findRole(party, art, clockService.now());\n        if (role == null)\n            throw new ApplicationException(String.format(\"Role for %s, %s not found.\", partyReference, agreementRoleType));\n        role.addCommunicationChannel(agreementRoleCommunicationChannelType, address);\n    }\n}",
                "name": "putLeasePostalAddress",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"partyReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"agreementRoleType\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"leaseReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"address1\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"address2\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"postalCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"city\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"stateCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"countryCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"isInvoiceAddress\") @Optional",
                        "name": "BigInteger"
                    }
                ],
                "body": "{\n    if (address1 != null && partyReference != null && leaseReference != null) {\n        Lease lease = fetchLease(leaseReference);\n        Party party = fetchParty(partyReference);\n        AgreementRoleCommunicationChannelType agreementRoleCommunicationChannelType = agreementRoleCommunicationChannelTypes.findByTitle(isInvoiceAddress.compareTo(BigInteger.ZERO) == 0 ? LeaseConstants.ARCCT_INVOICE_ADDRESS : LeaseConstants.ARCCT_ADMINISTRATION_ADDRESS);\n        if (agreementRoleCommunicationChannelType == null)\n            throw new ApplicationException(String.format(\"AgreementRoleCommunicationChannelType not found.\"));\n        PostalAddress address = (PostalAddress) postalAddresses.findByAddress(party, address1, postalCode, city, fetchCountry(countryCode));\n        if (address == null) {\n            address = communicationChannels.newPostal(party, CommunicationChannelType.POSTAL_ADDRESS, address1, address2, postalCode, city, fetchState(stateCode, false), fetchCountry(countryCode, false));\n        }\n        AgreementRoleType art = agreementRoleTypes.findByTitle(StringUtils.capitalize(agreementRoleType.toLowerCase()));\n        if (art == null)\n            throw new ApplicationException(String.format(\"AgreementRoleType %s not found.\", agreementRoleType));\n        AgreementRole role = lease.findRole(party, art, clockService.now());\n        if (role == null)\n            throw new ApplicationException(String.format(\"Role for %s, %s not found.\", partyReference, agreementRoleType));\n        role.addCommunicationChannel(agreementRoleCommunicationChannelType, address);\n    }\n}",
                "start_point": {
                    "row": 556,
                    "column": 4
                },
                "end_point": {
                    "row": 587,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLeaseTermForIndexableRent(\n        // start generic fields\n        @Named(\"leaseReference\") String leaseReference,\n        @Named(\"tenantReference\") String tenantReference,\n        @Named(\"unitReference\") @Optional String unitReference,\n        @Named(\"itemSequence\") BigInteger itemSequence,\n        @Named(\"itemType\") String itemType,\n        @Named(\"itemStartDate\") LocalDate itemStartDate,\n        @Named(\"sequence\") BigInteger sequence,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate,\n        @Named(\"status\") @Optional String statusStr,\n        // end generic fields\n        @Named(\"indexationStatus\") @Optional String indexationStatusStr,\n        @Named(\"reviewDate\") @Optional LocalDate reviewDate,\n        @Named(\"effectiveDate\") @Optional LocalDate effectiveDate,\n        @Named(\"baseValue\") @Optional BigDecimal baseValue,\n        @Named(\"indexedValue\") @Optional BigDecimal indexedValue,\n        @Named(\"settledValue\") @Optional BigDecimal settledValue,\n        @Named(\"levellingValue\") @Optional BigDecimal levellingValue,\n        @Named(\"levellingPercentage\") @Optional BigDecimal levellingPercentage,\n        @Named(\"indexReference\") @Optional String indexReference,\n        @Named(\"indexationFrequency\") @Optional String indexationFrequency,\n        @Named(\"indexationPercentage\") @Optional BigDecimal indexationPercentage,\n        @Named(\"baseIndexReference\") @Optional String baseIndexReference,\n        @Named(\"baseIndexStartDate\") @Optional LocalDate baseIndexStartDate,\n        @Named(\"baseIndexEndDate\") @Optional LocalDate baseIndexEndDate,\n        @Named(\"baseIndexValue\") @Optional BigDecimal baseIndexValue,\n        @Named(\"nextIndexReference\") @Optional String nextIndexReference,\n        @Named(\"nextIndexStartDate\") @Optional LocalDate nextIndexStartDate,\n        @Named(\"nextIndexEndDate\") @Optional LocalDate nextIndexEndDate,\n        @Named(\"nextIndexValue\") @Optional BigDecimal nextIndexValue) {\n    LeaseTermForIndexableRent term = (LeaseTermForIndexableRent) putLeaseTerm(\n            leaseReference,\n            unitReference,\n            itemSequence,\n            itemType,\n            itemStartDate,\n            startDate,\n            endDate,\n            sequence,\n            statusStr);\n    if (term != null) {\n        Index index = indices.findIndex(indexReference);\n        LeaseTermFrequency indexationFreq = LeaseTermFrequency.valueOf(indexationFrequency);\n        term.setIndex(index);\n        term.setFrequency(indexationFreq);\n        term.setEffectiveDate(effectiveDate);\n        term.setBaseValue(baseValue);\n        term.setIndexedValue(indexedValue);\n        term.setSettledValue(settledValue);\n        term.setBaseIndexStartDate(baseIndexStartDate);\n        term.setBaseIndexValue(baseIndexValue);\n        term.setNextIndexStartDate(nextIndexStartDate);\n        term.setNextIndexValue(nextIndexValue);\n        term.setIndexationPercentage(indexationPercentage);\n        IndexationStatus indexationStatus = indexationStatusStr == null ? null : IndexationStatus.valueOf(indexationStatusStr);\n        term.setIndexationStatus(indexationStatus);\n        term.setLevellingPercentage(levellingPercentage);\n    }\n}",
                "name": "putLeaseTermForIndexableRent",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"tenantReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"unitReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"itemSequence\")",
                        "name": "BigInteger"
                    },
                    {
                        "type": "@Named(\"itemType\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"itemStartDate\")",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"sequence\")",
                        "name": "BigInteger"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"status\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"indexationStatus\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"reviewDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"effectiveDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"baseValue\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"indexedValue\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"settledValue\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"levellingValue\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"levellingPercentage\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"indexReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"indexationFrequency\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"indexationPercentage\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"baseIndexReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"baseIndexStartDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"baseIndexEndDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"baseIndexValue\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"nextIndexReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"nextIndexStartDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"nextIndexEndDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"nextIndexValue\") @Optional",
                        "name": "BigDecimal"
                    }
                ],
                "body": "{\n    LeaseTermForIndexableRent term = (LeaseTermForIndexableRent) putLeaseTerm(\n            leaseReference,\n            unitReference,\n            itemSequence,\n            itemType,\n            itemStartDate,\n            startDate,\n            endDate,\n            sequence,\n            statusStr);\n    if (term != null) {\n        Index index = indices.findIndex(indexReference);\n        LeaseTermFrequency indexationFreq = LeaseTermFrequency.valueOf(indexationFrequency);\n        term.setIndex(index);\n        term.setFrequency(indexationFreq);\n        term.setEffectiveDate(effectiveDate);\n        term.setBaseValue(baseValue);\n        term.setIndexedValue(indexedValue);\n        term.setSettledValue(settledValue);\n        term.setBaseIndexStartDate(baseIndexStartDate);\n        term.setBaseIndexValue(baseIndexValue);\n        term.setNextIndexStartDate(nextIndexStartDate);\n        term.setNextIndexValue(nextIndexValue);\n        term.setIndexationPercentage(indexationPercentage);\n        IndexationStatus indexationStatus = indexationStatusStr == null ? null : IndexationStatus.valueOf(indexationStatusStr);\n        term.setIndexationStatus(indexationStatus);\n        term.setLevellingPercentage(levellingPercentage);\n    }\n}",
                "start_point": {
                    "row": 589,
                    "column": 4
                },
                "end_point": {
                    "row": 650,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLeaseTermForTurnoverRent(\n        // start generic fields\n        @Named(\"leaseReference\") String leaseReference,\n        @Named(\"tenantReference\") String tenantReference,\n        @Named(\"unitReference\") @Optional String unitReference,\n        @Named(\"itemSequence\") BigInteger itemSequence,\n        @Named(\"itemType\") String itemType,\n        @Named(\"itemStartDate\") LocalDate itemStartDate,\n        @Named(\"sequence\") BigInteger sequence,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate,\n        @Named(\"status\") @Optional String status,\n        // end generic fields\n        @Named(\"turnoverRentRule\") @Optional String turnoverRentRule,\n        @Named(\"budgetedTurnover\") @Optional BigDecimal budgetedTurnover,\n        @Named(\"auditedTurnover\") @Optional BigDecimal auditedTurnover,\n        @Named(\"turnoverRentValue\") @Optional BigDecimal turnoverRentValue) {\n    LeaseTermForTurnoverRent term = (LeaseTermForTurnoverRent) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n    if (term != null) {\n        term.setTurnoverRentValue(turnoverRentValue);\n        term.setBudgetedTurnover(budgetedTurnover);\n        term.setAuditedTurnover(auditedTurnover);\n        term.setTurnoverRentRule(turnoverRentRule);\n    }\n}",
                "name": "putLeaseTermForTurnoverRent",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"tenantReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"unitReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"itemSequence\")",
                        "name": "BigInteger"
                    },
                    {
                        "type": "@Named(\"itemType\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"itemStartDate\")",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"sequence\")",
                        "name": "BigInteger"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"status\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"turnoverRentRule\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"budgetedTurnover\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"auditedTurnover\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"turnoverRentValue\") @Optional",
                        "name": "BigDecimal"
                    }
                ],
                "body": "{\n    LeaseTermForTurnoverRent term = (LeaseTermForTurnoverRent) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n    if (term != null) {\n        term.setTurnoverRentValue(turnoverRentValue);\n        term.setBudgetedTurnover(budgetedTurnover);\n        term.setAuditedTurnover(auditedTurnover);\n        term.setTurnoverRentRule(turnoverRentRule);\n    }\n}",
                "start_point": {
                    "row": 652,
                    "column": 4
                },
                "end_point": {
                    "row": 677,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putLeaseTermForServiceCharge(\n        // start generic fields\n        @Named(\"leaseReference\") String leaseReference,\n        @Named(\"tenantReference\") String tenantReference,\n        @Named(\"unitReference\") @Optional String unitReference,\n        @Named(\"itemSequence\") BigInteger itemSequence,\n        @Named(\"itemType\") String itemType,\n        @Named(\"itemStartDate\") LocalDate itemStartDate,\n        @Named(\"sequence\") BigInteger sequence,\n        @Named(\"startDate\") @Optional LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate,\n        @Named(\"status\") @Optional String status,\n        // end generic fields\n        @Named(\"auditedValue\") @Optional BigDecimal auditedValue,\n        @Named(\"budgetedValue\") @Optional BigDecimal budgetedValue) {\n    LeaseTermForServiceCharge term = (LeaseTermForServiceCharge) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n    if (term != null) {\n        term.setAuditedValue(auditedValue);\n        term.setBudgetedValue(budgetedValue);\n    }\n}",
                "name": "putLeaseTermForServiceCharge",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"tenantReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"unitReference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"itemSequence\")",
                        "name": "BigInteger"
                    },
                    {
                        "type": "@Named(\"itemType\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"itemStartDate\")",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"sequence\")",
                        "name": "BigInteger"
                    },
                    {
                        "type": "@Named(\"startDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"status\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"auditedValue\") @Optional",
                        "name": "BigDecimal"
                    },
                    {
                        "type": "@Named(\"budgetedValue\") @Optional",
                        "name": "BigDecimal"
                    }
                ],
                "body": "{\n    LeaseTermForServiceCharge term = (LeaseTermForServiceCharge) putLeaseTerm(leaseReference, unitReference, itemSequence, itemType, itemStartDate, startDate, endDate, sequence, status);\n    if (term != null) {\n        term.setAuditedValue(auditedValue);\n        term.setBudgetedValue(budgetedValue);\n    }\n}",
                "start_point": {
                    "row": 679,
                    "column": 4
                },
                "end_point": {
                    "row": 700,
                    "column": 5
                }
            },
            {
                "definition": "private LeaseTerm putLeaseTerm(\n        String leaseReference,\n        String unitReference,\n        BigInteger itemSequence,\n        String itemType,\n        LocalDate itemStartDate,\n        LocalDate startDate,\n        LocalDate endDate,\n        BigInteger sequence,\n        String statusStr) {\n    Lease lease = leases.findLeaseByReference(leaseReference);\n    if (lease == null) {\n        throw new ApplicationException(String.format(\"Leaseitem with reference %1$s not found.\", leaseReference));\n    }\n    Unit unit;\n    if (unitReference != null) {\n        unit = units.findUnitByReference(unitReference);\n        if (unitReference != null && unit == null) {\n            throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n        }\n    }\n    LeaseItemType leaseItemType = fetchLeaseItemType(itemType);\n    LeaseItem item = lease.findItem(leaseItemType, itemStartDate, itemSequence);\n    if (item == null) {\n        throw new ApplicationException(String.format(\"LeaseItem with reference %1$s, %2$s, %3$s, %4$s not found.\", leaseReference, leaseItemType.toString(), itemStartDate.toString(), itemSequence.toString()));\n    }\n    // check if the date is within range of lease\n    if (lease.getTerminationDate() == null || lease.getTerminationDate().compareTo(startDate) >= 0) {\n        LeaseTerm term = item.findTermWithSequence(sequence);\n        if (term == null) {\n            if (sequence.equals(BigInteger.ONE)) {\n                term = item.newTerm(startDate);\n            } else {\n                LeaseTerm previousTerm = item.findTermWithSequence(sequence.subtract(BigInteger.ONE));\n                term = previousTerm.createNext(startDate);\n            }\n            term.setSequence(sequence);\n        }\n        term.setStatus(org.estatio.dom.lease.LeaseTermStatus.valueOf(statusStr));\n        // will be overwritten if there is a next term\n        term.setEndDate(lease.getTerminationDate());\n        return term;\n    }\n    return null;\n}",
                "name": "putLeaseTerm",
                "modifiers": "private",
                "return_type": "LeaseTerm",
                "parameters": [
                    {
                        "type": "String",
                        "name": "leaseReference"
                    },
                    {
                        "type": "String",
                        "name": "unitReference"
                    },
                    {
                        "type": "BigInteger",
                        "name": "itemSequence"
                    },
                    {
                        "type": "String",
                        "name": "itemType"
                    },
                    {
                        "type": "LocalDate",
                        "name": "itemStartDate"
                    },
                    {
                        "type": "LocalDate",
                        "name": "startDate"
                    },
                    {
                        "type": "LocalDate",
                        "name": "endDate"
                    },
                    {
                        "type": "BigInteger",
                        "name": "sequence"
                    },
                    {
                        "type": "String",
                        "name": "statusStr"
                    }
                ],
                "body": "{\n    Lease lease = leases.findLeaseByReference(leaseReference);\n    if (lease == null) {\n        throw new ApplicationException(String.format(\"Leaseitem with reference %1$s not found.\", leaseReference));\n    }\n    Unit unit;\n    if (unitReference != null) {\n        unit = units.findUnitByReference(unitReference);\n        if (unitReference != null && unit == null) {\n            throw new ApplicationException(String.format(\"Unit with reference %s not found.\", unitReference));\n        }\n    }\n    LeaseItemType leaseItemType = fetchLeaseItemType(itemType);\n    LeaseItem item = lease.findItem(leaseItemType, itemStartDate, itemSequence);\n    if (item == null) {\n        throw new ApplicationException(String.format(\"LeaseItem with reference %1$s, %2$s, %3$s, %4$s not found.\", leaseReference, leaseItemType.toString(), itemStartDate.toString(), itemSequence.toString()));\n    }\n    // check if the date is within range of lease\n    if (lease.getTerminationDate() == null || lease.getTerminationDate().compareTo(startDate) >= 0) {\n        LeaseTerm term = item.findTermWithSequence(sequence);\n        if (term == null) {\n            if (sequence.equals(BigInteger.ONE)) {\n                term = item.newTerm(startDate);\n            } else {\n                LeaseTerm previousTerm = item.findTermWithSequence(sequence.subtract(BigInteger.ONE));\n                term = previousTerm.createNext(startDate);\n            }\n            term.setSequence(sequence);\n        }\n        term.setStatus(org.estatio.dom.lease.LeaseTermStatus.valueOf(statusStr));\n        // will be overwritten if there is a next term\n        term.setEndDate(lease.getTerminationDate());\n        return term;\n    }\n    return null;\n}",
                "start_point": {
                    "row": 702,
                    "column": 4
                },
                "end_point": {
                    "row": 746,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putBankAccount(\n        // start generic fields\n        @Named(\"reference\") @Optional String reference,\n        @Named(\"name\") @Optional String name,\n        @Named(\"bankAccountType\") @Optional String bankAccountType,\n        @Named(\"ownerReference\") String ownerReference,\n        @Named(\"iban\") @Optional String iban,\n        @Named(\"countryCode\") @Optional String countryCode,\n        @Named(\"nationalCheckCode\") @Optional String nationalCheckCode,\n        @Named(\"nationalBankCode\") @Optional String nationalBankCode,\n        @Named(\"branchCode\") @Optional String branchCode,\n        @Named(\"accountNumber\") @Optional String accountNumber\n        ) {\n    BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(reference);\n    Party owner = parties.findPartyByReference(ownerReference);\n    if (owner == null)\n        return;\n    if (bankAccount == null) {\n        bankAccount = financialAccounts.newBankAccount(owner, iban);\n    }\n    bankAccount.setReference(reference);\n    bankAccount.setAccountNumber(accountNumber);\n    bankAccount.setBranchCode(branchCode);\n    bankAccount.setName(name);\n    bankAccount.setCountry(fetchCountry(countryCode, false));\n    bankAccount.setNationalBankCode(nationalBankCode);\n    bankAccount.setNationalCheckCode(nationalCheckCode);\n    bankAccount.setBankAccountType(BankAccountType.valueOf(bankAccountType));\n    bankAccount.verifyIban();\n}",
                "name": "putBankAccount",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"bankAccountType\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"ownerReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"iban\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"countryCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"nationalCheckCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"nationalBankCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"branchCode\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"accountNumber\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(reference);\n    Party owner = parties.findPartyByReference(ownerReference);\n    if (owner == null)\n        return;\n    if (bankAccount == null) {\n        bankAccount = financialAccounts.newBankAccount(owner, iban);\n    }\n    bankAccount.setReference(reference);\n    bankAccount.setAccountNumber(accountNumber);\n    bankAccount.setBranchCode(branchCode);\n    bankAccount.setName(name);\n    bankAccount.setCountry(fetchCountry(countryCode, false));\n    bankAccount.setNationalBankCode(nationalBankCode);\n    bankAccount.setNationalCheckCode(nationalCheckCode);\n    bankAccount.setBankAccountType(BankAccountType.valueOf(bankAccountType));\n    bankAccount.verifyIban();\n}",
                "start_point": {
                    "row": 748,
                    "column": 4
                },
                "end_point": {
                    "row": 778,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putBankMandate(\n        @Named(\"reference\") String reference,\n        @Named(\"name\") @Optional String name,\n        @Named(\"leaseReference\") String leaseReference,\n        @Named(\"debtorReference\") String debtorReference,\n        @Named(\"creditorReference\") String creditorReference,\n        @Named(\"bankAccountReference\") String bankAccountReference,\n        @Named(\"startDate\") LocalDate startDate,\n        @Named(\"endDate\") @Optional LocalDate endDate) {\n    BankMandate bankMandate = (BankMandate) agreements.findAgreementByReference(reference);\n    BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(bankAccountReference);\n    if (bankAccount == null)\n        throw new ApplicationException(String.format(\"BankAccount with reference %1$s not found\", bankAccountReference));\n    if (bankMandate == null) {\n        Party debtor = fetchParty(debtorReference);\n        Party creditor = fetchParty(creditorReference);\n        Lease lease = fetchLease(leaseReference);\n        bankMandate = bankMandates.newBankMandate(reference, name, startDate, endDate, debtor, creditor, bankAccount);\n        lease.paidBy(bankMandate);\n    }\n}",
                "name": "putBankMandate",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"reference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"name\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"debtorReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"creditorReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"bankAccountReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"startDate\")",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"endDate\") @Optional",
                        "name": "LocalDate"
                    }
                ],
                "body": "{\n    BankMandate bankMandate = (BankMandate) agreements.findAgreementByReference(reference);\n    BankAccount bankAccount = (BankAccount) financialAccounts.findAccountByReference(bankAccountReference);\n    if (bankAccount == null)\n        throw new ApplicationException(String.format(\"BankAccount with reference %1$s not found\", bankAccountReference));\n    if (bankMandate == null) {\n        Party debtor = fetchParty(debtorReference);\n        Party creditor = fetchParty(creditorReference);\n        Lease lease = fetchLease(leaseReference);\n        bankMandate = bankMandates.newBankMandate(reference, name, startDate, endDate, debtor, creditor, bankAccount);\n        lease.paidBy(bankMandate);\n    }\n}",
                "start_point": {
                    "row": 780,
                    "column": 4
                },
                "end_point": {
                    "row": 801,
                    "column": 5
                }
            },
            {
                "definition": "@ActionSemantics(Of.IDEMPOTENT)\npublic void putBreakOption(\n        @Named(\"leaseReference\") String leaseReference,\n        @Named(\"breakType\") String breakTypeStr,\n        @Named(\"breakExcerciseType\") String breakExcerciseTypeStr,\n        @Named(\"breakDate\") LocalDate breakDate,\n        @Named(\"notificationDate\") LocalDate notificationDate,\n        @Named(\"notificationPeriod\") @Optional String notificationPeriodStr,\n        @Named(\"description\") @Optional String description\n        ) {\n    Lease lease = fetchLease(leaseReference);\n    BreakType breakType = BreakType.valueOf(breakTypeStr);\n    BreakExerciseType breakExerciseType = BreakExerciseType.valueOf(breakExcerciseTypeStr);\n    if (notificationDate != null) {\n        Period period = new Period(notificationDate, breakDate);\n        notificationPeriodStr = JodaPeriodUtils.asSimpleString(period);\n    }\n    if (lease.validateNewBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description) == null) {\n        lease.newBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description);\n    }\n}",
                "name": "putBreakOption",
                "modifiers": "@ActionSemantics(Of.IDEMPOTENT)\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Named(\"leaseReference\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"breakType\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"breakExcerciseType\")",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"breakDate\")",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"notificationDate\")",
                        "name": "LocalDate"
                    },
                    {
                        "type": "@Named(\"notificationPeriod\") @Optional",
                        "name": "String"
                    },
                    {
                        "type": "@Named(\"description\") @Optional",
                        "name": "String"
                    }
                ],
                "body": "{\n    Lease lease = fetchLease(leaseReference);\n    BreakType breakType = BreakType.valueOf(breakTypeStr);\n    BreakExerciseType breakExerciseType = BreakExerciseType.valueOf(breakExcerciseTypeStr);\n    if (notificationDate != null) {\n        Period period = new Period(notificationDate, breakDate);\n        notificationPeriodStr = JodaPeriodUtils.asSimpleString(period);\n    }\n    if (lease.validateNewBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description) == null) {\n        lease.newBreakOption(breakDate, notificationPeriodStr, breakExerciseType, breakType, description);\n    }\n}",
                "start_point": {
                    "row": 805,
                    "column": 4
                },
                "end_point": {
                    "row": 825,
                    "column": 5
                }
            },
            {
                "definition": "public void injectAgreements(Agreements agreements) {\n    this.agreements = agreements;\n}",
                "name": "injectAgreements",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Agreements",
                        "name": "agreements"
                    }
                ],
                "body": "{\n    this.agreements = agreements;\n}",
                "start_point": {
                    "row": 831,
                    "column": 4
                },
                "end_point": {
                    "row": 833,
                    "column": 5
                }
            },
            {
                "definition": "public void injectBankMandates(BankMandates bankMandates) {\n    this.bankMandates = bankMandates;\n}",
                "name": "injectBankMandates",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "BankMandates",
                        "name": "bankMandates"
                    }
                ],
                "body": "{\n    this.bankMandates = bankMandates;\n}",
                "start_point": {
                    "row": 837,
                    "column": 4
                },
                "end_point": {
                    "row": 839,
                    "column": 5
                }
            },
            {
                "definition": "public void setClockService(ClockService clockService) {\n    this.clockService = clockService;\n}",
                "name": "setClockService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "ClockService",
                        "name": "clockService"
                    }
                ],
                "body": "{\n    this.clockService = clockService;\n}",
                "start_point": {
                    "row": 843,
                    "column": 4
                },
                "end_point": {
                    "row": 845,
                    "column": 5
                }
            },
            {
                "definition": "public void injectCountries(final Countries countries) {\n    this.countries = countries;\n}",
                "name": "injectCountries",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Countries"
                    }
                ],
                "body": "{\n    this.countries = countries;\n}",
                "start_point": {
                    "row": 849,
                    "column": 4
                },
                "end_point": {
                    "row": 851,
                    "column": 5
                }
            },
            {
                "definition": "public void injectStates(final States states) {\n    this.states = states;\n}",
                "name": "injectStates",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "States"
                    }
                ],
                "body": "{\n    this.states = states;\n}",
                "start_point": {
                    "row": 855,
                    "column": 4
                },
                "end_point": {
                    "row": 857,
                    "column": 5
                }
            },
            {
                "definition": "public void injectUnits(final Units<Unit> units) {\n    this.units = units;\n}",
                "name": "injectUnits",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Units<Unit>"
                    }
                ],
                "body": "{\n    this.units = units;\n}",
                "start_point": {
                    "row": 861,
                    "column": 4
                },
                "end_point": {
                    "row": 863,
                    "column": 5
                }
            },
            {
                "definition": "public void injectProperties(final Properties properties) {\n    this.properties = properties;\n}",
                "name": "injectProperties",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Properties"
                    }
                ],
                "body": "{\n    this.properties = properties;\n}",
                "start_point": {
                    "row": 867,
                    "column": 4
                },
                "end_point": {
                    "row": 869,
                    "column": 5
                }
            },
            {
                "definition": "public void injectParties(final Parties parties) {\n    this.parties = parties;\n}",
                "name": "injectParties",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Parties"
                    }
                ],
                "body": "{\n    this.parties = parties;\n}",
                "start_point": {
                    "row": 873,
                    "column": 4
                },
                "end_point": {
                    "row": 875,
                    "column": 5
                }
            },
            {
                "definition": "public void injectOrganisations(final Organisations organisations) {\n    this.organisations = organisations;\n}",
                "name": "injectOrganisations",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Organisations"
                    }
                ],
                "body": "{\n    this.organisations = organisations;\n}",
                "start_point": {
                    "row": 879,
                    "column": 4
                },
                "end_point": {
                    "row": 881,
                    "column": 5
                }
            },
            {
                "definition": "public void injectOrganisations(final Persons persons) {\n    this.persons = persons;\n}",
                "name": "injectOrganisations",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Persons"
                    }
                ],
                "body": "{\n    this.persons = persons;\n}",
                "start_point": {
                    "row": 885,
                    "column": 4
                },
                "end_point": {
                    "row": 887,
                    "column": 5
                }
            },
            {
                "definition": "public void injectCommunicationChannelContributedActions(final CommunicationChannelContributions communicationChannelContributedActions) {\n    this.communicationChannelContributions = communicationChannelContributedActions;\n}",
                "name": "injectCommunicationChannelContributedActions",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "CommunicationChannelContributions"
                    }
                ],
                "body": "{\n    this.communicationChannelContributions = communicationChannelContributedActions;\n}",
                "start_point": {
                    "row": 891,
                    "column": 4
                },
                "end_point": {
                    "row": 893,
                    "column": 5
                }
            },
            {
                "definition": "public void injectCommunicationChannels(final CommunicationChannels communicationChannels) {\n    this.communicationChannels = communicationChannels;\n}",
                "name": "injectCommunicationChannels",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "CommunicationChannels"
                    }
                ],
                "body": "{\n    this.communicationChannels = communicationChannels;\n}",
                "start_point": {
                    "row": 897,
                    "column": 4
                },
                "end_point": {
                    "row": 899,
                    "column": 5
                }
            },
            {
                "definition": "public void injectPostalAddresses(PostalAddresses postalAddresses) {\n    this.postalAddresses = postalAddresses;\n}",
                "name": "injectPostalAddresses",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "PostalAddresses",
                        "name": "postalAddresses"
                    }
                ],
                "body": "{\n    this.postalAddresses = postalAddresses;\n}",
                "start_point": {
                    "row": 903,
                    "column": 4
                },
                "end_point": {
                    "row": 905,
                    "column": 5
                }
            },
            {
                "definition": "public void injectEmailAddresses(EmailAddresses emailAddresses) {\n    this.emailAddresses = emailAddresses;\n}",
                "name": "injectEmailAddresses",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "EmailAddresses",
                        "name": "emailAddresses"
                    }
                ],
                "body": "{\n    this.emailAddresses = emailAddresses;\n}",
                "start_point": {
                    "row": 909,
                    "column": 4
                },
                "end_point": {
                    "row": 911,
                    "column": 5
                }
            },
            {
                "definition": "public void setPhoneOrFaxNumbers(PhoneOrFaxNumbers phoneOrFaxNumbers) {\n    this.phoneOrFaxNumbers = phoneOrFaxNumbers;\n}",
                "name": "setPhoneOrFaxNumbers",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "PhoneOrFaxNumbers",
                        "name": "phoneOrFaxNumbers"
                    }
                ],
                "body": "{\n    this.phoneOrFaxNumbers = phoneOrFaxNumbers;\n}",
                "start_point": {
                    "row": 915,
                    "column": 4
                },
                "end_point": {
                    "row": 917,
                    "column": 5
                }
            },
            {
                "definition": "public void injectLeaseRepository(final Leases leases) {\n    this.leases = leases;\n}",
                "name": "injectLeaseRepository",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Leases"
                    }
                ],
                "body": "{\n    this.leases = leases;\n}",
                "start_point": {
                    "row": 921,
                    "column": 4
                },
                "end_point": {
                    "row": 923,
                    "column": 5
                }
            },
            {
                "definition": "public void injectAgreementRoleTypes(AgreementRoleTypes agreementRoleTypes) {\n    this.agreementRoleTypes = agreementRoleTypes;\n}",
                "name": "injectAgreementRoleTypes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "AgreementRoleTypes",
                        "name": "agreementRoleTypes"
                    }
                ],
                "body": "{\n    this.agreementRoleTypes = agreementRoleTypes;\n}",
                "start_point": {
                    "row": 927,
                    "column": 4
                },
                "end_point": {
                    "row": 929,
                    "column": 5
                }
            },
            {
                "definition": "public void injectLeaseUnits(final Occupancies leaseUnits) {\n    this.occupancies = leaseUnits;\n}",
                "name": "injectLeaseUnits",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Occupancies"
                    }
                ],
                "body": "{\n    this.occupancies = leaseUnits;\n}",
                "start_point": {
                    "row": 933,
                    "column": 4
                },
                "end_point": {
                    "row": 935,
                    "column": 5
                }
            },
            {
                "definition": "public void injectTaxes(final Taxes taxes) {\n    this.taxes = taxes;\n}",
                "name": "injectTaxes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Taxes"
                    }
                ],
                "body": "{\n    this.taxes = taxes;\n}",
                "start_point": {
                    "row": 939,
                    "column": 4
                },
                "end_point": {
                    "row": 941,
                    "column": 5
                }
            },
            {
                "definition": "public void injectCharges(final Charges charges) {\n    this.charges = charges;\n}",
                "name": "injectCharges",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Charges"
                    }
                ],
                "body": "{\n    this.charges = charges;\n}",
                "start_point": {
                    "row": 945,
                    "column": 4
                },
                "end_point": {
                    "row": 947,
                    "column": 5
                }
            },
            {
                "definition": "public void injectChargeGroups(final ChargeGroups chargeGroups) {\n    this.chargeGroups = chargeGroups;\n}",
                "name": "injectChargeGroups",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "ChargeGroups"
                    }
                ],
                "body": "{\n    this.chargeGroups = chargeGroups;\n}",
                "start_point": {
                    "row": 951,
                    "column": 4
                },
                "end_point": {
                    "row": 953,
                    "column": 5
                }
            },
            {
                "definition": "public void injectIndices(final Indices indices) {\n    this.indices = indices;\n}",
                "name": "injectIndices",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Indices"
                    }
                ],
                "body": "{\n    this.indices = indices;\n}",
                "start_point": {
                    "row": 957,
                    "column": 4
                },
                "end_point": {
                    "row": 959,
                    "column": 5
                }
            },
            {
                "definition": "public void injectFinancialAccounts(FinancialAccounts financialAccounts) {\n    this.financialAccounts = financialAccounts;\n}",
                "name": "injectFinancialAccounts",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "FinancialAccounts",
                        "name": "financialAccounts"
                    }
                ],
                "body": "{\n    this.financialAccounts = financialAccounts;\n}",
                "start_point": {
                    "row": 963,
                    "column": 4
                },
                "end_point": {
                    "row": 965,
                    "column": 5
                }
            },
            {
                "definition": "public void injectInvoices(Invoices invoices) {\n    this.invoices = invoices;\n}",
                "name": "injectInvoices",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Invoices",
                        "name": "invoices"
                    }
                ],
                "body": "{\n    this.invoices = invoices;\n}",
                "start_point": {
                    "row": 969,
                    "column": 4
                },
                "end_point": {
                    "row": 971,
                    "column": 5
                }
            },
            {
                "definition": "public void injectAgreementRoleCommunicationChannelTypes(AgreementRoleCommunicationChannelTypes agreementRoleCommunicationChannelTypes) {\n    this.agreementRoleCommunicationChannelTypes = agreementRoleCommunicationChannelTypes;\n}",
                "name": "injectAgreementRoleCommunicationChannelTypes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "AgreementRoleCommunicationChannelTypes",
                        "name": "agreementRoleCommunicationChannelTypes"
                    }
                ],
                "body": "{\n    this.agreementRoleCommunicationChannelTypes = agreementRoleCommunicationChannelTypes;\n}",
                "start_point": {
                    "row": 975,
                    "column": 4
                },
                "end_point": {
                    "row": 977,
                    "column": 5
                }
            },
            {
                "definition": "public void injectLeaseTypes(LeaseTypes leaseTypes) {\n    this.leaseTypes = leaseTypes;\n}",
                "name": "injectLeaseTypes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "LeaseTypes",
                        "name": "leaseTypes"
                    }
                ],
                "body": "{\n    this.leaseTypes = leaseTypes;\n}",
                "start_point": {
                    "row": 981,
                    "column": 4
                },
                "end_point": {
                    "row": 983,
                    "column": 5
                }
            }
        ]
    }
]