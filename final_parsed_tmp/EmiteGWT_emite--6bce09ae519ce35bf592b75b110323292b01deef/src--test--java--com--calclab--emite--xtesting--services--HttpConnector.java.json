[
    {
        "rev_path": "src/test/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "definition": "public class HttpConnector {\n\n    private static class HttpConnectorID {\n\tprivate static int id = 0;\n\n\tpublic static String getNext() {\n\t    id++;\n\t    return String.valueOf(id);\n\t}\n\n    }\n\n    private final ExecutorService sendService;\n    private final ExecutorService receiveService;\n\n    public HttpConnector() {\n\tsendService = Executors.newCachedThreadPool();\n\treceiveService = Executors.newFixedThreadPool(1);\n    }\n\n    public synchronized void send(final String httpBase, final String xml, final ConnectorCallback callback)\n\t    throws ConnectorException {\n\n\tsendService.execute(createSendAction(httpBase, xml, callback));\n    }\n\n    protected void debug(final String pattern, final Object... arguments) {\n\t// FIXME\n\tMessageFormat.format(pattern, arguments);\n    }\n\n    private Runnable createResponseAction(final String xml, final ConnectorCallback callback, final String id,\n\t    final int status, final String response) {\n\tfinal Runnable runnable = new Runnable() {\n\t    public void run() {\n\t\tif (status == HttpStatus.SC_OK) {\n\t\t    System.out.println(\"RECEIVED: \" + response);\n\t\t    debug(\"Connector [{0}] receive: {1}\", id, response);\n\t\t    callback.onResponseReceived(status, response, xml);\n\t\t} else {\n\t\t    debug(\"Connector [{0}] bad status: {1}\", id, status);\n\t\t    callback.onError(xml, new Exception(\"bad http status \" + status));\n\t\t}\n\n\t    }\n\n\t};\n\treturn runnable;\n    }\n\n    private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {\n\treturn new Runnable() {\n\t    public void run() {\n\t\tfinal String id = HttpConnectorID.getNext();\n\t\tdebug(\"Connector [{0}] send: {1}\", id, xml);\n\t\tfinal HttpClient client = new DefaultHttpClient();\n\t\tint status = 0;\n\t\tString responseString = null;\n\t\tfinal HttpPost post = new HttpPost(httpBase);\n\n\t\ttry {\n\t\t    post.setEntity(new StringEntity(xml, \"text/xml\", \"utf-8\"));\n\t\t    System.out.println(\"SENDING: \" + xml);\n\t\t    HttpResponse response = client.execute(post);\n\t\t    responseString = EntityUtils.toString(response.getEntity());\n\t\t} catch (final Exception e) {\n\t\t    callback.onError(xml, e);\n\t\t    e.printStackTrace();\n\t\t}\n\n\t\treceiveService.execute(createResponseAction(xml, callback, id, status, responseString));\n\t    }\n\t};\n    }\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "HttpConnector",
        "name": "HttpConnector",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    private static class HttpConnectorID {\n\tprivate static int id = 0;\n\n\tpublic static String getNext() {\n\t    id++;\n\t    return String.valueOf(id);\n\t}\n\n    }\n\n    private final ExecutorService sendService;\n    private final ExecutorService receiveService;\n\n    public HttpConnector() {\n\tsendService = Executors.newCachedThreadPool();\n\treceiveService = Executors.newFixedThreadPool(1);\n    }\n\n    public synchronized void send(final String httpBase, final String xml, final ConnectorCallback callback)\n\t    throws ConnectorException {\n\n\tsendService.execute(createSendAction(httpBase, xml, callback));\n    }\n\n    protected void debug(final String pattern, final Object... arguments) {\n\t// FIXME\n\tMessageFormat.format(pattern, arguments);\n    }\n\n    private Runnable createResponseAction(final String xml, final ConnectorCallback callback, final String id,\n\t    final int status, final String response) {\n\tfinal Runnable runnable = new Runnable() {\n\t    public void run() {\n\t\tif (status == HttpStatus.SC_OK) {\n\t\t    System.out.println(\"RECEIVED: \" + response);\n\t\t    debug(\"Connector [{0}] receive: {1}\", id, response);\n\t\t    callback.onResponseReceived(status, response, xml);\n\t\t} else {\n\t\t    debug(\"Connector [{0}] bad status: {1}\", id, status);\n\t\t    callback.onError(xml, new Exception(\"bad http status \" + status));\n\t\t}\n\n\t    }\n\n\t};\n\treturn runnable;\n    }\n\n    private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {\n\treturn new Runnable() {\n\t    public void run() {\n\t\tfinal String id = HttpConnectorID.getNext();\n\t\tdebug(\"Connector [{0}] send: {1}\", id, xml);\n\t\tfinal HttpClient client = new DefaultHttpClient();\n\t\tint status = 0;\n\t\tString responseString = null;\n\t\tfinal HttpPost post = new HttpPost(httpBase);\n\n\t\ttry {\n\t\t    post.setEntity(new StringEntity(xml, \"text/xml\", \"utf-8\"));\n\t\t    System.out.println(\"SENDING: \" + xml);\n\t\t    HttpResponse response = client.execute(post);\n\t\t    responseString = EntityUtils.toString(response.getEntity());\n\t\t} catch (final Exception e) {\n\t\t    callback.onError(xml, e);\n\t\t    e.printStackTrace();\n\t\t}\n\n\t\treceiveService.execute(createResponseAction(xml, callback, id, status, responseString));\n\t    }\n\t};\n    }\n}",
        "start_point": {
            "row": 38,
            "column": 0
        },
        "end_point": {
            "row": 112,
            "column": 1
        },
        "file_mode": "Renamed-Modified",
        "map_path": "src/main/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "methods": [
            {
                "definition": "public HttpConnector() {\ndService = Executors.newCachedThreadPool();\neiveService = Executors.newFixedThreadPool(1);\n}",
                "name": "HttpConnector",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ndService = Executors.newCachedThreadPool();\neiveService = Executors.newFixedThreadPool(1);\n}",
                "constructor": true,
                "start_point": {
                    "row": 53,
                    "column": 4
                },
                "end_point": {
                    "row": 56,
                    "column": 5
                }
            },
            {
                "definition": "public synchronized void send(final String httpBase, final String xml, final ConnectorCallback callback)\n throws ConnectorException {\n\ndService.execute(createSendAction(httpBase, xml, callback));\n}",
                "name": "send",
                "modifiers": "public synchronized",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    }
                ],
                "body": "{\n\ndService.execute(createSendAction(httpBase, xml, callback));\n}",
                "start_point": {
                    "row": 58,
                    "column": 4
                },
                "end_point": {
                    "row": 62,
                    "column": 5
                }
            },
            {
                "definition": "protected void debug(final String pattern, final Object... arguments) {\nFIXME\nsageFormat.format(pattern, arguments);\n}",
                "name": "debug",
                "modifiers": "protected",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nFIXME\nsageFormat.format(pattern, arguments);\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 67,
                    "column": 5
                }
            },
            {
                "definition": "private Runnable createResponseAction(final String xml, final ConnectorCallback callback, final String id,\n final int status, final String response) {\nal Runnable runnable = new Runnable() {\n public void run() {\n (status == HttpStatus.SC_OK) {\n  System.out.println(\"RECEIVED: \" + response);\n  debug(\"Connector [{0}] receive: {1}\", id, response);\n  callback.onResponseReceived(status, response, xml);\nelse {\n  debug(\"Connector [{0}] bad status: {1}\", id, status);\n  callback.onError(xml, new Exception(\"bad http status \" + status));\n\n\n }\n\n\nurn runnable;\n}",
                "name": "createResponseAction",
                "modifiers": "private",
                "return_type": "Runnable",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "int"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal Runnable runnable = new Runnable() {\n public void run() {\n (status == HttpStatus.SC_OK) {\n  System.out.println(\"RECEIVED: \" + response);\n  debug(\"Connector [{0}] receive: {1}\", id, response);\n  callback.onResponseReceived(status, response, xml);\nelse {\n  debug(\"Connector [{0}] bad status: {1}\", id, status);\n  callback.onError(xml, new Exception(\"bad http status \" + status));\n\n\n }\n\n\nurn runnable;\n}",
                "start_point": {
                    "row": 69,
                    "column": 4
                },
                "end_point": {
                    "row": 86,
                    "column": 5
                }
            },
            {
                "definition": "private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {\nurn new Runnable() {\n public void run() {\nnal String id = HttpConnectorID.getNext();\nbug(\"Connector [{0}] send: {1}\", id, xml);\nnal HttpClient client = new DefaultHttpClient();\nt status = 0;\nring responseString = null;\nnal HttpPost post = new HttpPost(httpBase);\n\ny {\n  post.setEntity(new StringEntity(xml, \"text/xml\", \"utf-8\"));\n  System.out.println(\"SENDING: \" + xml);\n  HttpResponse response = client.execute(post);\n  responseString = EntityUtils.toString(response.getEntity());\ncatch (final Exception e) {\n  callback.onError(xml, e);\n  e.printStackTrace();\n\n\nceiveService.execute(createResponseAction(xml, callback, id, status, responseString));\n }\n\n}",
                "name": "createSendAction",
                "modifiers": "private",
                "return_type": "Runnable",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    }
                ],
                "body": "{\nurn new Runnable() {\n public void run() {\nnal String id = HttpConnectorID.getNext();\nbug(\"Connector [{0}] send: {1}\", id, xml);\nnal HttpClient client = new DefaultHttpClient();\nt status = 0;\nring responseString = null;\nnal HttpPost post = new HttpPost(httpBase);\n\ny {\n  post.setEntity(new StringEntity(xml, \"text/xml\", \"utf-8\"));\n  System.out.println(\"SENDING: \" + xml);\n  HttpResponse response = client.execute(post);\n  responseString = EntityUtils.toString(response.getEntity());\ncatch (final Exception e) {\n  callback.onError(xml, e);\n  e.printStackTrace();\n\n\nceiveService.execute(createResponseAction(xml, callback, id, status, responseString));\n }\n\n}",
                "start_point": {
                    "row": 88,
                    "column": 4
                },
                "end_point": {
                    "row": 111,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/test/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "definition": "private static class HttpConnectorID {\nvate static int id = 0;\n\nlic static String getNext() {\n id++;\n return String.valueOf(id);\n\n\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "HttpConnector.HttpConnectorID",
        "name": "HttpConnectorID",
        "modifiers": "private static",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\nvate static int id = 0;\n\nlic static String getNext() {\n id++;\n return String.valueOf(id);\n\n\n}",
        "start_point": {
            "row": 40,
            "column": 4
        },
        "end_point": {
            "row": 48,
            "column": 5
        },
        "file_mode": "Renamed-Modified",
        "map_path": "src/main/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "methods": [
            {
                "definition": "public static String getNext() {\n    id++;\n    return String.valueOf(id);\n}",
                "name": "getNext",
                "modifiers": "public static",
                "return_type": "String",
                "parameters": [],
                "body": "{\n    id++;\n    return String.valueOf(id);\n}",
                "start_point": {
                    "row": 43,
                    "column": 1
                },
                "end_point": {
                    "row": 46,
                    "column": 2
                }
            }
        ]
    }
]