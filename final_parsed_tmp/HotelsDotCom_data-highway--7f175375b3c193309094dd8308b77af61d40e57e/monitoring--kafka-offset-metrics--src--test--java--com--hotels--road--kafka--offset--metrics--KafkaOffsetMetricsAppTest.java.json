[
    {
        "rev_path": "monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsAppTest.java",
        "definition": "public class KafkaOffsetMetricsAppTest {\n\n  private static final String TOPIC = \"test.topic\";\n\n  @Rule\n  public EmbeddedKafkaCluster kafka = new EmbeddedKafkaCluster(1);\n\n  @Configuration\n  static class TestConfig {\n    @Primary\n    @Bean\n    Clock clock() {\n      return new Clock() {\n        @Override\n        public long getTick() {\n          return 0L;\n        }\n\n        @Override\n        public long getTime() {\n          return 123000L;\n        }\n      };\n    }\n\n    @Primary\n    @Bean\n    Supplier<String> hostnameSupplier() {\n      return () -> \"hostname\";\n    }\n  }\n\n  @Test\n  public void test() throws Exception {\n    kafka.createTopic(TOPIC);\n\n    try (KafkaConsumer<String, String> consumer = consumer()) {\n      consumer.commitSync(singletonMap(new TopicPartition(TOPIC, 0), new OffsetAndMetadata(1L)));\n    }\n\n    try (ServerSocket serverSocket = new ServerSocket(0)) {\n      CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {\n        try (Socket socket = serverSocket.accept();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n          return reader.readLine();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n\n      try (ConfigurableApplicationContext context = runApp(serverSocket.getLocalPort())) {\n        Awaitility.await().atMost(5, SECONDS).pollInterval(100, MILLISECONDS).until(() -> {\n          assertThat(future.isDone(), is(true));\n          assertThat(future.join(),\n              is(\"road.kafka-offset.host.hostname.group.group_id.topic.test_topic.partition.0.offset 1 123\"));\n        });\n      }\n    }\n  }\n\n  private ConfigurableApplicationContext runApp(int port) {\n    String[] args = ImmutableMap\n        .<String, String> builder()\n        .put(\"kafka.bootstrapServers\", kafka.bootstrapServers())\n        .put(\"graphite.endpoint\", \"localhost:\" + port)\n        .put(\"metricRate\", \"1000\")\n        .build()\n        .entrySet()\n        .stream()\n        .map(e -> String.format(\"--%s=%s\", e.getKey(), e.getValue()))\n        .toArray(i -> new String[i]);\n    return new SpringApplicationBuilder(KafkaOffsetMetricsApp.class, TestConfig.class).bannerMode(OFF).run(args);\n  }\n\n  private KafkaConsumer<String, String> consumer() {\n    Map<String, Object> config = ImmutableMap\n        .<String, Object> builder()\n        .put(\"bootstrap.servers\", kafka.bootstrapServers())\n        .put(\"group.id\", \"group.id\")\n        .put(\"enable.auto.commit\", \"false\")\n        .put(\"auto.offset.reset\", \"earliest\")\n        .build();\n    Deserializer<String> deserializer = new StringDeserializer();\n    return new KafkaConsumer<>(config, deserializer, deserializer);\n  }\n}",
        "package": "package com.hotels.road.kafka.offset.metrics;",
        "tree_path": "KafkaOffsetMetricsAppTest",
        "name": "KafkaOffsetMetricsAppTest",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n  private static final String TOPIC = \"test.topic\";\n\n  @Rule\n  public EmbeddedKafkaCluster kafka = new EmbeddedKafkaCluster(1);\n\n  @Configuration\n  static class TestConfig {\n    @Primary\n    @Bean\n    Clock clock() {\n      return new Clock() {\n        @Override\n        public long getTick() {\n          return 0L;\n        }\n\n        @Override\n        public long getTime() {\n          return 123000L;\n        }\n      };\n    }\n\n    @Primary\n    @Bean\n    Supplier<String> hostnameSupplier() {\n      return () -> \"hostname\";\n    }\n  }\n\n  @Test\n  public void test() throws Exception {\n    kafka.createTopic(TOPIC);\n\n    try (KafkaConsumer<String, String> consumer = consumer()) {\n      consumer.commitSync(singletonMap(new TopicPartition(TOPIC, 0), new OffsetAndMetadata(1L)));\n    }\n\n    try (ServerSocket serverSocket = new ServerSocket(0)) {\n      CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {\n        try (Socket socket = serverSocket.accept();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n          return reader.readLine();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n\n      try (ConfigurableApplicationContext context = runApp(serverSocket.getLocalPort())) {\n        Awaitility.await().atMost(5, SECONDS).pollInterval(100, MILLISECONDS).until(() -> {\n          assertThat(future.isDone(), is(true));\n          assertThat(future.join(),\n              is(\"road.kafka-offset.host.hostname.group.group_id.topic.test_topic.partition.0.offset 1 123\"));\n        });\n      }\n    }\n  }\n\n  private ConfigurableApplicationContext runApp(int port) {\n    String[] args = ImmutableMap\n        .<String, String> builder()\n        .put(\"kafka.bootstrapServers\", kafka.bootstrapServers())\n        .put(\"graphite.endpoint\", \"localhost:\" + port)\n        .put(\"metricRate\", \"1000\")\n        .build()\n        .entrySet()\n        .stream()\n        .map(e -> String.format(\"--%s=%s\", e.getKey(), e.getValue()))\n        .toArray(i -> new String[i]);\n    return new SpringApplicationBuilder(KafkaOffsetMetricsApp.class, TestConfig.class).bannerMode(OFF).run(args);\n  }\n\n  private KafkaConsumer<String, String> consumer() {\n    Map<String, Object> config = ImmutableMap\n        .<String, Object> builder()\n        .put(\"bootstrap.servers\", kafka.bootstrapServers())\n        .put(\"group.id\", \"group.id\")\n        .put(\"enable.auto.commit\", \"false\")\n        .put(\"auto.offset.reset\", \"earliest\")\n        .build();\n    Deserializer<String> deserializer = new StringDeserializer();\n    return new KafkaConsumer<>(config, deserializer, deserializer);\n  }\n}",
        "start_point": {
            "row": 51,
            "column": 0
        },
        "end_point": {
            "row": 136,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Test\npublic void test() throws Exception {\n  kafka.createTopic(TOPIC);\n\n  try (KafkaConsumer<String, String> consumer = consumer()) {\n    consumer.commitSync(singletonMap(new TopicPartition(TOPIC, 0), new OffsetAndMetadata(1L)));\n  }\n\n  try (ServerSocket serverSocket = new ServerSocket(0)) {\n    CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {\n      try (Socket socket = serverSocket.accept();\n          BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n        return reader.readLine();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n\n    try (ConfigurableApplicationContext context = runApp(serverSocket.getLocalPort())) {\n      Awaitility.await().atMost(5, SECONDS).pollInterval(100, MILLISECONDS).until(() -> {\n        assertThat(future.isDone(), is(true));\n        assertThat(future.join(),\n            is(\"road.kafka-offset.host.hostname.group.group_id.topic.test_topic.partition.0.offset 1 123\"));\n      });\n    }\n  }\n}",
                "name": "test",
                "modifiers": "@Test\n  public",
                "return_type": null,
                "parameters": [],
                "body": "{\n  kafka.createTopic(TOPIC);\n\n  try (KafkaConsumer<String, String> consumer = consumer()) {\n    consumer.commitSync(singletonMap(new TopicPartition(TOPIC, 0), new OffsetAndMetadata(1L)));\n  }\n\n  try (ServerSocket serverSocket = new ServerSocket(0)) {\n    CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {\n      try (Socket socket = serverSocket.accept();\n          BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n        return reader.readLine();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n\n    try (ConfigurableApplicationContext context = runApp(serverSocket.getLocalPort())) {\n      Awaitility.await().atMost(5, SECONDS).pollInterval(100, MILLISECONDS).until(() -> {\n        assertThat(future.isDone(), is(true));\n        assertThat(future.join(),\n            is(\"road.kafka-offset.host.hostname.group.group_id.topic.test_topic.partition.0.offset 1 123\"));\n      });\n    }\n  }\n}",
                "start_point": {
                    "row": 83,
                    "column": 2
                },
                "end_point": {
                    "row": 109,
                    "column": 3
                }
            },
            {
                "definition": "private ConfigurableApplicationContext runApp(int port) {\n  String[] args = ImmutableMap\n      .<String, String> builder()\n      .put(\"kafka.bootstrapServers\", kafka.bootstrapServers())\n      .put(\"graphite.endpoint\", \"localhost:\" + port)\n      .put(\"metricRate\", \"1000\")\n      .build()\n      .entrySet()\n      .stream()\n      .map(e -> String.format(\"--%s=%s\", e.getKey(), e.getValue()))\n      .toArray(i -> new String[i]);\n  return new SpringApplicationBuilder(KafkaOffsetMetricsApp.class, TestConfig.class).bannerMode(OFF).run(args);\n}",
                "name": "runApp",
                "modifiers": "private",
                "return_type": "ConfigurableApplicationContext",
                "parameters": [
                    {
                        "type": "int",
                        "name": "port"
                    }
                ],
                "body": "{\n  String[] args = ImmutableMap\n      .<String, String> builder()\n      .put(\"kafka.bootstrapServers\", kafka.bootstrapServers())\n      .put(\"graphite.endpoint\", \"localhost:\" + port)\n      .put(\"metricRate\", \"1000\")\n      .build()\n      .entrySet()\n      .stream()\n      .map(e -> String.format(\"--%s=%s\", e.getKey(), e.getValue()))\n      .toArray(i -> new String[i]);\n  return new SpringApplicationBuilder(KafkaOffsetMetricsApp.class, TestConfig.class).bannerMode(OFF).run(args);\n}",
                "start_point": {
                    "row": 111,
                    "column": 2
                },
                "end_point": {
                    "row": 123,
                    "column": 3
                }
            },
            {
                "definition": "private KafkaConsumer<String, String> consumer() {\n  Map<String, Object> config = ImmutableMap\n      .<String, Object> builder()\n      .put(\"bootstrap.servers\", kafka.bootstrapServers())\n      .put(\"group.id\", \"group.id\")\n      .put(\"enable.auto.commit\", \"false\")\n      .put(\"auto.offset.reset\", \"earliest\")\n      .build();\n  Deserializer<String> deserializer = new StringDeserializer();\n  return new KafkaConsumer<>(config, deserializer, deserializer);\n}",
                "name": "consumer",
                "modifiers": "private",
                "return_type": null,
                "parameters": [],
                "body": "{\n  Map<String, Object> config = ImmutableMap\n      .<String, Object> builder()\n      .put(\"bootstrap.servers\", kafka.bootstrapServers())\n      .put(\"group.id\", \"group.id\")\n      .put(\"enable.auto.commit\", \"false\")\n      .put(\"auto.offset.reset\", \"earliest\")\n      .build();\n  Deserializer<String> deserializer = new StringDeserializer();\n  return new KafkaConsumer<>(config, deserializer, deserializer);\n}",
                "start_point": {
                    "row": 125,
                    "column": 2
                },
                "end_point": {
                    "row": 135,
                    "column": 3
                }
            }
        ],
        "class_mode": "Modified"
    },
    {
        "rev_path": "monitoring/kafka-offset-metrics/src/test/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsAppTest.java",
        "definition": "@Configuration\nstatic class TestConfig {\n  @Primary\n  @Bean\n  Clock clock() {\n    return new Clock() {\n      @Override\n      public long getTick() {\n        return 0L;\n      }\n\n      @Override\n      public long getTime() {\n        return 123000L;\n      }\n    };\n  }\n\n  @Primary\n  @Bean\n  Supplier<String> hostnameSupplier() {\n    return () -> \"hostname\";\n  }\n}",
        "package": "package com.hotels.road.kafka.offset.metrics;",
        "tree_path": "KafkaOffsetMetricsAppTest.TestConfig",
        "name": "TestConfig",
        "modifiers": "@Configuration\n  static",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n  @Primary\n  @Bean\n  Clock clock() {\n    return new Clock() {\n      @Override\n      public long getTick() {\n        return 0L;\n      }\n\n      @Override\n      public long getTime() {\n        return 123000L;\n      }\n    };\n  }\n\n  @Primary\n  @Bean\n  Supplier<String> hostnameSupplier() {\n    return () -> \"hostname\";\n  }\n}",
        "start_point": {
            "row": 58,
            "column": 2
        },
        "end_point": {
            "row": 81,
            "column": 3
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Primary\n@Bean\nClock clock() {\n  return new Clock() {\n    @Override\n    public long getTick() {\n      return 0L;\n    }\n\n    @Override\n    public long getTime() {\n      return 123000L;\n    }\n  };\n}",
                "name": "clock",
                "modifiers": "@Primary\n    @Bean",
                "return_type": "Clock",
                "parameters": [],
                "body": "{\n  return new Clock() {\n    @Override\n    public long getTick() {\n      return 0L;\n    }\n\n    @Override\n    public long getTime() {\n      return 123000L;\n    }\n  };\n}",
                "start_point": {
                    "row": 60,
                    "column": 4
                },
                "end_point": {
                    "row": 74,
                    "column": 5
                }
            },
            {
                "definition": "@Primary\n@Bean\nSupplier<String> hostnameSupplier() {\n  return () -> \"hostname\";\n}",
                "name": "hostnameSupplier",
                "modifiers": "@Primary\n    @Bean",
                "return_type": null,
                "parameters": [],
                "body": "{\n  return () -> \"hostname\";\n}",
                "start_point": {
                    "row": 76,
                    "column": 4
                },
                "end_point": {
                    "row": 80,
                    "column": 5
                }
            }
        ],
        "class_mode": "Renamed-Modified",
        "map_tree_path": "KafkaOffsetMetricsAppTest"
    }
]