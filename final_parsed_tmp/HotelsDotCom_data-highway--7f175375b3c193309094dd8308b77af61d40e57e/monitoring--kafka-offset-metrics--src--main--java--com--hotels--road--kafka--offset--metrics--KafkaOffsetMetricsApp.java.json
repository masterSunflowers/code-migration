[
    {
        "rev_path": "monitoring/kafka-offset-metrics/src/main/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetricsApp.java",
        "definition": "@SpringBootApplication\n@EnableScheduling\npublic class KafkaOffsetMetricsApp {\n  @Bean\n  AdminClient adminClient(@Value(\"${kafka.bootstrapServers}\") String bootstrapServers) {\n    Properties properties = new Properties();\n    properties.setProperty(\"bootstrap.servers\", bootstrapServers);\n    return AdminClient.create(properties);\n  }\n\n  @Bean\n  ScheduledReporter reporter(\n      @Value(\"${graphite.endpoint}\") String graphiteEndpoint,\n      @Value(\"${graphite.prefix:road}\") String graphitePrefix,\n      Clock clock,\n      Supplier<String> hostnameSupplier) {\n    HostAndPort hostAndPort = HostAndPort.fromString(graphiteEndpoint);\n    InetSocketAddress socketAddress = new InetSocketAddress(hostAndPort.getHost(), hostAndPort.getPort());\n    return GraphiteReporter\n        .forRegistry(new MetricRegistry())\n        .prefixedWith(MetricRegistry.name(graphitePrefix, \"kafka-offset\", \"host\", hostnameSupplier.get()))\n        .withClock(clock)\n        .build(new Graphite(socketAddress));\n  }\n\n  @Bean\n  Clock clock() {\n    return Clock.defaultClock();\n  }\n\n  @Bean\n  Supplier<String> hostnameSupplier() {\n    return () -> {\n      try {\n        return InetAddress.getLocalHost().getHostName();\n      } catch (UnknownHostException e) {\n        throw new RuntimeException(e);\n      }\n    };\n  }\n\n  public static void main(String[] args) {\n    DataHighwayApplication.run(KafkaOffsetMetricsApp.class, args);\n  }\n}",
        "package": "package com.hotels.road.kafka.offset.metrics;",
        "tree_path": "KafkaOffsetMetricsApp",
        "name": "KafkaOffsetMetricsApp",
        "modifiers": "@SpringBootApplication\n@EnableScheduling\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n  @Bean\n  AdminClient adminClient(@Value(\"${kafka.bootstrapServers}\") String bootstrapServers) {\n    Properties properties = new Properties();\n    properties.setProperty(\"bootstrap.servers\", bootstrapServers);\n    return AdminClient.create(properties);\n  }\n\n  @Bean\n  ScheduledReporter reporter(\n      @Value(\"${graphite.endpoint}\") String graphiteEndpoint,\n      @Value(\"${graphite.prefix:road}\") String graphitePrefix,\n      Clock clock,\n      Supplier<String> hostnameSupplier) {\n    HostAndPort hostAndPort = HostAndPort.fromString(graphiteEndpoint);\n    InetSocketAddress socketAddress = new InetSocketAddress(hostAndPort.getHost(), hostAndPort.getPort());\n    return GraphiteReporter\n        .forRegistry(new MetricRegistry())\n        .prefixedWith(MetricRegistry.name(graphitePrefix, \"kafka-offset\", \"host\", hostnameSupplier.get()))\n        .withClock(clock)\n        .build(new Graphite(socketAddress));\n  }\n\n  @Bean\n  Clock clock() {\n    return Clock.defaultClock();\n  }\n\n  @Bean\n  Supplier<String> hostnameSupplier() {\n    return () -> {\n      try {\n        return InetAddress.getLocalHost().getHostName();\n      } catch (UnknownHostException e) {\n        throw new RuntimeException(e);\n      }\n    };\n  }\n\n  public static void main(String[] args) {\n    DataHighwayApplication.run(KafkaOffsetMetricsApp.class, args);\n  }\n}",
        "start_point": {
            "row": 39,
            "column": 0
        },
        "end_point": {
            "row": 83,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Bean\nAdminClient adminClient(@Value(\"${kafka.bootstrapServers}\") String bootstrapServers) {\n  Properties properties = new Properties();\n  properties.setProperty(\"bootstrap.servers\", bootstrapServers);\n  return AdminClient.create(properties);\n}",
                "name": "adminClient",
                "modifiers": "@Bean",
                "return_type": "AdminClient",
                "parameters": [
                    {
                        "type": "@Value(\"${kafka.bootstrapServers}\")",
                        "name": "String"
                    }
                ],
                "body": "{\n  Properties properties = new Properties();\n  properties.setProperty(\"bootstrap.servers\", bootstrapServers);\n  return AdminClient.create(properties);\n}",
                "start_point": {
                    "row": 42,
                    "column": 2
                },
                "end_point": {
                    "row": 47,
                    "column": 3
                }
            },
            {
                "definition": "@Bean\nScheduledReporter reporter(\n    @Value(\"${graphite.endpoint}\") String graphiteEndpoint,\n    @Value(\"${graphite.prefix:road}\") String graphitePrefix,\n    Clock clock,\n    Supplier<String> hostnameSupplier) {\n  HostAndPort hostAndPort = HostAndPort.fromString(graphiteEndpoint);\n  InetSocketAddress socketAddress = new InetSocketAddress(hostAndPort.getHost(), hostAndPort.getPort());\n  return GraphiteReporter\n      .forRegistry(new MetricRegistry())\n      .prefixedWith(MetricRegistry.name(graphitePrefix, \"kafka-offset\", \"host\", hostnameSupplier.get()))\n      .withClock(clock)\n      .build(new Graphite(socketAddress));\n}",
                "name": "reporter",
                "modifiers": "@Bean",
                "return_type": "ScheduledReporter",
                "parameters": [
                    {
                        "type": "@Value(\"${graphite.endpoint}\")",
                        "name": "String"
                    },
                    {
                        "type": "@Value(\"${graphite.prefix:road}\")",
                        "name": "String"
                    },
                    {
                        "type": "Clock",
                        "name": "clock"
                    },
                    {
                        "type": "Supplier<String>",
                        "name": "hostnameSupplier"
                    }
                ],
                "body": "{\n  HostAndPort hostAndPort = HostAndPort.fromString(graphiteEndpoint);\n  InetSocketAddress socketAddress = new InetSocketAddress(hostAndPort.getHost(), hostAndPort.getPort());\n  return GraphiteReporter\n      .forRegistry(new MetricRegistry())\n      .prefixedWith(MetricRegistry.name(graphitePrefix, \"kafka-offset\", \"host\", hostnameSupplier.get()))\n      .withClock(clock)\n      .build(new Graphite(socketAddress));\n}",
                "start_point": {
                    "row": 49,
                    "column": 2
                },
                "end_point": {
                    "row": 62,
                    "column": 3
                }
            },
            {
                "definition": "@Bean\nClock clock() {\n  return Clock.defaultClock();\n}",
                "name": "clock",
                "modifiers": "@Bean",
                "return_type": "Clock",
                "parameters": [],
                "body": "{\n  return Clock.defaultClock();\n}",
                "start_point": {
                    "row": 64,
                    "column": 2
                },
                "end_point": {
                    "row": 67,
                    "column": 3
                }
            },
            {
                "definition": "@Bean\nSupplier<String> hostnameSupplier() {\n  return () -> {\n    try {\n      return InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      throw new RuntimeException(e);\n    }\n  };\n}",
                "name": "hostnameSupplier",
                "modifiers": "@Bean",
                "return_type": null,
                "parameters": [],
                "body": "{\n  return () -> {\n    try {\n      return InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      throw new RuntimeException(e);\n    }\n  };\n}",
                "start_point": {
                    "row": 69,
                    "column": 2
                },
                "end_point": {
                    "row": 78,
                    "column": 3
                }
            },
            {
                "definition": "public static void main(String[] args) {\n  DataHighwayApplication.run(KafkaOffsetMetricsApp.class, args);\n}",
                "name": "main",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String[]",
                        "name": "args"
                    }
                ],
                "body": "{\n  DataHighwayApplication.run(KafkaOffsetMetricsApp.class, args);\n}",
                "start_point": {
                    "row": 80,
                    "column": 2
                },
                "end_point": {
                    "row": 82,
                    "column": 3
                }
            }
        ],
        "class_mode": "Modified"
    }
]