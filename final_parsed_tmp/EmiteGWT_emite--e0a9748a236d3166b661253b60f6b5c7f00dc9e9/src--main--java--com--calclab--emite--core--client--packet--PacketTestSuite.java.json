[
    {
        "rev_path": "src/main/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "definition": "public final class PacketTestSuite {\n\n    public static interface Helper {\n\tpublic void assertEquals(Object expected, Object actual);\n\n\tpublic void assertTrue(String message, boolean condition);\n\n\tpublic IPacket createPacket(String nodeName);\n\n\tpublic void log(String message);\n    }\n\n    private static class HelperExtended implements Helper {\n\tprivate final Helper delegate;\n\n\tpublic HelperExtended(final Helper delegate) {\n\t    this.delegate = delegate;\n\t}\n\n\tpublic void assertEquals(final Object expected, final Object actual) {\n\t    delegate.assertEquals(expected, actual);\n\t}\n\n\tpublic void assertFalse(final boolean condition) {\n\t    assertTrue(\"\", !condition);\n\t}\n\n\tpublic void assertNotNull(final Object o) {\n\t    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\t}\n\n\tpublic void assertNull(final Object value) {\n\t    assertTrue(\"should be null: \" + safeString(value), value == null);\n\t}\n\n\tpublic void assertSame(final Object expected, final Object actual) {\n\t    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t\t    expected == actual);\n\t}\n\n\tpublic void assertTrue(final boolean condition) {\n\t    assertTrue(\"\", condition);\n\t}\n\n\tpublic void assertTrue(final String message, final boolean condition) {\n\t    delegate.assertTrue(message, condition);\n\t}\n\n\tpublic IPacket createPacket(final String nodeName) {\n\t    return delegate.createPacket(nodeName);\n\t}\n\n\tpublic void log(final String message) {\n\t    delegate.log(message);\n\t}\n\n\tpublic String safeString(final Object value) {\n\t    return value == null ? \"[null]\" : value.toString();\n\t}\n\n    }\n\n    public static void runPacketTests(final Helper utility) {\n\tfinal HelperExtended helper = new HelperExtended(utility);\n\tshouldNeverReturnNullWhenGetChildren(helper);\n\tshouldReturnNoPacketWhenGetFirstChild(helper);\n\tshouldSetAndClearTheAttributes(helper);\n\tshouldSetText(helper);\n\tshouldRemoveChildIfPresent(helper);\n\tshouldRenderAttributes(helper);\n\tshouldRenderChilds(helper);\n\tshouldRenderTextChildren(helper);\n\tshouldScapeText(helper);\n    }\n\n    private static void shouldNeverReturnNullWhenGetChildren(final HelperExtended helper) {\n\thelper.log(\"- shouldNeverReturnNullWhenGetChildren\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal List<? extends IPacket> children = packet.getChildren();\n\thelper.assertNotNull(children);\n\thelper.assertEquals(0, children.size());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRemoveChildIfPresent(final HelperExtended helper) {\n\thelper.log(\"- shouldRemoveChildIfPresent\");\n\tfinal IPacket root = helper.createPacket(\"packet\");\n\thelper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\n\tfinal IPacket child = root.addChild(\"child\", null);\n\thelper.assertEquals(1, root.getChildrenCount());\n\thelper.assertTrue(root.removeChild(child));\n\thelper.assertEquals(0, root.getChildrenCount());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRenderAttributes(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\n\thelper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderChilds(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"level0\");\n\tfinal IPacket child = packet.addChild(\"level1\", null);\n\tchild.addChild(\"level2\", null);\n\thelper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderTextChildren(final HelperExtended helper) {\n\tfinal IPacket root = helper.createPacket(\"root\");\n\troot.setText(\"the text\");\n\thelper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n    }\n\n    private static void shouldReturnNoPacketWhenGetFirstChild(final HelperExtended helper) {\n\thelper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal IPacket child = packet.getFirstChild(\"child\");\n\thelper.assertNotNull(child);\n\thelper.assertSame(NoPacket.INSTANCE, child);\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldScapeText(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"body\");\n\tpacket.setText(\"&\");\n\thelper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n    }\n\n    private static void shouldSetAndClearTheAttributes(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setAttribute(\"name\", \"value\");\n\thelper.assertEquals(\"value\", packet.getAttribute(\"name\"));\n\tpacket.setAttribute(\"name\", null);\n\thelper.assertNull(packet.getAttribute(\"name\"));\n\thelper.assertFalse(packet.hasAttribute(\"name\"));\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldSetText(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setText(\"text1\");\n\thelper.assertEquals(\"text1\", packet.getText());\n\tpacket.setText(\"text2\");\n\thelper.assertEquals(\"text2\", packet.getText());\n\thelper.log(\"- test ends\");\n    }\n\n}",
        "package": "package com.calclab.emite.core.client.packet;",
        "tree_path": "PacketTestSuite",
        "name": "PacketTestSuite",
        "modifiers": "public final",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public static interface Helper {\n\tpublic void assertEquals(Object expected, Object actual);\n\n\tpublic void assertTrue(String message, boolean condition);\n\n\tpublic IPacket createPacket(String nodeName);\n\n\tpublic void log(String message);\n    }\n\n    private static class HelperExtended implements Helper {\n\tprivate final Helper delegate;\n\n\tpublic HelperExtended(final Helper delegate) {\n\t    this.delegate = delegate;\n\t}\n\n\tpublic void assertEquals(final Object expected, final Object actual) {\n\t    delegate.assertEquals(expected, actual);\n\t}\n\n\tpublic void assertFalse(final boolean condition) {\n\t    assertTrue(\"\", !condition);\n\t}\n\n\tpublic void assertNotNull(final Object o) {\n\t    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\t}\n\n\tpublic void assertNull(final Object value) {\n\t    assertTrue(\"should be null: \" + safeString(value), value == null);\n\t}\n\n\tpublic void assertSame(final Object expected, final Object actual) {\n\t    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t\t    expected == actual);\n\t}\n\n\tpublic void assertTrue(final boolean condition) {\n\t    assertTrue(\"\", condition);\n\t}\n\n\tpublic void assertTrue(final String message, final boolean condition) {\n\t    delegate.assertTrue(message, condition);\n\t}\n\n\tpublic IPacket createPacket(final String nodeName) {\n\t    return delegate.createPacket(nodeName);\n\t}\n\n\tpublic void log(final String message) {\n\t    delegate.log(message);\n\t}\n\n\tpublic String safeString(final Object value) {\n\t    return value == null ? \"[null]\" : value.toString();\n\t}\n\n    }\n\n    public static void runPacketTests(final Helper utility) {\n\tfinal HelperExtended helper = new HelperExtended(utility);\n\tshouldNeverReturnNullWhenGetChildren(helper);\n\tshouldReturnNoPacketWhenGetFirstChild(helper);\n\tshouldSetAndClearTheAttributes(helper);\n\tshouldSetText(helper);\n\tshouldRemoveChildIfPresent(helper);\n\tshouldRenderAttributes(helper);\n\tshouldRenderChilds(helper);\n\tshouldRenderTextChildren(helper);\n\tshouldScapeText(helper);\n    }\n\n    private static void shouldNeverReturnNullWhenGetChildren(final HelperExtended helper) {\n\thelper.log(\"- shouldNeverReturnNullWhenGetChildren\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal List<? extends IPacket> children = packet.getChildren();\n\thelper.assertNotNull(children);\n\thelper.assertEquals(0, children.size());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRemoveChildIfPresent(final HelperExtended helper) {\n\thelper.log(\"- shouldRemoveChildIfPresent\");\n\tfinal IPacket root = helper.createPacket(\"packet\");\n\thelper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\n\tfinal IPacket child = root.addChild(\"child\", null);\n\thelper.assertEquals(1, root.getChildrenCount());\n\thelper.assertTrue(root.removeChild(child));\n\thelper.assertEquals(0, root.getChildrenCount());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRenderAttributes(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\n\thelper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderChilds(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"level0\");\n\tfinal IPacket child = packet.addChild(\"level1\", null);\n\tchild.addChild(\"level2\", null);\n\thelper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderTextChildren(final HelperExtended helper) {\n\tfinal IPacket root = helper.createPacket(\"root\");\n\troot.setText(\"the text\");\n\thelper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n    }\n\n    private static void shouldReturnNoPacketWhenGetFirstChild(final HelperExtended helper) {\n\thelper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal IPacket child = packet.getFirstChild(\"child\");\n\thelper.assertNotNull(child);\n\thelper.assertSame(NoPacket.INSTANCE, child);\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldScapeText(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"body\");\n\tpacket.setText(\"&\");\n\thelper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n    }\n\n    private static void shouldSetAndClearTheAttributes(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setAttribute(\"name\", \"value\");\n\thelper.assertEquals(\"value\", packet.getAttribute(\"name\"));\n\tpacket.setAttribute(\"name\", null);\n\thelper.assertNull(packet.getAttribute(\"name\"));\n\thelper.assertFalse(packet.hasAttribute(\"name\"));\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldSetText(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setText(\"text1\");\n\thelper.assertEquals(\"text1\", packet.getText());\n\tpacket.setText(\"text2\");\n\thelper.assertEquals(\"text2\", packet.getText());\n\thelper.log(\"- test ends\");\n    }\n\n}",
        "start_point": {
            "row": 28,
            "column": 0
        },
        "end_point": {
            "row": 177,
            "column": 1
        },
        "file_mode": "Renamed-Modified",
        "map_path": "src/test/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "methods": [
            {
                "definition": "public static void runPacketTests(final Helper utility) {\nal HelperExtended helper = new HelperExtended(utility);\nuldNeverReturnNullWhenGetChildren(helper);\nuldReturnNoPacketWhenGetFirstChild(helper);\nuldSetAndClearTheAttributes(helper);\nuldSetText(helper);\nuldRemoveChildIfPresent(helper);\nuldRenderAttributes(helper);\nuldRenderChilds(helper);\nuldRenderTextChildren(helper);\nuldScapeText(helper);\n}",
                "name": "runPacketTests",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Helper"
                    }
                ],
                "body": "{\nal HelperExtended helper = new HelperExtended(utility);\nuldNeverReturnNullWhenGetChildren(helper);\nuldReturnNoPacketWhenGetFirstChild(helper);\nuldSetAndClearTheAttributes(helper);\nuldSetText(helper);\nuldRemoveChildIfPresent(helper);\nuldRenderAttributes(helper);\nuldRenderChilds(helper);\nuldRenderTextChildren(helper);\nuldScapeText(helper);\n}",
                "start_point": {
                    "row": 90,
                    "column": 4
                },
                "end_point": {
                    "row": 101,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldNeverReturnNullWhenGetChildren(final HelperExtended helper) {\nper.log(\"- shouldNeverReturnNullWhenGetChildren\");\nal IPacket packet = helper.createPacket(\"root\");\nal List<? extends IPacket> children = packet.getChildren();\nper.assertNotNull(children);\nper.assertEquals(0, children.size());\nper.log(\"- test ends\");\n}",
                "name": "shouldNeverReturnNullWhenGetChildren",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldNeverReturnNullWhenGetChildren\");\nal IPacket packet = helper.createPacket(\"root\");\nal List<? extends IPacket> children = packet.getChildren();\nper.assertNotNull(children);\nper.assertEquals(0, children.size());\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 103,
                    "column": 4
                },
                "end_point": {
                    "row": 110,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRemoveChildIfPresent(final HelperExtended helper) {\nper.log(\"- shouldRemoveChildIfPresent\");\nal IPacket root = helper.createPacket(\"packet\");\nper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\nal IPacket child = root.addChild(\"child\", null);\nper.assertEquals(1, root.getChildrenCount());\nper.assertTrue(root.removeChild(child));\nper.assertEquals(0, root.getChildrenCount());\nper.log(\"- test ends\");\n}",
                "name": "shouldRemoveChildIfPresent",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldRemoveChildIfPresent\");\nal IPacket root = helper.createPacket(\"packet\");\nper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\nal IPacket child = root.addChild(\"child\", null);\nper.assertEquals(1, root.getChildrenCount());\nper.assertTrue(root.removeChild(child));\nper.assertEquals(0, root.getChildrenCount());\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 112,
                    "column": 4
                },
                "end_point": {
                    "row": 121,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRenderAttributes(final HelperExtended helper) {\nal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\nper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n}",
                "name": "shouldRenderAttributes",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\nper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n}",
                "start_point": {
                    "row": 123,
                    "column": 4
                },
                "end_point": {
                    "row": 126,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRenderChilds(final HelperExtended helper) {\nal IPacket packet = helper.createPacket(\"level0\");\nal IPacket child = packet.addChild(\"level1\", null);\nld.addChild(\"level2\", null);\nper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n}",
                "name": "shouldRenderChilds",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket packet = helper.createPacket(\"level0\");\nal IPacket child = packet.addChild(\"level1\", null);\nld.addChild(\"level2\", null);\nper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n}",
                "start_point": {
                    "row": 128,
                    "column": 4
                },
                "end_point": {
                    "row": 133,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRenderTextChildren(final HelperExtended helper) {\nal IPacket root = helper.createPacket(\"root\");\nt.setText(\"the text\");\nper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n}",
                "name": "shouldRenderTextChildren",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket root = helper.createPacket(\"root\");\nt.setText(\"the text\");\nper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n}",
                "start_point": {
                    "row": 135,
                    "column": 4
                },
                "end_point": {
                    "row": 139,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldReturnNoPacketWhenGetFirstChild(final HelperExtended helper) {\nper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\nal IPacket packet = helper.createPacket(\"root\");\nal IPacket child = packet.getFirstChild(\"child\");\nper.assertNotNull(child);\nper.assertSame(NoPacket.INSTANCE, child);\nper.log(\"- test ends\");\n}",
                "name": "shouldReturnNoPacketWhenGetFirstChild",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\nal IPacket packet = helper.createPacket(\"root\");\nal IPacket child = packet.getFirstChild(\"child\");\nper.assertNotNull(child);\nper.assertSame(NoPacket.INSTANCE, child);\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 141,
                    "column": 4
                },
                "end_point": {
                    "row": 148,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldScapeText(final HelperExtended helper) {\nal IPacket packet = helper.createPacket(\"body\");\nket.setText(\"&\");\nper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n}",
                "name": "shouldScapeText",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket packet = helper.createPacket(\"body\");\nket.setText(\"&\");\nper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n}",
                "start_point": {
                    "row": 150,
                    "column": 4
                },
                "end_point": {
                    "row": 154,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldSetAndClearTheAttributes(final HelperExtended helper) {\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setAttribute(\"name\", \"value\");\nper.assertEquals(\"value\", packet.getAttribute(\"name\"));\nket.setAttribute(\"name\", null);\nper.assertNull(packet.getAttribute(\"name\"));\nper.assertFalse(packet.hasAttribute(\"name\"));\nper.log(\"- test ends\");\n}",
                "name": "shouldSetAndClearTheAttributes",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setAttribute(\"name\", \"value\");\nper.assertEquals(\"value\", packet.getAttribute(\"name\"));\nket.setAttribute(\"name\", null);\nper.assertNull(packet.getAttribute(\"name\"));\nper.assertFalse(packet.hasAttribute(\"name\"));\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 156,
                    "column": 4
                },
                "end_point": {
                    "row": 165,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldSetText(final HelperExtended helper) {\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setText(\"text1\");\nper.assertEquals(\"text1\", packet.getText());\nket.setText(\"text2\");\nper.assertEquals(\"text2\", packet.getText());\nper.log(\"- test ends\");\n}",
                "name": "shouldSetText",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setText(\"text1\");\nper.assertEquals(\"text1\", packet.getText());\nket.setText(\"text2\");\nper.assertEquals(\"text2\", packet.getText());\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 167,
                    "column": 4
                },
                "end_point": {
                    "row": 175,
                    "column": 5
                }
            }
        ],
        "class_mode": "Unchanged"
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "definition": "private static class HelperExtended implements Helper {\nvate final Helper delegate;\n\nlic HelperExtended(final Helper delegate) {\n this.delegate = delegate;\n\n\nlic void assertEquals(final Object expected, final Object actual) {\n delegate.assertEquals(expected, actual);\n\n\nlic void assertFalse(final boolean condition) {\n assertTrue(\"\", !condition);\n\n\nlic void assertNotNull(final Object o) {\n assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\n\nlic void assertNull(final Object value) {\n assertTrue(\"should be null: \" + safeString(value), value == null);\n\n\nlic void assertSame(final Object expected, final Object actual) {\n assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n  expected == actual);\n\n\nlic void assertTrue(final boolean condition) {\n assertTrue(\"\", condition);\n\n\nlic void assertTrue(final String message, final boolean condition) {\n delegate.assertTrue(message, condition);\n\n\nlic IPacket createPacket(final String nodeName) {\n return delegate.createPacket(nodeName);\n\n\nlic void log(final String message) {\n delegate.log(message);\n\n\nlic String safeString(final Object value) {\n return value == null ? \"[null]\" : value.toString();\n\n\n}",
        "package": "package com.calclab.emite.core.client.packet;",
        "tree_path": "PacketTestSuite.HelperExtended",
        "name": "HelperExtended",
        "modifiers": "private static",
        "superclass": null,
        "super_interfaces": "implements Helper",
        "body": "{\nvate final Helper delegate;\n\nlic HelperExtended(final Helper delegate) {\n this.delegate = delegate;\n\n\nlic void assertEquals(final Object expected, final Object actual) {\n delegate.assertEquals(expected, actual);\n\n\nlic void assertFalse(final boolean condition) {\n assertTrue(\"\", !condition);\n\n\nlic void assertNotNull(final Object o) {\n assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\n\nlic void assertNull(final Object value) {\n assertTrue(\"should be null: \" + safeString(value), value == null);\n\n\nlic void assertSame(final Object expected, final Object actual) {\n assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n  expected == actual);\n\n\nlic void assertTrue(final boolean condition) {\n assertTrue(\"\", condition);\n\n\nlic void assertTrue(final String message, final boolean condition) {\n delegate.assertTrue(message, condition);\n\n\nlic IPacket createPacket(final String nodeName) {\n return delegate.createPacket(nodeName);\n\n\nlic void log(final String message) {\n delegate.log(message);\n\n\nlic String safeString(final Object value) {\n return value == null ? \"[null]\" : value.toString();\n\n\n}",
        "start_point": {
            "row": 40,
            "column": 4
        },
        "end_point": {
            "row": 88,
            "column": 5
        },
        "file_mode": "Renamed-Modified",
        "map_path": "src/test/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "methods": [
            {
                "definition": "public HelperExtended(final Helper delegate) {\n    this.delegate = delegate;\n}",
                "name": "HelperExtended",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Helper"
                    }
                ],
                "body": "{\n    this.delegate = delegate;\n}",
                "constructor": true,
                "start_point": {
                    "row": 43,
                    "column": 1
                },
                "end_point": {
                    "row": 45,
                    "column": 2
                }
            },
            {
                "definition": "public void assertEquals(final Object expected, final Object actual) {\n    delegate.assertEquals(expected, actual);\n}",
                "name": "assertEquals",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    delegate.assertEquals(expected, actual);\n}",
                "start_point": {
                    "row": 47,
                    "column": 1
                },
                "end_point": {
                    "row": 49,
                    "column": 2
                }
            },
            {
                "definition": "public void assertFalse(final boolean condition) {\n    assertTrue(\"\", !condition);\n}",
                "name": "assertFalse",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "boolean"
                    }
                ],
                "body": "{\n    assertTrue(\"\", !condition);\n}",
                "start_point": {
                    "row": 51,
                    "column": 1
                },
                "end_point": {
                    "row": 53,
                    "column": 2
                }
            },
            {
                "definition": "public void assertNotNull(final Object o) {\n    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n}",
                "name": "assertNotNull",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n}",
                "start_point": {
                    "row": 55,
                    "column": 1
                },
                "end_point": {
                    "row": 57,
                    "column": 2
                }
            },
            {
                "definition": "public void assertNull(final Object value) {\n    assertTrue(\"should be null: \" + safeString(value), value == null);\n}",
                "name": "assertNull",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    assertTrue(\"should be null: \" + safeString(value), value == null);\n}",
                "start_point": {
                    "row": 59,
                    "column": 1
                },
                "end_point": {
                    "row": 61,
                    "column": 2
                }
            },
            {
                "definition": "public void assertSame(final Object expected, final Object actual) {\n    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t    expected == actual);\n}",
                "name": "assertSame",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t    expected == actual);\n}",
                "start_point": {
                    "row": 63,
                    "column": 1
                },
                "end_point": {
                    "row": 66,
                    "column": 2
                }
            },
            {
                "definition": "public void assertTrue(final boolean condition) {\n    assertTrue(\"\", condition);\n}",
                "name": "assertTrue",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "boolean"
                    }
                ],
                "body": "{\n    assertTrue(\"\", condition);\n}",
                "start_point": {
                    "row": 68,
                    "column": 1
                },
                "end_point": {
                    "row": 70,
                    "column": 2
                }
            },
            {
                "definition": "public void assertTrue(final String message, final boolean condition) {\n    delegate.assertTrue(message, condition);\n}",
                "name": "assertTrue",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "boolean"
                    }
                ],
                "body": "{\n    delegate.assertTrue(message, condition);\n}",
                "start_point": {
                    "row": 72,
                    "column": 1
                },
                "end_point": {
                    "row": 74,
                    "column": 2
                }
            },
            {
                "definition": "public IPacket createPacket(final String nodeName) {\n    return delegate.createPacket(nodeName);\n}",
                "name": "createPacket",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n    return delegate.createPacket(nodeName);\n}",
                "start_point": {
                    "row": 76,
                    "column": 1
                },
                "end_point": {
                    "row": 78,
                    "column": 2
                }
            },
            {
                "definition": "public void log(final String message) {\n    delegate.log(message);\n}",
                "name": "log",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n    delegate.log(message);\n}",
                "start_point": {
                    "row": 80,
                    "column": 1
                },
                "end_point": {
                    "row": 82,
                    "column": 2
                }
            },
            {
                "definition": "public String safeString(final Object value) {\n    return value == null ? \"[null]\" : value.toString();\n}",
                "name": "safeString",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    return value == null ? \"[null]\" : value.toString();\n}",
                "start_point": {
                    "row": 84,
                    "column": 1
                },
                "end_point": {
                    "row": 86,
                    "column": 2
                }
            }
        ],
        "class_mode": "Unchanged"
    }
]