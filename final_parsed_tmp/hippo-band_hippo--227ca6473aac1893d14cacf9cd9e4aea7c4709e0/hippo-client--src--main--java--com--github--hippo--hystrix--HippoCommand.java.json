[
    {
        "rev_path": "hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java",
        "definition": "public class HippoCommand extends HystrixCommand<Object> {\n\n  private HippoRequest hippoRequest;\n\n  private int timeOut;\n\n  private int retryTimes;\n\n  private ServiceGovern serviceGovern;\n\n  private HippoFailPolicy<?> hippoFailPolicy;\n\n  public HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes,\n      boolean isCircuitBreaker, int semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy,\n      ServiceGovern serviceGovern) throws InstantiationException, IllegalAccessException {\n\n    // \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n    // \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n    // \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n    super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n        .andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n            .withExecutionIsolationStrategy(\n                HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n            .withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n            .withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n    this.hippoRequest = hippoRequest;\n    this.timeOut = timeOut;\n    this.retryTimes = retryTimes;\n    this.serviceGovern = serviceGovern;\n    init(downgradeStrategy);\n\n  }\n\n  private void init(Class<?> downgradeStrategy)\n      throws InstantiationException, IllegalAccessException {\n\n    if (HippoFailPolicy.class.isAssignableFrom(downgradeStrategy)) {\n      // \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n      try {\n        Object bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n        hippoFailPolicy = (HippoFailPolicy<?>) bean;\n      } catch (Exception e) {\n        hippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n      }\n    } else {\n      hippoFailPolicy = new HippoFailPolicyDefaultImpl();\n    }\n  }\n\n  @Override\n  protected Object run() throws Exception {\n\n    try {\n      return getHippoResponse(hippoRequest, timeOut, retryTimes);\n    } catch (Throwable e) {\n      // \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n      throw new HystrixBadRequestException(\"call service error\", e);\n    }\n\n  }\n\n  @Override\n  protected Object getFallback() {\n    return hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n  }\n\n  public Object getHippoResponse(HippoRequest request, int timeout, int retryTimes)\n      throws Throwable {\n\n    // \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n    int index = retryTimes;\n    if (retryTimes >= 5) {\n      index = 5;\n    }\n    HippoResponse result = getResult(request, timeout);\n    if (result.isError()) {\n      if (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n        return getHippoResponse(request, timeout, retryTimes - 1);\n      } else {\n        throw result.getThrowable();\n      }\n    }\n    return result.getResult();\n  }\n\n  private HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n    HippoClientBootstrap hippoClientBootstrap =\n        HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout, serviceGovern);\n    HippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n    return callback.getResult();\n  }\n\n}",
        "package": "package com.github.hippo.hystrix;",
        "tree_path": "HippoCommand",
        "name": "HippoCommand",
        "modifiers": "public",
        "superclass": "extends HystrixCommand<Object>",
        "super_interfaces": null,
        "body": "{\n\n  private HippoRequest hippoRequest;\n\n  private int timeOut;\n\n  private int retryTimes;\n\n  private ServiceGovern serviceGovern;\n\n  private HippoFailPolicy<?> hippoFailPolicy;\n\n  public HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes,\n      boolean isCircuitBreaker, int semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy,\n      ServiceGovern serviceGovern) throws InstantiationException, IllegalAccessException {\n\n    // \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n    // \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n    // \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n    super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n        .andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n            .withExecutionIsolationStrategy(\n                HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n            .withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n            .withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n    this.hippoRequest = hippoRequest;\n    this.timeOut = timeOut;\n    this.retryTimes = retryTimes;\n    this.serviceGovern = serviceGovern;\n    init(downgradeStrategy);\n\n  }\n\n  private void init(Class<?> downgradeStrategy)\n      throws InstantiationException, IllegalAccessException {\n\n    if (HippoFailPolicy.class.isAssignableFrom(downgradeStrategy)) {\n      // \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n      try {\n        Object bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n        hippoFailPolicy = (HippoFailPolicy<?>) bean;\n      } catch (Exception e) {\n        hippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n      }\n    } else {\n      hippoFailPolicy = new HippoFailPolicyDefaultImpl();\n    }\n  }\n\n  @Override\n  protected Object run() throws Exception {\n\n    try {\n      return getHippoResponse(hippoRequest, timeOut, retryTimes);\n    } catch (Throwable e) {\n      // \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n      throw new HystrixBadRequestException(\"call service error\", e);\n    }\n\n  }\n\n  @Override\n  protected Object getFallback() {\n    return hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n  }\n\n  public Object getHippoResponse(HippoRequest request, int timeout, int retryTimes)\n      throws Throwable {\n\n    // \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n    int index = retryTimes;\n    if (retryTimes >= 5) {\n      index = 5;\n    }\n    HippoResponse result = getResult(request, timeout);\n    if (result.isError()) {\n      if (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n        return getHippoResponse(request, timeout, retryTimes - 1);\n      } else {\n        throw result.getThrowable();\n      }\n    }\n    return result.getResult();\n  }\n\n  private HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n    HippoClientBootstrap hippoClientBootstrap =\n        HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout, serviceGovern);\n    HippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n    return callback.getResult();\n  }\n\n}",
        "start_point": {
            "row": 22,
            "column": 0
        },
        "end_point": {
            "row": 117,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes,\n    boolean isCircuitBreaker, int semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy,\n    ServiceGovern serviceGovern) throws InstantiationException, IllegalAccessException {\n\n  // \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n  // \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n  // \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n  super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n      .andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n      .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n          .withExecutionIsolationStrategy(\n              HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n          .withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n          .withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n  this.hippoRequest = hippoRequest;\n  this.timeOut = timeOut;\n  this.retryTimes = retryTimes;\n  this.serviceGovern = serviceGovern;\n  init(downgradeStrategy);\n\n}",
                "name": "HippoCommand",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "hippoRequest"
                    },
                    {
                        "type": "int",
                        "name": "timeOut"
                    },
                    {
                        "type": "int",
                        "name": "retryTimes"
                    },
                    {
                        "type": "boolean",
                        "name": "isCircuitBreaker"
                    },
                    {
                        "type": "int",
                        "name": "semaphoreMaxConcurrentRequests"
                    },
                    {
                        "type": "Class<?>",
                        "name": "downgradeStrategy"
                    },
                    {
                        "type": "ServiceGovern",
                        "name": "serviceGovern"
                    }
                ],
                "body": "{\n\n  // \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n  // \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n  // \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n  super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n      .andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n      .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n          .withExecutionIsolationStrategy(\n              HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n          .withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n          .withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n  this.hippoRequest = hippoRequest;\n  this.timeOut = timeOut;\n  this.retryTimes = retryTimes;\n  this.serviceGovern = serviceGovern;\n  init(downgradeStrategy);\n\n}",
                "constructor": true,
                "start_point": {
                    "row": 34,
                    "column": 2
                },
                "end_point": {
                    "row": 55,
                    "column": 3
                }
            },
            {
                "definition": "private void init(Class<?> downgradeStrategy)\n    throws InstantiationException, IllegalAccessException {\n\n  if (HippoFailPolicy.class.isAssignableFrom(downgradeStrategy)) {\n    // \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n    try {\n      Object bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n      hippoFailPolicy = (HippoFailPolicy<?>) bean;\n    } catch (Exception e) {\n      hippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n    }\n  } else {\n    hippoFailPolicy = new HippoFailPolicyDefaultImpl();\n  }\n}",
                "name": "init",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Class<?>",
                        "name": "downgradeStrategy"
                    }
                ],
                "body": "{\n\n  if (HippoFailPolicy.class.isAssignableFrom(downgradeStrategy)) {\n    // \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n    try {\n      Object bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n      hippoFailPolicy = (HippoFailPolicy<?>) bean;\n    } catch (Exception e) {\n      hippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n    }\n  } else {\n    hippoFailPolicy = new HippoFailPolicyDefaultImpl();\n  }\n}",
                "start_point": {
                    "row": 57,
                    "column": 2
                },
                "end_point": {
                    "row": 71,
                    "column": 3
                }
            },
            {
                "definition": "@Override\nprotected Object run() throws Exception {\n\n  try {\n    return getHippoResponse(hippoRequest, timeOut, retryTimes);\n  } catch (Throwable e) {\n    // \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n    throw new HystrixBadRequestException(\"call service error\", e);\n  }\n\n}",
                "name": "run",
                "modifiers": "@Override\n  protected",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n\n  try {\n    return getHippoResponse(hippoRequest, timeOut, retryTimes);\n  } catch (Throwable e) {\n    // \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n    throw new HystrixBadRequestException(\"call service error\", e);\n  }\n\n}",
                "start_point": {
                    "row": 73,
                    "column": 2
                },
                "end_point": {
                    "row": 83,
                    "column": 3
                }
            },
            {
                "definition": "@Override\nprotected Object getFallback() {\n  return hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n}",
                "name": "getFallback",
                "modifiers": "@Override\n  protected",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n  return hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n}",
                "start_point": {
                    "row": 85,
                    "column": 2
                },
                "end_point": {
                    "row": 88,
                    "column": 3
                }
            },
            {
                "definition": "public Object getHippoResponse(HippoRequest request, int timeout, int retryTimes)\n    throws Throwable {\n\n  // \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n  int index = retryTimes;\n  if (retryTimes >= 5) {\n    index = 5;\n  }\n  HippoResponse result = getResult(request, timeout);\n  if (result.isError()) {\n    if (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n      return getHippoResponse(request, timeout, retryTimes - 1);\n    } else {\n      throw result.getThrowable();\n    }\n  }\n  return result.getResult();\n}",
                "name": "getHippoResponse",
                "modifiers": "public",
                "return_type": "Object",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "timeout"
                    },
                    {
                        "type": "int",
                        "name": "retryTimes"
                    }
                ],
                "body": "{\n\n  // \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n  int index = retryTimes;\n  if (retryTimes >= 5) {\n    index = 5;\n  }\n  HippoResponse result = getResult(request, timeout);\n  if (result.isError()) {\n    if (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n      return getHippoResponse(request, timeout, retryTimes - 1);\n    } else {\n      throw result.getThrowable();\n    }\n  }\n  return result.getResult();\n}",
                "start_point": {
                    "row": 90,
                    "column": 2
                },
                "end_point": {
                    "row": 107,
                    "column": 3
                }
            },
            {
                "definition": "private HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n  HippoClientBootstrap hippoClientBootstrap =\n      HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout, serviceGovern);\n  HippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n  return callback.getResult();\n}",
                "name": "getResult",
                "modifiers": "private",
                "return_type": "HippoResponse",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "timeout"
                    }
                ],
                "body": "{\n\n  HippoClientBootstrap hippoClientBootstrap =\n      HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout, serviceGovern);\n  HippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n  return callback.getResult();\n}",
                "start_point": {
                    "row": 109,
                    "column": 2
                },
                "end_point": {
                    "row": 115,
                    "column": 3
                }
            }
        ],
        "class_mode": "Modified"
    }
]