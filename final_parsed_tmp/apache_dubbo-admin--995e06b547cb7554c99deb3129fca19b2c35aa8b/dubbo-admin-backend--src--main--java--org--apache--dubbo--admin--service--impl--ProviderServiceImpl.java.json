[
    {
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/service/impl/ProviderServiceImpl.java",
        "definition": "@Component\npublic class ProviderServiceImpl extends AbstractService implements ProviderService {\n\n    @Autowired\n    OverrideService overrideService;\n\n    public void create(Provider provider) {\n        URL url = provider.toUrl();\n        registryService.register(url);\n    }\n\n    public void enableProvider(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n\n        Provider oldProvider = findProvider(id);\n\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        if (oldProvider.isDynamic()) {\n            // Make sure we only have one override configured disable property.\n            if (!oldProvider.isEnabled()) {\n                Override override = new Override();\n                override.setAddress(oldProvider.getAddress());\n                override.setService(oldProvider.getService());\n                override.setEnabled(true);\n                override.setParams(Constants.DISABLED_KEY + \"=false\");\n                overrideService.saveOverride(override);\n                return;\n            }\n            List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n            for (Override o : oList) {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                if (params.containsKey(Constants.DISABLED_KEY)) {\n                    if (params.get(Constants.DISABLED_KEY).equals(\"true\")) {\n                        overrideService.deleteOverride(o.getHash());\n                    }\n                }\n            }\n        } else {\n            oldProvider.setEnabled(true);\n            updateProvider(oldProvider);\n        }\n    }\n\n    public void disableProvider(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n\n        Provider oldProvider = findProvider(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n\n        if (oldProvider.isDynamic()) {\n            // Make sure we only have one override configured disable property.\n            if (oldProvider.isEnabled()) {\n                Override override = new Override();\n                override.setAddress(oldProvider.getAddress());\n                override.setService(oldProvider.getService());\n                override.setEnabled(true);\n                override.setParams(Constants.DISABLED_KEY + \"=true\");\n                overrideService.saveOverride(override);\n                return;\n            }\n            List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n            for (Override o : oList) {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                if (params.containsKey(Constants.DISABLED_KEY)) {\n                    if (params.get(Constants.DISABLED_KEY).equals(\"false\")) {\n                        overrideService.deleteOverride(o.getHash());\n                    }\n                }\n            }\n        } else {\n            oldProvider.setEnabled(false);\n            updateProvider(oldProvider);\n        }\n\n    }\n\n    public void doublingProvider(String id) {\n        setWeight(id, 2F);\n    }\n\n    public void halvingProvider(String id) {\n        setWeight(id, 0.5F);\n    }\n\n    public void setWeight(String id, float factor) {\n        if (id == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n        Provider oldProvider = findProvider(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        Map<String, String> map = StringUtils.parseQueryString(oldProvider.getParameters());\n        String weight = map.get(Constants.WEIGHT_KEY);\n        if (oldProvider.isDynamic()) {\n            // Make sure we only have one override configured disable property.\n            List<Override> overrides = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n            if (overrides == null || overrides.size() == 0) {\n                int value = getWeight(weight, factor);\n                if (value != Constants.DEFAULT_WEIGHT) {\n                    Override override = new Override();\n                    override.setAddress(oldProvider.getAddress());\n                    override.setService(oldProvider.getService());\n                    override.setEnabled(true);\n                    override.setParams(Constants.WEIGHT_KEY + \"=\" + String.valueOf(value));\n                    overrideService.saveOverride(override);\n                }\n            } else {\n                for (Override override : overrides) {\n                    Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                    String overrideWeight = params.get(Constants.WEIGHT_KEY);\n                    if (overrideWeight == null || overrideWeight.length() == 0) {\n                        overrideWeight = weight;\n                    }\n                    int value = getWeight(overrideWeight, factor);\n                    if (value == getWeight(weight, 1)) {\n                        params.remove(Constants.WEIGHT_KEY);\n                    } else {\n                        params.put(Constants.WEIGHT_KEY, String.valueOf(value));\n                    }\n                    if (params.size() > 0) {\n                        override.setParams(StringUtils.toQueryString(params));\n                        overrideService.updateOverride(override);\n                    } else {\n                        overrideService.deleteOverride(override.getHash());\n                    }\n                }\n            }\n        } else {\n            int value = getWeight(weight, factor);\n            if (value == Constants.DEFAULT_WEIGHT) {\n                map.remove(Constants.WEIGHT_KEY);\n            } else {\n                map.put(Constants.WEIGHT_KEY, String.valueOf(value));\n            }\n            oldProvider.setParameters(StringUtils.toQueryString(map));\n            updateProvider(oldProvider);\n        }\n    }\n\n    private int getWeight(String value, float factor) {\n        int weight = 100;\n        if (value != null && value.length() > 0) {\n            weight = Integer.parseInt(value);\n        }\n        weight = (int) (weight * factor);\n        if (weight < 1) weight = 1;\n        if (weight == 2) weight = 3;\n        if (weight == 24) weight = 25;\n        return weight;\n    }\n\n    public void deleteStaticProvider(String id) {\n        URL oldProvider = findProviderUrl(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        registryService.unregister(oldProvider);\n    }\n\n    public void updateProvider(Provider provider) {\n        String hash = provider.getHash();\n        if (hash == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n\n        URL oldProvider = findProviderUrl(hash);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        URL newProvider = provider.toUrl();\n\n        registryService.unregister(oldProvider);\n        registryService.register(newProvider);\n    }\n\n    public Provider findProvider(String id) {\n        return SyncUtils.url2Provider(findProviderUrlPair(id));\n    }\n\n    public Pair<String, URL> findProviderUrlPair(String id) {\n        return SyncUtils.filterFromCategory(getRegistryCache(), Constants.PROVIDERS_CATEGORY, id);\n    }\n\n    public List<String> findServices() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls != null) ret.addAll(providerUrls.keySet());\n        return ret;\n    }\n\n    public List<String> findAddresses() {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (null == providerUrls) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getAddress();\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    String addr = u.getAddress();\n                    if (addr != null) ret.add(addr);\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByService(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (null == providerUrls) return ret;\n\n        for (Map.Entry<String, URL> e2 : providerUrls.get(service).entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<String> findApplicationsByServiceName(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (null == providerUrls) return ret;\n\n        Map<String, URL> value = providerUrls.get(service);\n        if (value == null) {\n            return ret;\n        }\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<Provider> findByService(String serviceName) {\n        return SyncUtils.url2ProviderList(findProviderUrlByService(serviceName));\n    }\n\n    public List<Provider> findByAppandService(String app, String serviceName) {\n        return SyncUtils.url2ProviderList(findProviderUrlByAppandService(app, serviceName));\n    }\n\n    private Map<String, URL> findProviderUrlByService(String service) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<Provider> findAll() {\n        return SyncUtils.url2ProviderList(findAllProviderUrl());\n    }\n\n    private Map<String, URL> findAllProviderUrl() {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<Provider> findByAddress(String providerAddress) {\n        return SyncUtils.url2ProviderList(findProviderUrlByAddress(providerAddress));\n    }\n\n    public Map<String, URL> findProviderUrlByAddress(String address) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findServicesByAddress(String address) {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null || address == null || address.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (address.equals(u.getAddress())) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findApplications() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getParameter(Constants.APPLICATION_KEY);\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<Provider> findByApplication(String application) {\n        return SyncUtils.url2ProviderList(findProviderUrlByApplication(application));\n    }\n\n    private Map<String, URL> findProviderUrlByAppandService(String app, String service) {\n        Map<String, String> filter = new HashMap<>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, app);\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n\n    private Map<String, URL> findProviderUrlByApplication(String application) {\n        Map<String, String> filter = new HashMap<>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, application);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findServicesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null || application == null || application.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findMethodsByService(String service) {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null || service == null || service.length() == 0) return ret;\n\n        Map<String, URL> providers = providerUrls.get(service);\n        if (null == providers || providers.isEmpty()) return ret;\n\n        Entry<String, URL> p = providers.entrySet().iterator().next();\n        String value = p.getValue().getParameter(\"methods\");\n        if (value == null || value.length() == 0) {\n            return ret;\n        }\n        String[] methods = value.split(ParseUtils.METHOD_SPLIT);\n        if (methods == null || methods.length == 0) {\n            return ret;\n        }\n\n        for (String m : methods) {\n            ret.add(m);\n        }\n        return ret;\n    }\n\n    private URL findProviderUrl(String id) {\n        return findProvider(id).toUrl();\n    }\n\n    public Provider findByServiceAndAddress(String service, String address) {\n        return SyncUtils.url2Provider(findProviderUrl(service, address));\n    }\n\n    private Pair<String, URL> findProviderUrl(String service, String address) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n        Map<String, URL> ret = SyncUtils.filterFromCategory(getRegistryCache(), filter);\n        if (ret.isEmpty()) {\n            return null;\n        } else {\n            String key = ret.entrySet().iterator().next().getKey();\n            return new Pair<String, URL>(key, ret.get(key));\n        }\n    }\n\n}",
        "package": "package org.apache.dubbo.admin.service.impl;",
        "tree_path": "ProviderServiceImpl",
        "name": "ProviderServiceImpl",
        "modifiers": "@Component\npublic",
        "superclass": "extends AbstractService",
        "super_interfaces": "implements ProviderService",
        "body": "{\n\n    @Autowired\n    OverrideService overrideService;\n\n    public void create(Provider provider) {\n        URL url = provider.toUrl();\n        registryService.register(url);\n    }\n\n    public void enableProvider(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n\n        Provider oldProvider = findProvider(id);\n\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        if (oldProvider.isDynamic()) {\n            // Make sure we only have one override configured disable property.\n            if (!oldProvider.isEnabled()) {\n                Override override = new Override();\n                override.setAddress(oldProvider.getAddress());\n                override.setService(oldProvider.getService());\n                override.setEnabled(true);\n                override.setParams(Constants.DISABLED_KEY + \"=false\");\n                overrideService.saveOverride(override);\n                return;\n            }\n            List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n            for (Override o : oList) {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                if (params.containsKey(Constants.DISABLED_KEY)) {\n                    if (params.get(Constants.DISABLED_KEY).equals(\"true\")) {\n                        overrideService.deleteOverride(o.getHash());\n                    }\n                }\n            }\n        } else {\n            oldProvider.setEnabled(true);\n            updateProvider(oldProvider);\n        }\n    }\n\n    public void disableProvider(String id) {\n        if (id == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n\n        Provider oldProvider = findProvider(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n\n        if (oldProvider.isDynamic()) {\n            // Make sure we only have one override configured disable property.\n            if (oldProvider.isEnabled()) {\n                Override override = new Override();\n                override.setAddress(oldProvider.getAddress());\n                override.setService(oldProvider.getService());\n                override.setEnabled(true);\n                override.setParams(Constants.DISABLED_KEY + \"=true\");\n                overrideService.saveOverride(override);\n                return;\n            }\n            List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n            for (Override o : oList) {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                if (params.containsKey(Constants.DISABLED_KEY)) {\n                    if (params.get(Constants.DISABLED_KEY).equals(\"false\")) {\n                        overrideService.deleteOverride(o.getHash());\n                    }\n                }\n            }\n        } else {\n            oldProvider.setEnabled(false);\n            updateProvider(oldProvider);\n        }\n\n    }\n\n    public void doublingProvider(String id) {\n        setWeight(id, 2F);\n    }\n\n    public void halvingProvider(String id) {\n        setWeight(id, 0.5F);\n    }\n\n    public void setWeight(String id, float factor) {\n        if (id == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n        Provider oldProvider = findProvider(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        Map<String, String> map = StringUtils.parseQueryString(oldProvider.getParameters());\n        String weight = map.get(Constants.WEIGHT_KEY);\n        if (oldProvider.isDynamic()) {\n            // Make sure we only have one override configured disable property.\n            List<Override> overrides = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n            if (overrides == null || overrides.size() == 0) {\n                int value = getWeight(weight, factor);\n                if (value != Constants.DEFAULT_WEIGHT) {\n                    Override override = new Override();\n                    override.setAddress(oldProvider.getAddress());\n                    override.setService(oldProvider.getService());\n                    override.setEnabled(true);\n                    override.setParams(Constants.WEIGHT_KEY + \"=\" + String.valueOf(value));\n                    overrideService.saveOverride(override);\n                }\n            } else {\n                for (Override override : overrides) {\n                    Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                    String overrideWeight = params.get(Constants.WEIGHT_KEY);\n                    if (overrideWeight == null || overrideWeight.length() == 0) {\n                        overrideWeight = weight;\n                    }\n                    int value = getWeight(overrideWeight, factor);\n                    if (value == getWeight(weight, 1)) {\n                        params.remove(Constants.WEIGHT_KEY);\n                    } else {\n                        params.put(Constants.WEIGHT_KEY, String.valueOf(value));\n                    }\n                    if (params.size() > 0) {\n                        override.setParams(StringUtils.toQueryString(params));\n                        overrideService.updateOverride(override);\n                    } else {\n                        overrideService.deleteOverride(override.getHash());\n                    }\n                }\n            }\n        } else {\n            int value = getWeight(weight, factor);\n            if (value == Constants.DEFAULT_WEIGHT) {\n                map.remove(Constants.WEIGHT_KEY);\n            } else {\n                map.put(Constants.WEIGHT_KEY, String.valueOf(value));\n            }\n            oldProvider.setParameters(StringUtils.toQueryString(map));\n            updateProvider(oldProvider);\n        }\n    }\n\n    private int getWeight(String value, float factor) {\n        int weight = 100;\n        if (value != null && value.length() > 0) {\n            weight = Integer.parseInt(value);\n        }\n        weight = (int) (weight * factor);\n        if (weight < 1) weight = 1;\n        if (weight == 2) weight = 3;\n        if (weight == 24) weight = 25;\n        return weight;\n    }\n\n    public void deleteStaticProvider(String id) {\n        URL oldProvider = findProviderUrl(id);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        registryService.unregister(oldProvider);\n    }\n\n    public void updateProvider(Provider provider) {\n        String hash = provider.getHash();\n        if (hash == null) {\n            throw new IllegalStateException(\"no provider id\");\n        }\n\n        URL oldProvider = findProviderUrl(hash);\n        if (oldProvider == null) {\n            throw new IllegalStateException(\"Provider was changed!\");\n        }\n        URL newProvider = provider.toUrl();\n\n        registryService.unregister(oldProvider);\n        registryService.register(newProvider);\n    }\n\n    public Provider findProvider(String id) {\n        return SyncUtils.url2Provider(findProviderUrlPair(id));\n    }\n\n    public Pair<String, URL> findProviderUrlPair(String id) {\n        return SyncUtils.filterFromCategory(getRegistryCache(), Constants.PROVIDERS_CATEGORY, id);\n    }\n\n    public List<String> findServices() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls != null) ret.addAll(providerUrls.keySet());\n        return ret;\n    }\n\n    public List<String> findAddresses() {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (null == providerUrls) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getAddress();\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    String addr = u.getAddress();\n                    if (addr != null) ret.add(addr);\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findAddressesByService(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (null == providerUrls) return ret;\n\n        for (Map.Entry<String, URL> e2 : providerUrls.get(service).entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<String> findApplicationsByServiceName(String service) {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (null == providerUrls) return ret;\n\n        Map<String, URL> value = providerUrls.get(service);\n        if (value == null) {\n            return ret;\n        }\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n\n        return ret;\n    }\n\n    public List<Provider> findByService(String serviceName) {\n        return SyncUtils.url2ProviderList(findProviderUrlByService(serviceName));\n    }\n\n    public List<Provider> findByAppandService(String app, String serviceName) {\n        return SyncUtils.url2ProviderList(findProviderUrlByAppandService(app, serviceName));\n    }\n\n    private Map<String, URL> findProviderUrlByService(String service) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<Provider> findAll() {\n        return SyncUtils.url2ProviderList(findAllProviderUrl());\n    }\n\n    private Map<String, URL> findAllProviderUrl() {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<Provider> findByAddress(String providerAddress) {\n        return SyncUtils.url2ProviderList(findProviderUrlByAddress(providerAddress));\n    }\n\n    public Map<String, URL> findProviderUrlByAddress(String address) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findServicesByAddress(String address) {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null || address == null || address.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (address.equals(u.getAddress())) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findApplications() {\n        List<String> ret = new ArrayList<String>();\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                String app = u.getParameter(Constants.APPLICATION_KEY);\n                if (app != null) ret.add(app);\n            }\n        }\n\n        return ret;\n    }\n\n    public List<Provider> findByApplication(String application) {\n        return SyncUtils.url2ProviderList(findProviderUrlByApplication(application));\n    }\n\n    private Map<String, URL> findProviderUrlByAppandService(String app, String service) {\n        Map<String, String> filter = new HashMap<>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, app);\n        filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n\n    private Map<String, URL> findProviderUrlByApplication(String application) {\n        Map<String, String> filter = new HashMap<>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(Constants.APPLICATION_KEY, application);\n        return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    }\n\n    public List<String> findServicesByApplication(String application) {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null || application == null || application.length() == 0) return ret;\n\n        for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n            Map<String, URL> value = e1.getValue();\n            for (Map.Entry<String, URL> e2 : value.entrySet()) {\n                URL u = e2.getValue();\n                if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                    ret.add(e1.getKey());\n                    break;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    public List<String> findMethodsByService(String service) {\n        List<String> ret = new ArrayList<String>();\n\n        ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n        if (providerUrls == null || service == null || service.length() == 0) return ret;\n\n        Map<String, URL> providers = providerUrls.get(service);\n        if (null == providers || providers.isEmpty()) return ret;\n\n        Entry<String, URL> p = providers.entrySet().iterator().next();\n        String value = p.getValue().getParameter(\"methods\");\n        if (value == null || value.length() == 0) {\n            return ret;\n        }\n        String[] methods = value.split(ParseUtils.METHOD_SPLIT);\n        if (methods == null || methods.length == 0) {\n            return ret;\n        }\n\n        for (String m : methods) {\n            ret.add(m);\n        }\n        return ret;\n    }\n\n    private URL findProviderUrl(String id) {\n        return findProvider(id).toUrl();\n    }\n\n    public Provider findByServiceAndAddress(String service, String address) {\n        return SyncUtils.url2Provider(findProviderUrl(service, address));\n    }\n\n    private Pair<String, URL> findProviderUrl(String service, String address) {\n        Map<String, String> filter = new HashMap<String, String>();\n        filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n        Map<String, URL> ret = SyncUtils.filterFromCategory(getRegistryCache(), filter);\n        if (ret.isEmpty()) {\n            return null;\n        } else {\n            String key = ret.entrySet().iterator().next().getKey();\n            return new Pair<String, URL>(key, ret.get(key));\n        }\n    }\n\n}",
        "start_point": {
            "row": 42,
            "column": 0
        },
        "end_point": {
            "row": 472,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public void create(Provider provider) {\n    URL url = provider.toUrl();\n    registryService.register(url);\n}",
                "name": "create",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Provider",
                        "name": "provider"
                    }
                ],
                "body": "{\n    URL url = provider.toUrl();\n    registryService.register(url);\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 51,
                    "column": 5
                }
            },
            {
                "definition": "public void enableProvider(String id) {\n    if (id == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n\n    Provider oldProvider = findProvider(id);\n\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    if (oldProvider.isDynamic()) {\n        // Make sure we only have one override configured disable property.\n        if (!oldProvider.isEnabled()) {\n            Override override = new Override();\n            override.setAddress(oldProvider.getAddress());\n            override.setService(oldProvider.getService());\n            override.setEnabled(true);\n            override.setParams(Constants.DISABLED_KEY + \"=false\");\n            overrideService.saveOverride(override);\n            return;\n        }\n        List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n        for (Override o : oList) {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            if (params.containsKey(Constants.DISABLED_KEY)) {\n                if (params.get(Constants.DISABLED_KEY).equals(\"true\")) {\n                    overrideService.deleteOverride(o.getHash());\n                }\n            }\n        }\n    } else {\n        oldProvider.setEnabled(true);\n        updateProvider(oldProvider);\n    }\n}",
                "name": "enableProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    if (id == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n\n    Provider oldProvider = findProvider(id);\n\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    if (oldProvider.isDynamic()) {\n        // Make sure we only have one override configured disable property.\n        if (!oldProvider.isEnabled()) {\n            Override override = new Override();\n            override.setAddress(oldProvider.getAddress());\n            override.setService(oldProvider.getService());\n            override.setEnabled(true);\n            override.setParams(Constants.DISABLED_KEY + \"=false\");\n            overrideService.saveOverride(override);\n            return;\n        }\n        List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n        for (Override o : oList) {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            if (params.containsKey(Constants.DISABLED_KEY)) {\n                if (params.get(Constants.DISABLED_KEY).equals(\"true\")) {\n                    overrideService.deleteOverride(o.getHash());\n                }\n            }\n        }\n    } else {\n        oldProvider.setEnabled(true);\n        updateProvider(oldProvider);\n    }\n}",
                "start_point": {
                    "row": 53,
                    "column": 4
                },
                "end_point": {
                    "row": 88,
                    "column": 5
                }
            },
            {
                "definition": "public void disableProvider(String id) {\n    if (id == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n\n    Provider oldProvider = findProvider(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n\n    if (oldProvider.isDynamic()) {\n        // Make sure we only have one override configured disable property.\n        if (oldProvider.isEnabled()) {\n            Override override = new Override();\n            override.setAddress(oldProvider.getAddress());\n            override.setService(oldProvider.getService());\n            override.setEnabled(true);\n            override.setParams(Constants.DISABLED_KEY + \"=true\");\n            overrideService.saveOverride(override);\n            return;\n        }\n        List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n        for (Override o : oList) {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            if (params.containsKey(Constants.DISABLED_KEY)) {\n                if (params.get(Constants.DISABLED_KEY).equals(\"false\")) {\n                    overrideService.deleteOverride(o.getHash());\n                }\n            }\n        }\n    } else {\n        oldProvider.setEnabled(false);\n        updateProvider(oldProvider);\n    }\n\n}",
                "name": "disableProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    if (id == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n\n    Provider oldProvider = findProvider(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n\n    if (oldProvider.isDynamic()) {\n        // Make sure we only have one override configured disable property.\n        if (oldProvider.isEnabled()) {\n            Override override = new Override();\n            override.setAddress(oldProvider.getAddress());\n            override.setService(oldProvider.getService());\n            override.setEnabled(true);\n            override.setParams(Constants.DISABLED_KEY + \"=true\");\n            overrideService.saveOverride(override);\n            return;\n        }\n        List<Override> oList = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n\n        for (Override o : oList) {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            if (params.containsKey(Constants.DISABLED_KEY)) {\n                if (params.get(Constants.DISABLED_KEY).equals(\"false\")) {\n                    overrideService.deleteOverride(o.getHash());\n                }\n            }\n        }\n    } else {\n        oldProvider.setEnabled(false);\n        updateProvider(oldProvider);\n    }\n\n}",
                "start_point": {
                    "row": 90,
                    "column": 4
                },
                "end_point": {
                    "row": 126,
                    "column": 5
                }
            },
            {
                "definition": "public void doublingProvider(String id) {\n    setWeight(id, 2F);\n}",
                "name": "doublingProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    setWeight(id, 2F);\n}",
                "start_point": {
                    "row": 128,
                    "column": 4
                },
                "end_point": {
                    "row": 130,
                    "column": 5
                }
            },
            {
                "definition": "public void halvingProvider(String id) {\n    setWeight(id, 0.5F);\n}",
                "name": "halvingProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    setWeight(id, 0.5F);\n}",
                "start_point": {
                    "row": 132,
                    "column": 4
                },
                "end_point": {
                    "row": 134,
                    "column": 5
                }
            },
            {
                "definition": "public void setWeight(String id, float factor) {\n    if (id == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n    Provider oldProvider = findProvider(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    Map<String, String> map = StringUtils.parseQueryString(oldProvider.getParameters());\n    String weight = map.get(Constants.WEIGHT_KEY);\n    if (oldProvider.isDynamic()) {\n        // Make sure we only have one override configured disable property.\n        List<Override> overrides = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n        if (overrides == null || overrides.size() == 0) {\n            int value = getWeight(weight, factor);\n            if (value != Constants.DEFAULT_WEIGHT) {\n                Override override = new Override();\n                override.setAddress(oldProvider.getAddress());\n                override.setService(oldProvider.getService());\n                override.setEnabled(true);\n                override.setParams(Constants.WEIGHT_KEY + \"=\" + String.valueOf(value));\n                overrideService.saveOverride(override);\n            }\n        } else {\n            for (Override override : overrides) {\n                Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                String overrideWeight = params.get(Constants.WEIGHT_KEY);\n                if (overrideWeight == null || overrideWeight.length() == 0) {\n                    overrideWeight = weight;\n                }\n                int value = getWeight(overrideWeight, factor);\n                if (value == getWeight(weight, 1)) {\n                    params.remove(Constants.WEIGHT_KEY);\n                } else {\n                    params.put(Constants.WEIGHT_KEY, String.valueOf(value));\n                }\n                if (params.size() > 0) {\n                    override.setParams(StringUtils.toQueryString(params));\n                    overrideService.updateOverride(override);\n                } else {\n                    overrideService.deleteOverride(override.getHash());\n                }\n            }\n        }\n    } else {\n        int value = getWeight(weight, factor);\n        if (value == Constants.DEFAULT_WEIGHT) {\n            map.remove(Constants.WEIGHT_KEY);\n        } else {\n            map.put(Constants.WEIGHT_KEY, String.valueOf(value));\n        }\n        oldProvider.setParameters(StringUtils.toQueryString(map));\n        updateProvider(oldProvider);\n    }\n}",
                "name": "setWeight",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    },
                    {
                        "type": "float",
                        "name": "factor"
                    }
                ],
                "body": "{\n    if (id == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n    Provider oldProvider = findProvider(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    Map<String, String> map = StringUtils.parseQueryString(oldProvider.getParameters());\n    String weight = map.get(Constants.WEIGHT_KEY);\n    if (oldProvider.isDynamic()) {\n        // Make sure we only have one override configured disable property.\n        List<Override> overrides = overrideService.findByServiceAndAddress(oldProvider.getService(), oldProvider.getAddress());\n        if (overrides == null || overrides.size() == 0) {\n            int value = getWeight(weight, factor);\n            if (value != Constants.DEFAULT_WEIGHT) {\n                Override override = new Override();\n                override.setAddress(oldProvider.getAddress());\n                override.setService(oldProvider.getService());\n                override.setEnabled(true);\n                override.setParams(Constants.WEIGHT_KEY + \"=\" + String.valueOf(value));\n                overrideService.saveOverride(override);\n            }\n        } else {\n            for (Override override : overrides) {\n                Map<String, String> params = StringUtils.parseQueryString(override.getParams());\n                String overrideWeight = params.get(Constants.WEIGHT_KEY);\n                if (overrideWeight == null || overrideWeight.length() == 0) {\n                    overrideWeight = weight;\n                }\n                int value = getWeight(overrideWeight, factor);\n                if (value == getWeight(weight, 1)) {\n                    params.remove(Constants.WEIGHT_KEY);\n                } else {\n                    params.put(Constants.WEIGHT_KEY, String.valueOf(value));\n                }\n                if (params.size() > 0) {\n                    override.setParams(StringUtils.toQueryString(params));\n                    overrideService.updateOverride(override);\n                } else {\n                    overrideService.deleteOverride(override.getHash());\n                }\n            }\n        }\n    } else {\n        int value = getWeight(weight, factor);\n        if (value == Constants.DEFAULT_WEIGHT) {\n            map.remove(Constants.WEIGHT_KEY);\n        } else {\n            map.put(Constants.WEIGHT_KEY, String.valueOf(value));\n        }\n        oldProvider.setParameters(StringUtils.toQueryString(map));\n        updateProvider(oldProvider);\n    }\n}",
                "start_point": {
                    "row": 136,
                    "column": 4
                },
                "end_point": {
                    "row": 190,
                    "column": 5
                }
            },
            {
                "definition": "private int getWeight(String value, float factor) {\n    int weight = 100;\n    if (value != null && value.length() > 0) {\n        weight = Integer.parseInt(value);\n    }\n    weight = (int) (weight * factor);\n    if (weight < 1) weight = 1;\n    if (weight == 2) weight = 3;\n    if (weight == 24) weight = 25;\n    return weight;\n}",
                "name": "getWeight",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "value"
                    },
                    {
                        "type": "float",
                        "name": "factor"
                    }
                ],
                "body": "{\n    int weight = 100;\n    if (value != null && value.length() > 0) {\n        weight = Integer.parseInt(value);\n    }\n    weight = (int) (weight * factor);\n    if (weight < 1) weight = 1;\n    if (weight == 2) weight = 3;\n    if (weight == 24) weight = 25;\n    return weight;\n}",
                "start_point": {
                    "row": 192,
                    "column": 4
                },
                "end_point": {
                    "row": 202,
                    "column": 5
                }
            },
            {
                "definition": "public void deleteStaticProvider(String id) {\n    URL oldProvider = findProviderUrl(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    registryService.unregister(oldProvider);\n}",
                "name": "deleteStaticProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    URL oldProvider = findProviderUrl(id);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    registryService.unregister(oldProvider);\n}",
                "start_point": {
                    "row": 204,
                    "column": 4
                },
                "end_point": {
                    "row": 210,
                    "column": 5
                }
            },
            {
                "definition": "public void updateProvider(Provider provider) {\n    String hash = provider.getHash();\n    if (hash == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n\n    URL oldProvider = findProviderUrl(hash);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    URL newProvider = provider.toUrl();\n\n    registryService.unregister(oldProvider);\n    registryService.register(newProvider);\n}",
                "name": "updateProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Provider",
                        "name": "provider"
                    }
                ],
                "body": "{\n    String hash = provider.getHash();\n    if (hash == null) {\n        throw new IllegalStateException(\"no provider id\");\n    }\n\n    URL oldProvider = findProviderUrl(hash);\n    if (oldProvider == null) {\n        throw new IllegalStateException(\"Provider was changed!\");\n    }\n    URL newProvider = provider.toUrl();\n\n    registryService.unregister(oldProvider);\n    registryService.register(newProvider);\n}",
                "start_point": {
                    "row": 212,
                    "column": 4
                },
                "end_point": {
                    "row": 226,
                    "column": 5
                }
            },
            {
                "definition": "public Provider findProvider(String id) {\n    return SyncUtils.url2Provider(findProviderUrlPair(id));\n}",
                "name": "findProvider",
                "modifiers": "public",
                "return_type": "Provider",
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return SyncUtils.url2Provider(findProviderUrlPair(id));\n}",
                "start_point": {
                    "row": 228,
                    "column": 4
                },
                "end_point": {
                    "row": 230,
                    "column": 5
                }
            },
            {
                "definition": "public Pair<String, URL> findProviderUrlPair(String id) {\n    return SyncUtils.filterFromCategory(getRegistryCache(), Constants.PROVIDERS_CATEGORY, id);\n}",
                "name": "findProviderUrlPair",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return SyncUtils.filterFromCategory(getRegistryCache(), Constants.PROVIDERS_CATEGORY, id);\n}",
                "start_point": {
                    "row": 232,
                    "column": 4
                },
                "end_point": {
                    "row": 234,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findServices() {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls != null) ret.addAll(providerUrls.keySet());\n    return ret;\n}",
                "name": "findServices",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls != null) ret.addAll(providerUrls.keySet());\n    return ret;\n}",
                "start_point": {
                    "row": 236,
                    "column": 4
                },
                "end_point": {
                    "row": 241,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findAddresses() {\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (null == providerUrls) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "name": "findAddresses",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (null == providerUrls) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getAddress();\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 243,
                    "column": 4
                },
                "end_point": {
                    "row": 259,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findAddressesByApplication(String application) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                String addr = u.getAddress();\n                if (addr != null) ret.add(addr);\n            }\n        }\n    }\n\n    return ret;\n}",
                "name": "findAddressesByApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                String addr = u.getAddress();\n                if (addr != null) ret.add(addr);\n            }\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 261,
                    "column": 4
                },
                "end_point": {
                    "row": 276,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findAddressesByService(String service) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (null == providerUrls) return ret;\n\n    for (Map.Entry<String, URL> e2 : providerUrls.get(service).entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getAddress();\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "name": "findAddressesByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (null == providerUrls) return ret;\n\n    for (Map.Entry<String, URL> e2 : providerUrls.get(service).entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getAddress();\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 278,
                    "column": 4
                },
                "end_point": {
                    "row": 290,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findApplicationsByServiceName(String service) {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (null == providerUrls) return ret;\n\n    Map<String, URL> value = providerUrls.get(service);\n    if (value == null) {\n        return ret;\n    }\n    for (Map.Entry<String, URL> e2 : value.entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getParameter(Constants.APPLICATION_KEY);\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "name": "findApplicationsByServiceName",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (null == providerUrls) return ret;\n\n    Map<String, URL> value = providerUrls.get(service);\n    if (value == null) {\n        return ret;\n    }\n    for (Map.Entry<String, URL> e2 : value.entrySet()) {\n        URL u = e2.getValue();\n        String app = u.getParameter(Constants.APPLICATION_KEY);\n        if (app != null) ret.add(app);\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 292,
                    "column": 4
                },
                "end_point": {
                    "row": 308,
                    "column": 5
                }
            },
            {
                "definition": "public List<Provider> findByService(String serviceName) {\n    return SyncUtils.url2ProviderList(findProviderUrlByService(serviceName));\n}",
                "name": "findByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "serviceName"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ProviderList(findProviderUrlByService(serviceName));\n}",
                "start_point": {
                    "row": 310,
                    "column": 4
                },
                "end_point": {
                    "row": 312,
                    "column": 5
                }
            },
            {
                "definition": "public List<Provider> findByAppandService(String app, String serviceName) {\n    return SyncUtils.url2ProviderList(findProviderUrlByAppandService(app, serviceName));\n}",
                "name": "findByAppandService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "app"
                    },
                    {
                        "type": "String",
                        "name": "serviceName"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ProviderList(findProviderUrlByAppandService(app, serviceName));\n}",
                "start_point": {
                    "row": 314,
                    "column": 4
                },
                "end_point": {
                    "row": 316,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findProviderUrlByService(String service) {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findProviderUrlByService",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 318,
                    "column": 4
                },
                "end_point": {
                    "row": 324,
                    "column": 5
                }
            },
            {
                "definition": "public List<Provider> findAll() {\n    return SyncUtils.url2ProviderList(findAllProviderUrl());\n}",
                "name": "findAll",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    return SyncUtils.url2ProviderList(findAllProviderUrl());\n}",
                "start_point": {
                    "row": 326,
                    "column": 4
                },
                "end_point": {
                    "row": 328,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findAllProviderUrl() {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findAllProviderUrl",
                "modifiers": "private",
                "return_type": null,
                "parameters": [],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 330,
                    "column": 4
                },
                "end_point": {
                    "row": 334,
                    "column": 5
                }
            },
            {
                "definition": "public List<Provider> findByAddress(String providerAddress) {\n    return SyncUtils.url2ProviderList(findProviderUrlByAddress(providerAddress));\n}",
                "name": "findByAddress",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "providerAddress"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ProviderList(findProviderUrlByAddress(providerAddress));\n}",
                "start_point": {
                    "row": 336,
                    "column": 4
                },
                "end_point": {
                    "row": 338,
                    "column": 5
                }
            },
            {
                "definition": "public Map<String, URL> findProviderUrlByAddress(String address) {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findProviderUrlByAddress",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 340,
                    "column": 4
                },
                "end_point": {
                    "row": 346,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findServicesByAddress(String address) {\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null || address == null || address.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (address.equals(u.getAddress())) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "name": "findServicesByAddress",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null || address == null || address.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (address.equals(u.getAddress())) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 348,
                    "column": 4
                },
                "end_point": {
                    "row": 366,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findApplications() {\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "name": "findApplications",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            String app = u.getParameter(Constants.APPLICATION_KEY);\n            if (app != null) ret.add(app);\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 368,
                    "column": 4
                },
                "end_point": {
                    "row": 383,
                    "column": 5
                }
            },
            {
                "definition": "public List<Provider> findByApplication(String application) {\n    return SyncUtils.url2ProviderList(findProviderUrlByApplication(application));\n}",
                "name": "findByApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    return SyncUtils.url2ProviderList(findProviderUrlByApplication(application));\n}",
                "start_point": {
                    "row": 385,
                    "column": 4
                },
                "end_point": {
                    "row": 387,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findProviderUrlByAppandService(String app, String service) {\n    Map<String, String> filter = new HashMap<>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, app);\n    filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findProviderUrlByAppandService",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "app"
                    },
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, app);\n    filter.put(SyncUtils.SERVICE_FILTER_KEY, service);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 389,
                    "column": 4
                },
                "end_point": {
                    "row": 395,
                    "column": 5
                }
            },
            {
                "definition": "private Map<String, URL> findProviderUrlByApplication(String application) {\n    Map<String, String> filter = new HashMap<>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, application);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "name": "findProviderUrlByApplication",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(Constants.APPLICATION_KEY, application);\n    return SyncUtils.filterFromCategory(getRegistryCache(), filter);\n}",
                "start_point": {
                    "row": 398,
                    "column": 4
                },
                "end_point": {
                    "row": 403,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findServicesByApplication(String application) {\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null || application == null || application.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "name": "findServicesByApplication",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "application"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null || application == null || application.length() == 0) return ret;\n\n    for (Map.Entry<String, Map<String, URL>> e1 : providerUrls.entrySet()) {\n        Map<String, URL> value = e1.getValue();\n        for (Map.Entry<String, URL> e2 : value.entrySet()) {\n            URL u = e2.getValue();\n            if (application.equals(u.getParameter(Constants.APPLICATION_KEY))) {\n                ret.add(e1.getKey());\n                break;\n            }\n        }\n    }\n\n    return ret;\n}",
                "start_point": {
                    "row": 405,
                    "column": 4
                },
                "end_point": {
                    "row": 423,
                    "column": 5
                }
            },
            {
                "definition": "public List<String> findMethodsByService(String service) {\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null || service == null || service.length() == 0) return ret;\n\n    Map<String, URL> providers = providerUrls.get(service);\n    if (null == providers || providers.isEmpty()) return ret;\n\n    Entry<String, URL> p = providers.entrySet().iterator().next();\n    String value = p.getValue().getParameter(\"methods\");\n    if (value == null || value.length() == 0) {\n        return ret;\n    }\n    String[] methods = value.split(ParseUtils.METHOD_SPLIT);\n    if (methods == null || methods.length == 0) {\n        return ret;\n    }\n\n    for (String m : methods) {\n        ret.add(m);\n    }\n    return ret;\n}",
                "name": "findMethodsByService",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    }
                ],
                "body": "{\n    List<String> ret = new ArrayList<String>();\n\n    ConcurrentMap<String, Map<String, URL>> providerUrls = getRegistryCache().get(Constants.PROVIDERS_CATEGORY);\n    if (providerUrls == null || service == null || service.length() == 0) return ret;\n\n    Map<String, URL> providers = providerUrls.get(service);\n    if (null == providers || providers.isEmpty()) return ret;\n\n    Entry<String, URL> p = providers.entrySet().iterator().next();\n    String value = p.getValue().getParameter(\"methods\");\n    if (value == null || value.length() == 0) {\n        return ret;\n    }\n    String[] methods = value.split(ParseUtils.METHOD_SPLIT);\n    if (methods == null || methods.length == 0) {\n        return ret;\n    }\n\n    for (String m : methods) {\n        ret.add(m);\n    }\n    return ret;\n}",
                "start_point": {
                    "row": 425,
                    "column": 4
                },
                "end_point": {
                    "row": 448,
                    "column": 5
                }
            },
            {
                "definition": "private URL findProviderUrl(String id) {\n    return findProvider(id).toUrl();\n}",
                "name": "findProviderUrl",
                "modifiers": "private",
                "return_type": "URL",
                "parameters": [
                    {
                        "type": "String",
                        "name": "id"
                    }
                ],
                "body": "{\n    return findProvider(id).toUrl();\n}",
                "start_point": {
                    "row": 450,
                    "column": 4
                },
                "end_point": {
                    "row": 452,
                    "column": 5
                }
            },
            {
                "definition": "public Provider findByServiceAndAddress(String service, String address) {\n    return SyncUtils.url2Provider(findProviderUrl(service, address));\n}",
                "name": "findByServiceAndAddress",
                "modifiers": "public",
                "return_type": "Provider",
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    },
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    return SyncUtils.url2Provider(findProviderUrl(service, address));\n}",
                "start_point": {
                    "row": 454,
                    "column": 4
                },
                "end_point": {
                    "row": 456,
                    "column": 5
                }
            },
            {
                "definition": "private Pair<String, URL> findProviderUrl(String service, String address) {\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n    Map<String, URL> ret = SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    if (ret.isEmpty()) {\n        return null;\n    } else {\n        String key = ret.entrySet().iterator().next().getKey();\n        return new Pair<String, URL>(key, ret.get(key));\n    }\n}",
                "name": "findProviderUrl",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "service"
                    },
                    {
                        "type": "String",
                        "name": "address"
                    }
                ],
                "body": "{\n    Map<String, String> filter = new HashMap<String, String>();\n    filter.put(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n    filter.put(SyncUtils.ADDRESS_FILTER_KEY, address);\n\n    Map<String, URL> ret = SyncUtils.filterFromCategory(getRegistryCache(), filter);\n    if (ret.isEmpty()) {\n        return null;\n    } else {\n        String key = ret.entrySet().iterator().next().getKey();\n        return new Pair<String, URL>(key, ret.get(key));\n    }\n}",
                "start_point": {
                    "row": 458,
                    "column": 4
                },
                "end_point": {
                    "row": 470,
                    "column": 5
                }
            }
        ]
    }
]