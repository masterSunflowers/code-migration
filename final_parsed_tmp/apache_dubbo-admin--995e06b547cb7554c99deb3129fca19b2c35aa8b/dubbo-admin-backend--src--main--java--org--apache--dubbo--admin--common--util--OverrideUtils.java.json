[
    {
        "rev_path": "dubbo-admin-backend/src/main/java/org/apache/dubbo/admin/common/util/OverrideUtils.java",
        "definition": "public class OverrideUtils {\n    public static List<Weight> overridesToWeights(List<Override> overrides) {\n        List<Weight> weights = new ArrayList<Weight>();\n        if (overrides == null) {\n            return weights;\n        }\n        for (Override o : overrides) {\n            if (StringUtils.isEmpty(o.getParams())) {\n                continue;\n            } else {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                for (Map.Entry<String, String> entry : params.entrySet()) {\n                    if (entry.getKey().equals(\"weight\")) {\n                        Weight weight = new Weight();\n                        weight.setAddress(o.getAddress());\n                        weight.setId(o.getId());\n                        weight.setHash(o.getHash());\n                        weight.setService(o.getService());\n                        weight.setWeight(Integer.valueOf(entry.getValue()));\n                        weights.add(weight);\n                    }\n                }\n            }\n        }\n        return weights;\n    }\n\n    public static Weight overrideToWeight(Override override) {\n        List<Weight> weights = OverrideUtils.overridesToWeights(Arrays.asList(override));\n        if (weights != null && weights.size() > 0) {\n            return overridesToWeights(Arrays.asList(override)).get(0);\n        }\n        return null;\n    }\n\n    public static Override weightToOverride(Weight weight) {\n        Override override = new Override();\n        override.setId(weight.getId());\n        override.setHash(weight.getHash());\n        override.setAddress(weight.getAddress());\n        override.setEnabled(true);\n        override.setParams(\"weight=\" + weight.getWeight());\n        override.setService(weight.getService());\n        return override;\n    }\n\n    public static List<LoadBalance> overridesToLoadBalances(List<Override> overrides) {\n        List<LoadBalance> loadBalances = new ArrayList<LoadBalance>();\n        if (overrides == null) {\n            return loadBalances;\n        }\n        for (Override o : overrides) {\n            if (StringUtils.isEmpty(o.getParams())) {\n                continue;\n            } else {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                for (Map.Entry<String, String> entry : params.entrySet()) {\n                    if (entry.getKey().endsWith(\"loadbalance\")) {\n                        LoadBalance loadBalance = new LoadBalance();\n                        String method = null;\n                        if (entry.getKey().endsWith(\".loadbalance\")) {\n                            method = entry.getKey().split(\".loadbalance\")[0];\n                        } else {\n                            method = \"*\";\n                        }\n\n                        loadBalance.setMethod(method);\n                        loadBalance.setId(o.getId());\n                        loadBalance.setHash(o.getHash());\n                        loadBalance.setService(o.getService());\n                        loadBalance.setStrategy(entry.getValue());\n                        loadBalances.add(loadBalance);\n\n                    }\n                }\n            }\n        }\n        return loadBalances;\n    }\n\n    public static LoadBalance overrideToLoadBalance(Override override) {\n        List<LoadBalance> loadBalances = OverrideUtils.overridesToLoadBalances(Arrays.asList(override));\n        if (loadBalances != null && loadBalances.size() > 0) {\n            return loadBalances.get(0);\n        }\n        return null;\n    }\n\n    public static Override loadBalanceToOverride(LoadBalance loadBalance) {\n        Override override = new Override();\n        override.setId(loadBalance.getId());\n        override.setHash(loadBalance.getHash());\n        override.setService(loadBalance.getService());\n        override.setEnabled(true);\n        String method = loadBalance.getMethod();\n        String strategy = loadBalance.getStrategy();\n        if (StringUtils.isEmpty(method) || method.equals(\"*\")) {\n            override.setParams(\"loadbalance=\" + strategy);\n        } else {\n            override.setParams(method + \".loadbalance=\" + strategy);\n        }\n        return override;\n    }\n\n}",
        "package": "package org.apache.dubbo.admin.common.util;",
        "tree_path": "OverrideUtils",
        "name": "OverrideUtils",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    public static List<Weight> overridesToWeights(List<Override> overrides) {\n        List<Weight> weights = new ArrayList<Weight>();\n        if (overrides == null) {\n            return weights;\n        }\n        for (Override o : overrides) {\n            if (StringUtils.isEmpty(o.getParams())) {\n                continue;\n            } else {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                for (Map.Entry<String, String> entry : params.entrySet()) {\n                    if (entry.getKey().equals(\"weight\")) {\n                        Weight weight = new Weight();\n                        weight.setAddress(o.getAddress());\n                        weight.setId(o.getId());\n                        weight.setHash(o.getHash());\n                        weight.setService(o.getService());\n                        weight.setWeight(Integer.valueOf(entry.getValue()));\n                        weights.add(weight);\n                    }\n                }\n            }\n        }\n        return weights;\n    }\n\n    public static Weight overrideToWeight(Override override) {\n        List<Weight> weights = OverrideUtils.overridesToWeights(Arrays.asList(override));\n        if (weights != null && weights.size() > 0) {\n            return overridesToWeights(Arrays.asList(override)).get(0);\n        }\n        return null;\n    }\n\n    public static Override weightToOverride(Weight weight) {\n        Override override = new Override();\n        override.setId(weight.getId());\n        override.setHash(weight.getHash());\n        override.setAddress(weight.getAddress());\n        override.setEnabled(true);\n        override.setParams(\"weight=\" + weight.getWeight());\n        override.setService(weight.getService());\n        return override;\n    }\n\n    public static List<LoadBalance> overridesToLoadBalances(List<Override> overrides) {\n        List<LoadBalance> loadBalances = new ArrayList<LoadBalance>();\n        if (overrides == null) {\n            return loadBalances;\n        }\n        for (Override o : overrides) {\n            if (StringUtils.isEmpty(o.getParams())) {\n                continue;\n            } else {\n                Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n                for (Map.Entry<String, String> entry : params.entrySet()) {\n                    if (entry.getKey().endsWith(\"loadbalance\")) {\n                        LoadBalance loadBalance = new LoadBalance();\n                        String method = null;\n                        if (entry.getKey().endsWith(\".loadbalance\")) {\n                            method = entry.getKey().split(\".loadbalance\")[0];\n                        } else {\n                            method = \"*\";\n                        }\n\n                        loadBalance.setMethod(method);\n                        loadBalance.setId(o.getId());\n                        loadBalance.setHash(o.getHash());\n                        loadBalance.setService(o.getService());\n                        loadBalance.setStrategy(entry.getValue());\n                        loadBalances.add(loadBalance);\n\n                    }\n                }\n            }\n        }\n        return loadBalances;\n    }\n\n    public static LoadBalance overrideToLoadBalance(Override override) {\n        List<LoadBalance> loadBalances = OverrideUtils.overridesToLoadBalances(Arrays.asList(override));\n        if (loadBalances != null && loadBalances.size() > 0) {\n            return loadBalances.get(0);\n        }\n        return null;\n    }\n\n    public static Override loadBalanceToOverride(LoadBalance loadBalance) {\n        Override override = new Override();\n        override.setId(loadBalance.getId());\n        override.setHash(loadBalance.getHash());\n        override.setService(loadBalance.getService());\n        override.setEnabled(true);\n        String method = loadBalance.getMethod();\n        String strategy = loadBalance.getStrategy();\n        if (StringUtils.isEmpty(method) || method.equals(\"*\")) {\n            override.setParams(\"loadbalance=\" + strategy);\n        } else {\n            override.setParams(method + \".loadbalance=\" + strategy);\n        }\n        return override;\n    }\n\n}",
        "start_point": {
            "row": 32,
            "column": 0
        },
        "end_point": {
            "row": 136,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public static List<Weight> overridesToWeights(List<Override> overrides) {\n    List<Weight> weights = new ArrayList<Weight>();\n    if (overrides == null) {\n        return weights;\n    }\n    for (Override o : overrides) {\n        if (StringUtils.isEmpty(o.getParams())) {\n            continue;\n        } else {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                if (entry.getKey().equals(\"weight\")) {\n                    Weight weight = new Weight();\n                    weight.setAddress(o.getAddress());\n                    weight.setId(o.getId());\n                    weight.setHash(o.getHash());\n                    weight.setService(o.getService());\n                    weight.setWeight(Integer.valueOf(entry.getValue()));\n                    weights.add(weight);\n                }\n            }\n        }\n    }\n    return weights;\n}",
                "name": "overridesToWeights",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "List<Override>",
                        "name": "overrides"
                    }
                ],
                "body": "{\n    List<Weight> weights = new ArrayList<Weight>();\n    if (overrides == null) {\n        return weights;\n    }\n    for (Override o : overrides) {\n        if (StringUtils.isEmpty(o.getParams())) {\n            continue;\n        } else {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                if (entry.getKey().equals(\"weight\")) {\n                    Weight weight = new Weight();\n                    weight.setAddress(o.getAddress());\n                    weight.setId(o.getId());\n                    weight.setHash(o.getHash());\n                    weight.setService(o.getService());\n                    weight.setWeight(Integer.valueOf(entry.getValue()));\n                    weights.add(weight);\n                }\n            }\n        }\n    }\n    return weights;\n}",
                "start_point": {
                    "row": 33,
                    "column": 4
                },
                "end_point": {
                    "row": 57,
                    "column": 5
                }
            },
            {
                "definition": "public static Weight overrideToWeight(Override override) {\n    List<Weight> weights = OverrideUtils.overridesToWeights(Arrays.asList(override));\n    if (weights != null && weights.size() > 0) {\n        return overridesToWeights(Arrays.asList(override)).get(0);\n    }\n    return null;\n}",
                "name": "overrideToWeight",
                "modifiers": "public static",
                "return_type": "Weight",
                "parameters": [
                    {
                        "type": "Override",
                        "name": "override"
                    }
                ],
                "body": "{\n    List<Weight> weights = OverrideUtils.overridesToWeights(Arrays.asList(override));\n    if (weights != null && weights.size() > 0) {\n        return overridesToWeights(Arrays.asList(override)).get(0);\n    }\n    return null;\n}",
                "start_point": {
                    "row": 59,
                    "column": 4
                },
                "end_point": {
                    "row": 65,
                    "column": 5
                }
            },
            {
                "definition": "public static Override weightToOverride(Weight weight) {\n    Override override = new Override();\n    override.setId(weight.getId());\n    override.setHash(weight.getHash());\n    override.setAddress(weight.getAddress());\n    override.setEnabled(true);\n    override.setParams(\"weight=\" + weight.getWeight());\n    override.setService(weight.getService());\n    return override;\n}",
                "name": "weightToOverride",
                "modifiers": "public static",
                "return_type": "Override",
                "parameters": [
                    {
                        "type": "Weight",
                        "name": "weight"
                    }
                ],
                "body": "{\n    Override override = new Override();\n    override.setId(weight.getId());\n    override.setHash(weight.getHash());\n    override.setAddress(weight.getAddress());\n    override.setEnabled(true);\n    override.setParams(\"weight=\" + weight.getWeight());\n    override.setService(weight.getService());\n    return override;\n}",
                "start_point": {
                    "row": 67,
                    "column": 4
                },
                "end_point": {
                    "row": 76,
                    "column": 5
                }
            },
            {
                "definition": "public static List<LoadBalance> overridesToLoadBalances(List<Override> overrides) {\n    List<LoadBalance> loadBalances = new ArrayList<LoadBalance>();\n    if (overrides == null) {\n        return loadBalances;\n    }\n    for (Override o : overrides) {\n        if (StringUtils.isEmpty(o.getParams())) {\n            continue;\n        } else {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                if (entry.getKey().endsWith(\"loadbalance\")) {\n                    LoadBalance loadBalance = new LoadBalance();\n                    String method = null;\n                    if (entry.getKey().endsWith(\".loadbalance\")) {\n                        method = entry.getKey().split(\".loadbalance\")[0];\n                    } else {\n                        method = \"*\";\n                    }\n\n                    loadBalance.setMethod(method);\n                    loadBalance.setId(o.getId());\n                    loadBalance.setHash(o.getHash());\n                    loadBalance.setService(o.getService());\n                    loadBalance.setStrategy(entry.getValue());\n                    loadBalances.add(loadBalance);\n\n                }\n            }\n        }\n    }\n    return loadBalances;\n}",
                "name": "overridesToLoadBalances",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "List<Override>",
                        "name": "overrides"
                    }
                ],
                "body": "{\n    List<LoadBalance> loadBalances = new ArrayList<LoadBalance>();\n    if (overrides == null) {\n        return loadBalances;\n    }\n    for (Override o : overrides) {\n        if (StringUtils.isEmpty(o.getParams())) {\n            continue;\n        } else {\n            Map<String, String> params = StringUtils.parseQueryString(o.getParams());\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                if (entry.getKey().endsWith(\"loadbalance\")) {\n                    LoadBalance loadBalance = new LoadBalance();\n                    String method = null;\n                    if (entry.getKey().endsWith(\".loadbalance\")) {\n                        method = entry.getKey().split(\".loadbalance\")[0];\n                    } else {\n                        method = \"*\";\n                    }\n\n                    loadBalance.setMethod(method);\n                    loadBalance.setId(o.getId());\n                    loadBalance.setHash(o.getHash());\n                    loadBalance.setService(o.getService());\n                    loadBalance.setStrategy(entry.getValue());\n                    loadBalances.add(loadBalance);\n\n                }\n            }\n        }\n    }\n    return loadBalances;\n}",
                "start_point": {
                    "row": 78,
                    "column": 4
                },
                "end_point": {
                    "row": 110,
                    "column": 5
                }
            },
            {
                "definition": "public static LoadBalance overrideToLoadBalance(Override override) {\n    List<LoadBalance> loadBalances = OverrideUtils.overridesToLoadBalances(Arrays.asList(override));\n    if (loadBalances != null && loadBalances.size() > 0) {\n        return loadBalances.get(0);\n    }\n    return null;\n}",
                "name": "overrideToLoadBalance",
                "modifiers": "public static",
                "return_type": "LoadBalance",
                "parameters": [
                    {
                        "type": "Override",
                        "name": "override"
                    }
                ],
                "body": "{\n    List<LoadBalance> loadBalances = OverrideUtils.overridesToLoadBalances(Arrays.asList(override));\n    if (loadBalances != null && loadBalances.size() > 0) {\n        return loadBalances.get(0);\n    }\n    return null;\n}",
                "start_point": {
                    "row": 112,
                    "column": 4
                },
                "end_point": {
                    "row": 118,
                    "column": 5
                }
            },
            {
                "definition": "public static Override loadBalanceToOverride(LoadBalance loadBalance) {\n    Override override = new Override();\n    override.setId(loadBalance.getId());\n    override.setHash(loadBalance.getHash());\n    override.setService(loadBalance.getService());\n    override.setEnabled(true);\n    String method = loadBalance.getMethod();\n    String strategy = loadBalance.getStrategy();\n    if (StringUtils.isEmpty(method) || method.equals(\"*\")) {\n        override.setParams(\"loadbalance=\" + strategy);\n    } else {\n        override.setParams(method + \".loadbalance=\" + strategy);\n    }\n    return override;\n}",
                "name": "loadBalanceToOverride",
                "modifiers": "public static",
                "return_type": "Override",
                "parameters": [
                    {
                        "type": "LoadBalance",
                        "name": "loadBalance"
                    }
                ],
                "body": "{\n    Override override = new Override();\n    override.setId(loadBalance.getId());\n    override.setHash(loadBalance.getHash());\n    override.setService(loadBalance.getService());\n    override.setEnabled(true);\n    String method = loadBalance.getMethod();\n    String strategy = loadBalance.getStrategy();\n    if (StringUtils.isEmpty(method) || method.equals(\"*\")) {\n        override.setParams(\"loadbalance=\" + strategy);\n    } else {\n        override.setParams(method + \".loadbalance=\" + strategy);\n    }\n    return override;\n}",
                "start_point": {
                    "row": 120,
                    "column": 4
                },
                "end_point": {
                    "row": 134,
                    "column": 5
                }
            }
        ]
    }
]