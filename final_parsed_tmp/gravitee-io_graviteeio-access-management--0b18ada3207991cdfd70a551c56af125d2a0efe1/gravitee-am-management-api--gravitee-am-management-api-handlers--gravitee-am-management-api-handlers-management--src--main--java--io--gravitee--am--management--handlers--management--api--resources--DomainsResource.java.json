[
    {
        "repo_name": "gravitee-io_graviteeio-access-management",
        "commit": "0b18ada3207991cdfd70a551c56af125d2a0efe1",
        "rev_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-management/src/main/java/io/gravitee/am/management/handlers/management/api/resources/DomainsResource.java",
        "definition": "@Path(\"/domains\")\n@Api(tags = {\"domain\"})\npublic class DomainsResource extends AbstractResource {\n\n    @Autowired\n    private DomainService domainService;\n\n    @Context\n    private ResourceContext resourceContext;\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @ApiOperation(\n            value = \"List security domains\",\n            notes = \"List all the security domains accessible to the current user.\")\n    @ApiResponses({\n            @ApiResponse(code = 200, message = \"List accessible security domains for current user\", response = Domain.class, responseContainer = \"List\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")})\n    public void list(@Suspended final AsyncResponse response) {\n         domainService.findAll()\n                 .map(domains ->\n                        domains.stream()\n                                .filter(domain -> !domain.isMaster())\n                                .map(domain -> {\n                                    domain.setLoginForm(null);\n                                    return domain;\n                                })\n                                .sorted((o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName()))\n                                .collect(Collectors.toList()))\n                .subscribe(\n                        result -> response.resume(Response.ok(result).build()),\n                        error -> response.resume(error));\n    }\n\n    @POST\n    @Produces(MediaType.APPLICATION_JSON)\n    @Consumes(MediaType.APPLICATION_JSON)\n    @ApiOperation(value = \"Create a security domain\")\n    @ApiResponses({\n            @ApiResponse(code = 201, message = \"Domain successfully created\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")})\n    public void create(\n            @ApiParam(name = \"domain\", required = true)\n            @Valid @NotNull final NewDomain newDomain,\n            @Suspended final AsyncResponse response) {\n        domainService.create(newDomain)\n                .subscribe(\n                        domain -> response.resume(Response\n                                                    .created(URI.create(\"/domains/\" + domain.getId()))\n                                                    .entity(domain)\n                                                    .build()),\n                        error -> response.resume(error));\n    }\n\n    @Path(\"{domain}\")\n    public DomainResource getDomainResource() {\n        return resourceContext.getResource(DomainResource.class);\n    }\n\n}",
        "package": "package io.gravitee.am.management.handlers.management.api.resources;",
        "tree_path": "DomainsResource",
        "name": "DomainsResource",
        "modifiers": "@Path(\"/domains\")\n@Api(tags = {\"domain\"})\npublic",
        "superclass": "extends AbstractResource",
        "super_interfaces": null,
        "body": "{\n\n    @Autowired\n    private DomainService domainService;\n\n    @Context\n    private ResourceContext resourceContext;\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @ApiOperation(\n            value = \"List security domains\",\n            notes = \"List all the security domains accessible to the current user.\")\n    @ApiResponses({\n            @ApiResponse(code = 200, message = \"List accessible security domains for current user\", response = Domain.class, responseContainer = \"List\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")})\n    public void list(@Suspended final AsyncResponse response) {\n         domainService.findAll()\n                 .map(domains ->\n                        domains.stream()\n                                .filter(domain -> !domain.isMaster())\n                                .map(domain -> {\n                                    domain.setLoginForm(null);\n                                    return domain;\n                                })\n                                .sorted((o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName()))\n                                .collect(Collectors.toList()))\n                .subscribe(\n                        result -> response.resume(Response.ok(result).build()),\n                        error -> response.resume(error));\n    }\n\n    @POST\n    @Produces(MediaType.APPLICATION_JSON)\n    @Consumes(MediaType.APPLICATION_JSON)\n    @ApiOperation(value = \"Create a security domain\")\n    @ApiResponses({\n            @ApiResponse(code = 201, message = \"Domain successfully created\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")})\n    public void create(\n            @ApiParam(name = \"domain\", required = true)\n            @Valid @NotNull final NewDomain newDomain,\n            @Suspended final AsyncResponse response) {\n        domainService.create(newDomain)\n                .subscribe(\n                        domain -> response.resume(Response\n                                                    .created(URI.create(\"/domains/\" + domain.getId()))\n                                                    .entity(domain)\n                                                    .build()),\n                        error -> response.resume(error));\n    }\n\n    @Path(\"{domain}\")\n    public DomainResource getDomainResource() {\n        return resourceContext.getResource(DomainResource.class);\n    }\n\n}",
        "start_point": {
            "row": 41,
            "column": 0
        },
        "end_point": {
            "row": 100,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@GET\n@Produces(MediaType.APPLICATION_JSON)\n@ApiOperation(\n        value = \"List security domains\",\n        notes = \"List all the security domains accessible to the current user.\")\n@ApiResponses({\n        @ApiResponse(code = 200, message = \"List accessible security domains for current user\", response = Domain.class, responseContainer = \"List\"),\n        @ApiResponse(code = 500, message = \"Internal server error\")})\npublic void list(@Suspended final AsyncResponse response) {\n     domainService.findAll()\n             .map(domains ->\n                    domains.stream()\n                            .filter(domain -> !domain.isMaster())\n                            .map(domain -> {\n                                domain.setLoginForm(null);\n                                return domain;\n                            })\n                            .sorted((o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName()))\n                            .collect(Collectors.toList()))\n            .subscribe(\n                    result -> response.resume(Response.ok(result).build()),\n                    error -> response.resume(error));\n}",
                "name": "list",
                "modifiers": "@GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @ApiOperation(\n            value = \"List security domains\",\n            notes = \"List all the security domains accessible to the current user.\")\n    @ApiResponses({\n            @ApiResponse(code = 200, message = \"List accessible security domains for current user\", response = Domain.class, responseContainer = \"List\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")})\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@Suspended final",
                        "name": "AsyncResponse"
                    }
                ],
                "body": "{\n     domainService.findAll()\n             .map(domains ->\n                    domains.stream()\n                            .filter(domain -> !domain.isMaster())\n                            .map(domain -> {\n                                domain.setLoginForm(null);\n                                return domain;\n                            })\n                            .sorted((o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName()))\n                            .collect(Collectors.toList()))\n            .subscribe(\n                    result -> response.resume(Response.ok(result).build()),\n                    error -> response.resume(error));\n}",
                "start_point": {
                    "row": 51,
                    "column": 4
                },
                "end_point": {
                    "row": 73,
                    "column": 5
                }
            },
            {
                "definition": "@POST\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\n@ApiOperation(value = \"Create a security domain\")\n@ApiResponses({\n        @ApiResponse(code = 201, message = \"Domain successfully created\"),\n        @ApiResponse(code = 500, message = \"Internal server error\")})\npublic void create(\n        @ApiParam(name = \"domain\", required = true)\n        @Valid @NotNull final NewDomain newDomain,\n        @Suspended final AsyncResponse response) {\n    domainService.create(newDomain)\n            .subscribe(\n                    domain -> response.resume(Response\n                                                .created(URI.create(\"/domains/\" + domain.getId()))\n                                                .entity(domain)\n                                                .build()),\n                    error -> response.resume(error));\n}",
                "name": "create",
                "modifiers": "@POST\n    @Produces(MediaType.APPLICATION_JSON)\n    @Consumes(MediaType.APPLICATION_JSON)\n    @ApiOperation(value = \"Create a security domain\")\n    @ApiResponses({\n            @ApiResponse(code = 201, message = \"Domain successfully created\"),\n            @ApiResponse(code = 500, message = \"Internal server error\")})\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "@ApiParam(name = \"domain\", required = true)\n            @Valid @NotNull final",
                        "name": "NewDomain"
                    },
                    {
                        "type": "@Suspended final",
                        "name": "AsyncResponse"
                    }
                ],
                "body": "{\n    domainService.create(newDomain)\n            .subscribe(\n                    domain -> response.resume(Response\n                                                .created(URI.create(\"/domains/\" + domain.getId()))\n                                                .entity(domain)\n                                                .build()),\n                    error -> response.resume(error));\n}",
                "start_point": {
                    "row": 75,
                    "column": 4
                },
                "end_point": {
                    "row": 93,
                    "column": 5
                }
            },
            {
                "definition": "@Path(\"{domain}\")\npublic DomainResource getDomainResource() {\n    return resourceContext.getResource(DomainResource.class);\n}",
                "name": "getDomainResource",
                "modifiers": "@Path(\"{domain}\")\n    public",
                "return_type": "DomainResource",
                "parameters": [],
                "body": "{\n    return resourceContext.getResource(DomainResource.class);\n}",
                "start_point": {
                    "row": 95,
                    "column": 4
                },
                "end_point": {
                    "row": 98,
                    "column": 5
                }
            }
        ],
        "class_mode": "Modified"
    }
]