[
    {
        "repo_name": "gravitee-io_graviteeio-access-management",
        "commit": "0b18ada3207991cdfd70a551c56af125d2a0efe1",
        "rev_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/test/java/io/gravitee/am/management/handlers/oauth2/listener/AuthenticationSuccessListenerTest.java",
        "definition": "@RunWith(MockitoJUnitRunner.class)\npublic class AuthenticationSuccessListenerTest {\n\n    @InjectMocks\n    private AuthenticationSuccessListener listener = new AuthenticationSuccessListener();\n\n    @Mock\n    private AuthenticationSuccessEvent eventMock;\n\n    @Mock\n    private Authentication authenticationMock;\n\n    @Mock\n    private User userDetailsMock;\n\n    @Mock\n    private UserService userServiceMock;\n\n    @Mock\n    private Domain domainMock;\n\n    @Mock\n    private io.gravitee.am.model.User repositoryUserMock;\n\n    @Test\n    public void shouldCreateUser() {\n        when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n        when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n        when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenThrow(UserNotFoundException.class);\n\n        listener.onApplicationEvent(eventMock);\n\n        verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n        verify(userServiceMock, times(1)).create(any(String.class), any(NewUser.class));\n        verify(userServiceMock, never()).update(any(String.class), any(String.class), any(UpdateUser.class));\n    }\n\n    @Test\n    public void shouldUpdatedUser() {\n        when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n        when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n        when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenReturn(Maybe.just(repositoryUserMock));\n\n        listener.onApplicationEvent(eventMock);\n\n        verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n        verify(userServiceMock, times(1)).update(any(String.class), any(String.class), any(UpdateUser.class));\n        verify(userServiceMock, never()).create(any(String.class), any(NewUser.class));\n    }\n}",
        "package": "package io.gravitee.am.management.handlers.oauth2.listener;",
        "tree_path": "AuthenticationSuccessListenerTest",
        "name": "AuthenticationSuccessListenerTest",
        "modifiers": "@RunWith(MockitoJUnitRunner.class)\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    @InjectMocks\n    private AuthenticationSuccessListener listener = new AuthenticationSuccessListener();\n\n    @Mock\n    private AuthenticationSuccessEvent eventMock;\n\n    @Mock\n    private Authentication authenticationMock;\n\n    @Mock\n    private User userDetailsMock;\n\n    @Mock\n    private UserService userServiceMock;\n\n    @Mock\n    private Domain domainMock;\n\n    @Mock\n    private io.gravitee.am.model.User repositoryUserMock;\n\n    @Test\n    public void shouldCreateUser() {\n        when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n        when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n        when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenThrow(UserNotFoundException.class);\n\n        listener.onApplicationEvent(eventMock);\n\n        verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n        verify(userServiceMock, times(1)).create(any(String.class), any(NewUser.class));\n        verify(userServiceMock, never()).update(any(String.class), any(String.class), any(UpdateUser.class));\n    }\n\n    @Test\n    public void shouldUpdatedUser() {\n        when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n        when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n        when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenReturn(Maybe.just(repositoryUserMock));\n\n        listener.onApplicationEvent(eventMock);\n\n        verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n        verify(userServiceMock, times(1)).update(any(String.class), any(String.class), any(UpdateUser.class));\n        verify(userServiceMock, never()).create(any(String.class), any(NewUser.class));\n    }\n}",
        "start_point": {
            "row": 40,
            "column": 0
        },
        "end_point": {
            "row": 89,
            "column": 1
        },
        "file_mode": "Renamed-Modified",
        "map_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/test/java/io/gravitee/am/management/handlers/oauth2/listener/AuthenticationSuccessListenerTest.java",
        "methods": [
            {
                "definition": "@Test\npublic void shouldCreateUser() {\n    when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n    when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n    when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenThrow(UserNotFoundException.class);\n\n    listener.onApplicationEvent(eventMock);\n\n    verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n    verify(userServiceMock, times(1)).create(any(String.class), any(NewUser.class));\n    verify(userServiceMock, never()).update(any(String.class), any(String.class), any(UpdateUser.class));\n}",
                "name": "shouldCreateUser",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n    when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n    when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenThrow(UserNotFoundException.class);\n\n    listener.onApplicationEvent(eventMock);\n\n    verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n    verify(userServiceMock, times(1)).create(any(String.class), any(NewUser.class));\n    verify(userServiceMock, never()).update(any(String.class), any(String.class), any(UpdateUser.class));\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 75,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldUpdatedUser() {\n    when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n    when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n    when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenReturn(Maybe.just(repositoryUserMock));\n\n    listener.onApplicationEvent(eventMock);\n\n    verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n    verify(userServiceMock, times(1)).update(any(String.class), any(String.class), any(UpdateUser.class));\n    verify(userServiceMock, never()).create(any(String.class), any(NewUser.class));\n}",
                "name": "shouldUpdatedUser",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    when(eventMock.getAuthentication()).thenReturn(authenticationMock);\n    when(authenticationMock.getPrincipal()).thenReturn(userDetailsMock);\n    when(userServiceMock.loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername())).thenReturn(Maybe.just(repositoryUserMock));\n\n    listener.onApplicationEvent(eventMock);\n\n    verify(userServiceMock, times(1)).loadUserByUsernameAndDomain(domainMock.getId(), userDetailsMock.getUsername());\n    verify(userServiceMock, times(1)).update(any(String.class), any(String.class), any(UpdateUser.class));\n    verify(userServiceMock, never()).create(any(String.class), any(NewUser.class));\n}",
                "start_point": {
                    "row": 77,
                    "column": 4
                },
                "end_point": {
                    "row": 88,
                    "column": 5
                }
            }
        ],
        "class_mode": "Modified"
    }
]