[
    {
        "repo_name": "gravitee-io_graviteeio-access-management",
        "commit": "3b353da5a24425e4e40d325433c00f49bbf87ab9",
        "rev_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-oauth2/src/main/java/io/gravitee/am/management/handlers/oauth2/authentication/CustomSavedRequestAwareAuthenticationSuccessHandler.java",
        "definition": "public class CustomSavedRequestAwareAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\n    protected final Logger logger = LoggerFactory.getLogger(CustomSavedRequestAwareAuthenticationSuccessHandler.class);\n    private static final String SAVED_REQUEST = \"GRAVITEEIO_AM_SAVED_REQUEST\";\n    private RequestCache requestCache = new HttpSessionRequestCache();\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n                                        Authentication authentication) throws ServletException, IOException {\n        SavedRequest savedRequest = requestCache.getRequest(request, response);\n\n        if (savedRequest == null) {\n            if (request.getSession(false).getAttribute(SAVED_REQUEST) == null) {\n                super.onAuthenticationSuccess(request, response, authentication);\n\n                return;\n            } else {\n                // fetch saved request from user session\n                savedRequest = (SavedRequest) request.getSession(false).getAttribute(SAVED_REQUEST);\n            }\n        } else {\n            // Store the saved HTTP request itself for redirection after successful authentication\n            request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);\n        }\n\n        String targetUrlParameter = getTargetUrlParameter();\n        if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {\n            requestCache.removeRequest(request, response);\n            super.onAuthenticationSuccess(request, response, authentication);\n\n            return;\n        }\n\n        clearAuthenticationAttributes(request);\n\n        // Use the DefaultSavedRequest URL\n        String targetUrl = savedRequest.getRedirectUrl();\n        logger.debug(\"Redirecting to DefaultSavedRequest Url: \" + targetUrl);\n        getRedirectStrategy().sendRedirect(request, response, targetUrl);\n    }\n}",
        "package": "package io.gravitee.am.management.handlers.oauth2.authentication;",
        "tree_path": "CustomSavedRequestAwareAuthenticationSuccessHandler",
        "name": "CustomSavedRequestAwareAuthenticationSuccessHandler",
        "modifiers": "public",
        "superclass": "extends SavedRequestAwareAuthenticationSuccessHandler",
        "super_interfaces": null,
        "body": "{\n    protected final Logger logger = LoggerFactory.getLogger(CustomSavedRequestAwareAuthenticationSuccessHandler.class);\n    private static final String SAVED_REQUEST = \"GRAVITEEIO_AM_SAVED_REQUEST\";\n    private RequestCache requestCache = new HttpSessionRequestCache();\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n                                        Authentication authentication) throws ServletException, IOException {\n        SavedRequest savedRequest = requestCache.getRequest(request, response);\n\n        if (savedRequest == null) {\n            if (request.getSession(false).getAttribute(SAVED_REQUEST) == null) {\n                super.onAuthenticationSuccess(request, response, authentication);\n\n                return;\n            } else {\n                // fetch saved request from user session\n                savedRequest = (SavedRequest) request.getSession(false).getAttribute(SAVED_REQUEST);\n            }\n        } else {\n            // Store the saved HTTP request itself for redirection after successful authentication\n            request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);\n        }\n\n        String targetUrlParameter = getTargetUrlParameter();\n        if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {\n            requestCache.removeRequest(request, response);\n            super.onAuthenticationSuccess(request, response, authentication);\n\n            return;\n        }\n\n        clearAuthenticationAttributes(request);\n\n        // Use the DefaultSavedRequest URL\n        String targetUrl = savedRequest.getRedirectUrl();\n        logger.debug(\"Redirecting to DefaultSavedRequest Url: \" + targetUrl);\n        getRedirectStrategy().sendRedirect(request, response, targetUrl);\n    }\n}",
        "start_point": {
            "row": 35,
            "column": 0
        },
        "end_point": {
            "row": 74,
            "column": 1
        },
        "file_mode": "Renamed-Modified",
        "map_path": "gravitee-am-management-api/gravitee-am-management-api-handlers/gravitee-am-management-api-handlers-admin/src/main/java/io/gravitee/am/management/handlers/admin/authentication/CustomSavedRequestAwareAuthenticationSuccessHandler.java",
        "methods": [
            {
                "definition": "@Override\npublic void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n                                    Authentication authentication) throws ServletException, IOException {\n    SavedRequest savedRequest = requestCache.getRequest(request, response);\n\n    if (savedRequest == null) {\n        if (request.getSession(false).getAttribute(SAVED_REQUEST) == null) {\n            super.onAuthenticationSuccess(request, response, authentication);\n\n            return;\n        } else {\n            // fetch saved request from user session\n            savedRequest = (SavedRequest) request.getSession(false).getAttribute(SAVED_REQUEST);\n        }\n    } else {\n        // Store the saved HTTP request itself for redirection after successful authentication\n        request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);\n    }\n\n    String targetUrlParameter = getTargetUrlParameter();\n    if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {\n        requestCache.removeRequest(request, response);\n        super.onAuthenticationSuccess(request, response, authentication);\n\n        return;\n    }\n\n    clearAuthenticationAttributes(request);\n\n    // Use the DefaultSavedRequest URL\n    String targetUrl = savedRequest.getRedirectUrl();\n    logger.debug(\"Redirecting to DefaultSavedRequest Url: \" + targetUrl);\n    getRedirectStrategy().sendRedirect(request, response, targetUrl);\n}",
                "name": "onAuthenticationSuccess",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    },
                    {
                        "type": "HttpServletResponse",
                        "name": "response"
                    },
                    {
                        "type": "Authentication",
                        "name": "authentication"
                    }
                ],
                "body": "{\n    SavedRequest savedRequest = requestCache.getRequest(request, response);\n\n    if (savedRequest == null) {\n        if (request.getSession(false).getAttribute(SAVED_REQUEST) == null) {\n            super.onAuthenticationSuccess(request, response, authentication);\n\n            return;\n        } else {\n            // fetch saved request from user session\n            savedRequest = (SavedRequest) request.getSession(false).getAttribute(SAVED_REQUEST);\n        }\n    } else {\n        // Store the saved HTTP request itself for redirection after successful authentication\n        request.getSession(false).setAttribute(SAVED_REQUEST, savedRequest);\n    }\n\n    String targetUrlParameter = getTargetUrlParameter();\n    if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {\n        requestCache.removeRequest(request, response);\n        super.onAuthenticationSuccess(request, response, authentication);\n\n        return;\n    }\n\n    clearAuthenticationAttributes(request);\n\n    // Use the DefaultSavedRequest URL\n    String targetUrl = savedRequest.getRedirectUrl();\n    logger.debug(\"Redirecting to DefaultSavedRequest Url: \" + targetUrl);\n    getRedirectStrategy().sendRedirect(request, response, targetUrl);\n}",
                "start_point": {
                    "row": 40,
                    "column": 4
                },
                "end_point": {
                    "row": 73,
                    "column": 5
                }
            }
        ],
        "class_mode": "Modified"
    }
]