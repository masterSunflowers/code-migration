[
    {
        "rev_path": "gravitee-am-certificate/gravitee-am-certificate-javakeystore/src/main/java/io/gravitee/am/certificate/javakeystore/provider/JavaKeyStoreProvider.java",
        "definition": "public class JavaKeyStoreProvider implements CertificateProvider, InitializingBean {\n\n    private KeyPair keyPair;\n    private Signer signer;\n\n    @Autowired\n    private JavaKeyStoreConfiguration configuration;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        keyPair = new KeyStoreKeyFactory(new InputStreamResource(new FileInputStream(new File(configuration.getJks()))),\n                configuration.getStorepass().toCharArray()).getKeyPair(configuration.getAlias(), configuration.getKeypass().toCharArray());\n        signer = new RsaSigner((RSAPrivateKey) keyPair.getPrivate());\n    }\n\n    @Override\n    public String sign(String payload) {\n        return JwtHelper.encode(payload, signer).getEncoded();\n    }\n\n    @Override\n    public String publicKey() {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n       /* encode the \"ssh-rsa\" string */\n        try {\n            byte[] sshrsa = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};\n            out.write(sshrsa);\n            /* Encode the public exponent */\n            BigInteger e = ((RSAPublicKey) keyPair.getPublic()).getPublicExponent();\n            byte[] data = e.toByteArray();\n            encodeUInt32(data.length, out);\n            out.write(data);\n            /* Encode the modulus */\n            BigInteger m = ((RSAPublicKey) keyPair.getPublic()).getModulus();\n            data = m.toByteArray();\n            encodeUInt32(data.length, out);\n            out.write(data);\n            return Base64.getEncoder().encodeToString(out.toByteArray());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    private void encodeUInt32(int value, OutputStream out) throws IOException {\n        byte[] tmp = new byte[4];\n        tmp[0] = (byte)((value >>> 24) & 0xff);\n        tmp[1] = (byte)((value >>> 16) & 0xff);\n        tmp[2] = (byte)((value >>> 8) & 0xff);\n        tmp[3] = (byte)(value & 0xff);\n        out.write(tmp);\n    }\n\n\n}",
        "package": "package io.gravitee.am.certificate.javakeystore.provider;",
        "tree_path": "JavaKeyStoreProvider",
        "name": "JavaKeyStoreProvider",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements CertificateProvider, InitializingBean",
        "body": "{\n\n    private KeyPair keyPair;\n    private Signer signer;\n\n    @Autowired\n    private JavaKeyStoreConfiguration configuration;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        keyPair = new KeyStoreKeyFactory(new InputStreamResource(new FileInputStream(new File(configuration.getJks()))),\n                configuration.getStorepass().toCharArray()).getKeyPair(configuration.getAlias(), configuration.getKeypass().toCharArray());\n        signer = new RsaSigner((RSAPrivateKey) keyPair.getPrivate());\n    }\n\n    @Override\n    public String sign(String payload) {\n        return JwtHelper.encode(payload, signer).getEncoded();\n    }\n\n    @Override\n    public String publicKey() {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n       /* encode the \"ssh-rsa\" string */\n        try {\n            byte[] sshrsa = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};\n            out.write(sshrsa);\n            /* Encode the public exponent */\n            BigInteger e = ((RSAPublicKey) keyPair.getPublic()).getPublicExponent();\n            byte[] data = e.toByteArray();\n            encodeUInt32(data.length, out);\n            out.write(data);\n            /* Encode the modulus */\n            BigInteger m = ((RSAPublicKey) keyPair.getPublic()).getModulus();\n            data = m.toByteArray();\n            encodeUInt32(data.length, out);\n            out.write(data);\n            return Base64.getEncoder().encodeToString(out.toByteArray());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    private void encodeUInt32(int value, OutputStream out) throws IOException {\n        byte[] tmp = new byte[4];\n        tmp[0] = (byte)((value >>> 24) & 0xff);\n        tmp[1] = (byte)((value >>> 16) & 0xff);\n        tmp[2] = (byte)((value >>> 8) & 0xff);\n        tmp[3] = (byte)(value & 0xff);\n        out.write(tmp);\n    }\n\n\n}",
        "start_point": {
            "row": 38,
            "column": 0
        },
        "end_point": {
            "row": 91,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Override\npublic void afterPropertiesSet() throws Exception {\n    keyPair = new KeyStoreKeyFactory(new InputStreamResource(new FileInputStream(new File(configuration.getJks()))),\n            configuration.getStorepass().toCharArray()).getKeyPair(configuration.getAlias(), configuration.getKeypass().toCharArray());\n    signer = new RsaSigner((RSAPrivateKey) keyPair.getPrivate());\n}",
                "name": "afterPropertiesSet",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    keyPair = new KeyStoreKeyFactory(new InputStreamResource(new FileInputStream(new File(configuration.getJks()))),\n            configuration.getStorepass().toCharArray()).getKeyPair(configuration.getAlias(), configuration.getKeypass().toCharArray());\n    signer = new RsaSigner((RSAPrivateKey) keyPair.getPrivate());\n}",
                "start_point": {
                    "row": 46,
                    "column": 4
                },
                "end_point": {
                    "row": 51,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic String sign(String payload) {\n    return JwtHelper.encode(payload, signer).getEncoded();\n}",
                "name": "sign",
                "modifiers": "@Override\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "String",
                        "name": "payload"
                    }
                ],
                "body": "{\n    return JwtHelper.encode(payload, signer).getEncoded();\n}",
                "start_point": {
                    "row": 53,
                    "column": 4
                },
                "end_point": {
                    "row": 56,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic String publicKey() {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n   /* encode the \"ssh-rsa\" string */\n    try {\n        byte[] sshrsa = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};\n        out.write(sshrsa);\n        /* Encode the public exponent */\n        BigInteger e = ((RSAPublicKey) keyPair.getPublic()).getPublicExponent();\n        byte[] data = e.toByteArray();\n        encodeUInt32(data.length, out);\n        out.write(data);\n        /* Encode the modulus */\n        BigInteger m = ((RSAPublicKey) keyPair.getPublic()).getModulus();\n        data = m.toByteArray();\n        encodeUInt32(data.length, out);\n        out.write(data);\n        return Base64.getEncoder().encodeToString(out.toByteArray());\n    } catch (Exception e) {\n        return null;\n    }\n}",
                "name": "publicKey",
                "modifiers": "@Override\n    public",
                "return_type": "String",
                "parameters": [],
                "body": "{\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n   /* encode the \"ssh-rsa\" string */\n    try {\n        byte[] sshrsa = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};\n        out.write(sshrsa);\n        /* Encode the public exponent */\n        BigInteger e = ((RSAPublicKey) keyPair.getPublic()).getPublicExponent();\n        byte[] data = e.toByteArray();\n        encodeUInt32(data.length, out);\n        out.write(data);\n        /* Encode the modulus */\n        BigInteger m = ((RSAPublicKey) keyPair.getPublic()).getModulus();\n        data = m.toByteArray();\n        encodeUInt32(data.length, out);\n        out.write(data);\n        return Base64.getEncoder().encodeToString(out.toByteArray());\n    } catch (Exception e) {\n        return null;\n    }\n}",
                "start_point": {
                    "row": 58,
                    "column": 4
                },
                "end_point": {
                    "row": 79,
                    "column": 5
                }
            },
            {
                "definition": "private void encodeUInt32(int value, OutputStream out) throws IOException {\n    byte[] tmp = new byte[4];\n    tmp[0] = (byte)((value >>> 24) & 0xff);\n    tmp[1] = (byte)((value >>> 16) & 0xff);\n    tmp[2] = (byte)((value >>> 8) & 0xff);\n    tmp[3] = (byte)(value & 0xff);\n    out.write(tmp);\n}",
                "name": "encodeUInt32",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "int",
                        "name": "value"
                    },
                    {
                        "type": "OutputStream",
                        "name": "out"
                    }
                ],
                "body": "{\n    byte[] tmp = new byte[4];\n    tmp[0] = (byte)((value >>> 24) & 0xff);\n    tmp[1] = (byte)((value >>> 16) & 0xff);\n    tmp[2] = (byte)((value >>> 8) & 0xff);\n    tmp[3] = (byte)(value & 0xff);\n    out.write(tmp);\n}",
                "start_point": {
                    "row": 81,
                    "column": 4
                },
                "end_point": {
                    "row": 88,
                    "column": 5
                }
            }
        ],
        "class_mode": "Modified"
    }
]