[
    {
        "rev_path": "src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsReader.java",
        "definition": "public final class ActionsReader implements JsonObjectReader<Actions> {\n\n    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();\n\n    private interface OpenActionReader {\n        Action.OpenAction readOpen(JsonParser parser, JsonNode definition) throws IOException;\n    }\n\n    private final static Map<String, OpenActionReader> OPEN_ACTIONS = ImmutableMap.<String, OpenActionReader>builder()\n            .put(\"url\", new OpenActionReader() {\n                @Override\n                public Action.OpenAction readOpen(JsonParser parser, JsonNode definition) throws IOException {\n                    return getExternalURLData(definition);\n                }\n            })\n            .put(\"landing_page\", new OpenActionReader() {\n                @Override\n                public Action.OpenAction readOpen(JsonParser parser, JsonNode definition) {\n                    return getLandingPageData(definition);\n                }\n\n            })\n            .put(\"deep_link\", new OpenActionReader() {\n                @Override\n                public Action.OpenAction readOpen(JsonParser parser, JsonNode definition) throws IOException {\n                    JsonNode content = definition.path(\"content\");\n                    if (content.isMissingNode() || !content.isTextual()) {\n                        throw new APIParsingException(\"The content attribute must be present and it must be a string.\");\n                    }\n\n                    return new DeepLinkAction(content.getTextValue());\n                }\n            })\n            .build();\n    private Actions.Builder builder = new Actions.Builder();\n\n\n    private static JsonNode getContentEncoding(JsonNode content) {\n        JsonNode c1 = content.path(\"content-encoding\");\n        JsonNode c2 = content.path(\"content_encoding\");\n        if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n            throw new APIParsingException(\"A request cannot specify both content-encoding and content_encoding.\");\n        }\n\n        return c1.isMissingNode() ? c2 : c1;\n    }\n\n    private static JsonNode getContentType(JsonNode content) {\n        JsonNode c1 = content.path(\"content-type\");\n        JsonNode c2 = content.path(\"content_type\");\n        if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n            throw new APIParsingException(\"A request cannot specify both content-type and content_type.\");\n        }\n\n        return c1.isMissingNode() ? c2 : c1;\n    }\n\n    private static Action.OpenAction getLandingPageData(JsonNode definition) {\n        JsonNode content = definition.path(\"content\");\n        if (content.isMissingNode()) {\n            throw new APIParsingException(\"The content attribute must be present.\");\n        }\n\n        JsonNode body = content.path(\"body\");\n        JsonNode contentType = getContentType(content);\n        JsonNode contentEncoding = getContentEncoding(content);\n\n        if (body.isMissingNode() || !body.isTextual()) {\n            throw new APIParsingException(\"The content object must have a body attribute, and it must be a string value.\");\n        }\n\n        if (contentType.isMissingNode() || !contentType.isTextual()) {\n            throw new APIParsingException(\"The content object must have a content type attribute, and it must be a string value..\");\n        }\n\n        {\n            String typeSubtype = contentType.getTextValue().split(\";\")[0].trim().toLowerCase();\n            if (!LandingPageContent.ALLOWED_CONTENT_TYPES.contains(typeSubtype)) {\n                throw new APIParsingException(\"The content type '\" + typeSubtype + \"' is not allowed.\");\n            }\n        }\n\n        if (!contentEncoding.isMissingNode()) {\n            if (!contentEncoding.isTextual() || (!contentEncoding.getTextValue().equals(\"utf-8\") &&\n                    !contentEncoding.getTextValue().equals(\"base64\"))) {\n                throw new APIParsingException(\"The content encoding attribute must be either 'utf-8' or 'base64'\");\n\n            } else if (!contentEncoding.isMissingNode() && contentEncoding.getTextValue().equals(\"base64\")) {\n                try {\n                    BaseEncoding.base64().decode(body.getTextValue());\n                } catch (IllegalArgumentException e) {\n                    throw new APIParsingException(\"Content contains invalid data that is not valid for base64 encoding.\");\n                }\n            }\n        }\n\n        Optional<LandingPageContent.Encoding> optEncoding = contentEncoding.isMissingNode() ?\n                Optional.<LandingPageContent.Encoding>absent() :\n                Optional.of(contentEncoding.getTextValue().equals(\"base64\") ?\n                        LandingPageContent.Encoding.Base64 :\n                        LandingPageContent.Encoding.UTF8);\n\n        String bodyString = body.getTextValue();\n        if (bodyString != null) {\n            int max_size = optEncoding.isPresent() && optEncoding.get() == LandingPageContent.Encoding.Base64 ?\n                    LandingPageContent.MAX_BODY_SIZE_BASE64 : LandingPageContent.MAX_BODY_SIZE_BYTES;\n            if (bodyString.length() > max_size) {\n                throw new APIParsingException(\"Maximum upload size exceeded.\");\n            }\n        }\n\n        return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.getTextValue())\n                .setBody(bodyString)\n                .setEncoding(optEncoding)\n                .build());\n    }\n\n    private static Action.OpenAction getExternalURLData(JsonNode def) {\n        JsonNode content = def.path(\"content\");\n        if (content.isMissingNode() || !content.isTextual()) {\n            throw new APIParsingException(\"The content attribute for an url action must be present and it must be a string.\");\n        }\n\n        URI url;\n        try {\n            url = new URI(content.getTextValue());\n        } catch (URISyntaxException e) {\n            throw new APIParsingException(\"The content attribute for a url action must be a URL.\");\n        }\n\n        if (!url.isAbsolute() || (!url.getScheme().equals(\"http\") && !url.getScheme().equals(\"https\"))) {\n            throw new APIParsingException(\"The url for a url action must use either 'http' or 'https'\");\n        }\n\n        return new OpenExternalURLAction(url);\n    }\n\n    private TagActionData getTagActionData(JsonParser parser, ActionType tagActionType) throws IOException {\n        TagActionData data = MAPPER.readValue(parser, TagActionData.class);\n        if (data == null) {\n            throw new APIParsingException(\"The value for '\" + ActionNameRegistry.INSTANCE.getFieldName(tagActionType) +\n                    \"' cannot be 'null' or the empty string.\");\n        }\n\n        return data;\n    }\n\n    public void readAddTags(JsonParser parser) throws IOException {\n        builder.addTags(new AddTagAction(getTagActionData(parser, ActionType.ADD_TAG)));\n    }\n\n    public void readAppDefined(JsonParser parser) throws IOException {\n        JsonNode jsonNode;\n        try {\n            jsonNode = parser.readValueAsTree();\n        } catch (JsonParseException ex) {\n            throw new APIParsingException(\"Invalid JSON found while parsing app_defined\");\n        }\n\n        if (!jsonNode.isObject()) {\n            throw new APIParsingException(\"The value for app_defined actions MUST be an object.\");\n        }\n\n        ObjectNode appDefinedObject = (ObjectNode) jsonNode;\n        if (!appDefinedObject.getFieldNames().hasNext()) {\n            throw new APIParsingException(\"The app_defined actions object MUST not be empty.\");\n        }\n\n        builder.addAppDefined(new AppDefinedAction(appDefinedObject));\n    }\n\n    public void readOpen(JsonParser parser) throws IOException {\n        JsonNode definition = parser.readValueAsTree();\n        JsonNode type = definition.path(\"type\");\n\n        if (type.isMissingNode() || !type.isTextual()) {\n            throw new APIParsingException(\"The open object MUST have a 'type' attribute.\");\n        }\n\n        OpenActionReader reader = OPEN_ACTIONS.get(type.getTextValue());\n        if (reader == null) {\n            throw new APIParsingException(\"The type attribute '\" + type.getTextValue() +\n                    \"' was not recognized.\");\n        }\n\n        Action.OpenAction action = reader.readOpen(parser, definition);\n        if (action == null) {\n            throw new APIParsingException(\"The open action cannot be null.\");\n        }\n\n        builder.setOpen(action);\n    }\n\n    public void readRemoveTags(JsonParser parser) throws IOException {\n        builder.removeTags(new RemoveTagAction(getTagActionData(parser, ActionType.REMOVE_TAG)));\n    }\n\n    public void readShare(JsonParser parser) throws IOException {\n        ShareAction action = parser.readValueAs(ShareAction.class);\n        if (StringUtils.isEmpty(action.getValue())) {\n            throw new APIParsingException(\"The share text may not be an empty string.\");\n        }\n        builder.setShare(action);\n    }\n\n    @Override\n    public Actions validateAndBuild() throws IOException {\n        return builder.build();\n    }\n}",
        "package": "package com.urbanairship.api.push.parse.notification.actions;",
        "tree_path": "ActionsReader",
        "name": "ActionsReader",
        "modifiers": "public final",
        "superclass": null,
        "super_interfaces": "implements JsonObjectReader<Actions>",
        "body": "{\n\n    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();\n\n    private interface OpenActionReader {\n        Action.OpenAction readOpen(JsonParser parser, JsonNode definition) throws IOException;\n    }\n\n    private final static Map<String, OpenActionReader> OPEN_ACTIONS = ImmutableMap.<String, OpenActionReader>builder()\n            .put(\"url\", new OpenActionReader() {\n                @Override\n                public Action.OpenAction readOpen(JsonParser parser, JsonNode definition) throws IOException {\n                    return getExternalURLData(definition);\n                }\n            })\n            .put(\"landing_page\", new OpenActionReader() {\n                @Override\n                public Action.OpenAction readOpen(JsonParser parser, JsonNode definition) {\n                    return getLandingPageData(definition);\n                }\n\n            })\n            .put(\"deep_link\", new OpenActionReader() {\n                @Override\n                public Action.OpenAction readOpen(JsonParser parser, JsonNode definition) throws IOException {\n                    JsonNode content = definition.path(\"content\");\n                    if (content.isMissingNode() || !content.isTextual()) {\n                        throw new APIParsingException(\"The content attribute must be present and it must be a string.\");\n                    }\n\n                    return new DeepLinkAction(content.getTextValue());\n                }\n            })\n            .build();\n    private Actions.Builder builder = new Actions.Builder();\n\n\n    private static JsonNode getContentEncoding(JsonNode content) {\n        JsonNode c1 = content.path(\"content-encoding\");\n        JsonNode c2 = content.path(\"content_encoding\");\n        if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n            throw new APIParsingException(\"A request cannot specify both content-encoding and content_encoding.\");\n        }\n\n        return c1.isMissingNode() ? c2 : c1;\n    }\n\n    private static JsonNode getContentType(JsonNode content) {\n        JsonNode c1 = content.path(\"content-type\");\n        JsonNode c2 = content.path(\"content_type\");\n        if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n            throw new APIParsingException(\"A request cannot specify both content-type and content_type.\");\n        }\n\n        return c1.isMissingNode() ? c2 : c1;\n    }\n\n    private static Action.OpenAction getLandingPageData(JsonNode definition) {\n        JsonNode content = definition.path(\"content\");\n        if (content.isMissingNode()) {\n            throw new APIParsingException(\"The content attribute must be present.\");\n        }\n\n        JsonNode body = content.path(\"body\");\n        JsonNode contentType = getContentType(content);\n        JsonNode contentEncoding = getContentEncoding(content);\n\n        if (body.isMissingNode() || !body.isTextual()) {\n            throw new APIParsingException(\"The content object must have a body attribute, and it must be a string value.\");\n        }\n\n        if (contentType.isMissingNode() || !contentType.isTextual()) {\n            throw new APIParsingException(\"The content object must have a content type attribute, and it must be a string value..\");\n        }\n\n        {\n            String typeSubtype = contentType.getTextValue().split(\";\")[0].trim().toLowerCase();\n            if (!LandingPageContent.ALLOWED_CONTENT_TYPES.contains(typeSubtype)) {\n                throw new APIParsingException(\"The content type '\" + typeSubtype + \"' is not allowed.\");\n            }\n        }\n\n        if (!contentEncoding.isMissingNode()) {\n            if (!contentEncoding.isTextual() || (!contentEncoding.getTextValue().equals(\"utf-8\") &&\n                    !contentEncoding.getTextValue().equals(\"base64\"))) {\n                throw new APIParsingException(\"The content encoding attribute must be either 'utf-8' or 'base64'\");\n\n            } else if (!contentEncoding.isMissingNode() && contentEncoding.getTextValue().equals(\"base64\")) {\n                try {\n                    BaseEncoding.base64().decode(body.getTextValue());\n                } catch (IllegalArgumentException e) {\n                    throw new APIParsingException(\"Content contains invalid data that is not valid for base64 encoding.\");\n                }\n            }\n        }\n\n        Optional<LandingPageContent.Encoding> optEncoding = contentEncoding.isMissingNode() ?\n                Optional.<LandingPageContent.Encoding>absent() :\n                Optional.of(contentEncoding.getTextValue().equals(\"base64\") ?\n                        LandingPageContent.Encoding.Base64 :\n                        LandingPageContent.Encoding.UTF8);\n\n        String bodyString = body.getTextValue();\n        if (bodyString != null) {\n            int max_size = optEncoding.isPresent() && optEncoding.get() == LandingPageContent.Encoding.Base64 ?\n                    LandingPageContent.MAX_BODY_SIZE_BASE64 : LandingPageContent.MAX_BODY_SIZE_BYTES;\n            if (bodyString.length() > max_size) {\n                throw new APIParsingException(\"Maximum upload size exceeded.\");\n            }\n        }\n\n        return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.getTextValue())\n                .setBody(bodyString)\n                .setEncoding(optEncoding)\n                .build());\n    }\n\n    private static Action.OpenAction getExternalURLData(JsonNode def) {\n        JsonNode content = def.path(\"content\");\n        if (content.isMissingNode() || !content.isTextual()) {\n            throw new APIParsingException(\"The content attribute for an url action must be present and it must be a string.\");\n        }\n\n        URI url;\n        try {\n            url = new URI(content.getTextValue());\n        } catch (URISyntaxException e) {\n            throw new APIParsingException(\"The content attribute for a url action must be a URL.\");\n        }\n\n        if (!url.isAbsolute() || (!url.getScheme().equals(\"http\") && !url.getScheme().equals(\"https\"))) {\n            throw new APIParsingException(\"The url for a url action must use either 'http' or 'https'\");\n        }\n\n        return new OpenExternalURLAction(url);\n    }\n\n    private TagActionData getTagActionData(JsonParser parser, ActionType tagActionType) throws IOException {\n        TagActionData data = MAPPER.readValue(parser, TagActionData.class);\n        if (data == null) {\n            throw new APIParsingException(\"The value for '\" + ActionNameRegistry.INSTANCE.getFieldName(tagActionType) +\n                    \"' cannot be 'null' or the empty string.\");\n        }\n\n        return data;\n    }\n\n    public void readAddTags(JsonParser parser) throws IOException {\n        builder.addTags(new AddTagAction(getTagActionData(parser, ActionType.ADD_TAG)));\n    }\n\n    public void readAppDefined(JsonParser parser) throws IOException {\n        JsonNode jsonNode;\n        try {\n            jsonNode = parser.readValueAsTree();\n        } catch (JsonParseException ex) {\n            throw new APIParsingException(\"Invalid JSON found while parsing app_defined\");\n        }\n\n        if (!jsonNode.isObject()) {\n            throw new APIParsingException(\"The value for app_defined actions MUST be an object.\");\n        }\n\n        ObjectNode appDefinedObject = (ObjectNode) jsonNode;\n        if (!appDefinedObject.getFieldNames().hasNext()) {\n            throw new APIParsingException(\"The app_defined actions object MUST not be empty.\");\n        }\n\n        builder.addAppDefined(new AppDefinedAction(appDefinedObject));\n    }\n\n    public void readOpen(JsonParser parser) throws IOException {\n        JsonNode definition = parser.readValueAsTree();\n        JsonNode type = definition.path(\"type\");\n\n        if (type.isMissingNode() || !type.isTextual()) {\n            throw new APIParsingException(\"The open object MUST have a 'type' attribute.\");\n        }\n\n        OpenActionReader reader = OPEN_ACTIONS.get(type.getTextValue());\n        if (reader == null) {\n            throw new APIParsingException(\"The type attribute '\" + type.getTextValue() +\n                    \"' was not recognized.\");\n        }\n\n        Action.OpenAction action = reader.readOpen(parser, definition);\n        if (action == null) {\n            throw new APIParsingException(\"The open action cannot be null.\");\n        }\n\n        builder.setOpen(action);\n    }\n\n    public void readRemoveTags(JsonParser parser) throws IOException {\n        builder.removeTags(new RemoveTagAction(getTagActionData(parser, ActionType.REMOVE_TAG)));\n    }\n\n    public void readShare(JsonParser parser) throws IOException {\n        ShareAction action = parser.readValueAs(ShareAction.class);\n        if (StringUtils.isEmpty(action.getValue())) {\n            throw new APIParsingException(\"The share text may not be an empty string.\");\n        }\n        builder.setShare(action);\n    }\n\n    @Override\n    public Actions validateAndBuild() throws IOException {\n        return builder.build();\n    }\n}",
        "start_point": {
            "row": 37,
            "column": 0
        },
        "end_point": {
            "row": 246,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "private static JsonNode getContentEncoding(JsonNode content) {\n    JsonNode c1 = content.path(\"content-encoding\");\n    JsonNode c2 = content.path(\"content_encoding\");\n    if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n        throw new APIParsingException(\"A request cannot specify both content-encoding and content_encoding.\");\n    }\n\n    return c1.isMissingNode() ? c2 : c1;\n}",
                "name": "getContentEncoding",
                "modifiers": "private static",
                "return_type": "JsonNode",
                "parameters": [
                    {
                        "type": "JsonNode",
                        "name": "content"
                    }
                ],
                "body": "{\n    JsonNode c1 = content.path(\"content-encoding\");\n    JsonNode c2 = content.path(\"content_encoding\");\n    if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n        throw new APIParsingException(\"A request cannot specify both content-encoding and content_encoding.\");\n    }\n\n    return c1.isMissingNode() ? c2 : c1;\n}",
                "start_point": {
                    "row": 74,
                    "column": 4
                },
                "end_point": {
                    "row": 82,
                    "column": 5
                }
            },
            {
                "definition": "private static JsonNode getContentType(JsonNode content) {\n    JsonNode c1 = content.path(\"content-type\");\n    JsonNode c2 = content.path(\"content_type\");\n    if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n        throw new APIParsingException(\"A request cannot specify both content-type and content_type.\");\n    }\n\n    return c1.isMissingNode() ? c2 : c1;\n}",
                "name": "getContentType",
                "modifiers": "private static",
                "return_type": "JsonNode",
                "parameters": [
                    {
                        "type": "JsonNode",
                        "name": "content"
                    }
                ],
                "body": "{\n    JsonNode c1 = content.path(\"content-type\");\n    JsonNode c2 = content.path(\"content_type\");\n    if(! c1.isMissingNode() && ! c2.isMissingNode()) {\n        throw new APIParsingException(\"A request cannot specify both content-type and content_type.\");\n    }\n\n    return c1.isMissingNode() ? c2 : c1;\n}",
                "start_point": {
                    "row": 84,
                    "column": 4
                },
                "end_point": {
                    "row": 92,
                    "column": 5
                }
            },
            {
                "definition": "private static Action.OpenAction getLandingPageData(JsonNode definition) {\n    JsonNode content = definition.path(\"content\");\n    if (content.isMissingNode()) {\n        throw new APIParsingException(\"The content attribute must be present.\");\n    }\n\n    JsonNode body = content.path(\"body\");\n    JsonNode contentType = getContentType(content);\n    JsonNode contentEncoding = getContentEncoding(content);\n\n    if (body.isMissingNode() || !body.isTextual()) {\n        throw new APIParsingException(\"The content object must have a body attribute, and it must be a string value.\");\n    }\n\n    if (contentType.isMissingNode() || !contentType.isTextual()) {\n        throw new APIParsingException(\"The content object must have a content type attribute, and it must be a string value..\");\n    }\n\n    {\n        String typeSubtype = contentType.getTextValue().split(\";\")[0].trim().toLowerCase();\n        if (!LandingPageContent.ALLOWED_CONTENT_TYPES.contains(typeSubtype)) {\n            throw new APIParsingException(\"The content type '\" + typeSubtype + \"' is not allowed.\");\n        }\n    }\n\n    if (!contentEncoding.isMissingNode()) {\n        if (!contentEncoding.isTextual() || (!contentEncoding.getTextValue().equals(\"utf-8\") &&\n                !contentEncoding.getTextValue().equals(\"base64\"))) {\n            throw new APIParsingException(\"The content encoding attribute must be either 'utf-8' or 'base64'\");\n\n        } else if (!contentEncoding.isMissingNode() && contentEncoding.getTextValue().equals(\"base64\")) {\n            try {\n                BaseEncoding.base64().decode(body.getTextValue());\n            } catch (IllegalArgumentException e) {\n                throw new APIParsingException(\"Content contains invalid data that is not valid for base64 encoding.\");\n            }\n        }\n    }\n\n    Optional<LandingPageContent.Encoding> optEncoding = contentEncoding.isMissingNode() ?\n            Optional.<LandingPageContent.Encoding>absent() :\n            Optional.of(contentEncoding.getTextValue().equals(\"base64\") ?\n                    LandingPageContent.Encoding.Base64 :\n                    LandingPageContent.Encoding.UTF8);\n\n    String bodyString = body.getTextValue();\n    if (bodyString != null) {\n        int max_size = optEncoding.isPresent() && optEncoding.get() == LandingPageContent.Encoding.Base64 ?\n                LandingPageContent.MAX_BODY_SIZE_BASE64 : LandingPageContent.MAX_BODY_SIZE_BYTES;\n        if (bodyString.length() > max_size) {\n            throw new APIParsingException(\"Maximum upload size exceeded.\");\n        }\n    }\n\n    return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.getTextValue())\n            .setBody(bodyString)\n            .setEncoding(optEncoding)\n            .build());\n}",
                "name": "getLandingPageData",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "JsonNode",
                        "name": "definition"
                    }
                ],
                "body": "{\n    JsonNode content = definition.path(\"content\");\n    if (content.isMissingNode()) {\n        throw new APIParsingException(\"The content attribute must be present.\");\n    }\n\n    JsonNode body = content.path(\"body\");\n    JsonNode contentType = getContentType(content);\n    JsonNode contentEncoding = getContentEncoding(content);\n\n    if (body.isMissingNode() || !body.isTextual()) {\n        throw new APIParsingException(\"The content object must have a body attribute, and it must be a string value.\");\n    }\n\n    if (contentType.isMissingNode() || !contentType.isTextual()) {\n        throw new APIParsingException(\"The content object must have a content type attribute, and it must be a string value..\");\n    }\n\n    {\n        String typeSubtype = contentType.getTextValue().split(\";\")[0].trim().toLowerCase();\n        if (!LandingPageContent.ALLOWED_CONTENT_TYPES.contains(typeSubtype)) {\n            throw new APIParsingException(\"The content type '\" + typeSubtype + \"' is not allowed.\");\n        }\n    }\n\n    if (!contentEncoding.isMissingNode()) {\n        if (!contentEncoding.isTextual() || (!contentEncoding.getTextValue().equals(\"utf-8\") &&\n                !contentEncoding.getTextValue().equals(\"base64\"))) {\n            throw new APIParsingException(\"The content encoding attribute must be either 'utf-8' or 'base64'\");\n\n        } else if (!contentEncoding.isMissingNode() && contentEncoding.getTextValue().equals(\"base64\")) {\n            try {\n                BaseEncoding.base64().decode(body.getTextValue());\n            } catch (IllegalArgumentException e) {\n                throw new APIParsingException(\"Content contains invalid data that is not valid for base64 encoding.\");\n            }\n        }\n    }\n\n    Optional<LandingPageContent.Encoding> optEncoding = contentEncoding.isMissingNode() ?\n            Optional.<LandingPageContent.Encoding>absent() :\n            Optional.of(contentEncoding.getTextValue().equals(\"base64\") ?\n                    LandingPageContent.Encoding.Base64 :\n                    LandingPageContent.Encoding.UTF8);\n\n    String bodyString = body.getTextValue();\n    if (bodyString != null) {\n        int max_size = optEncoding.isPresent() && optEncoding.get() == LandingPageContent.Encoding.Base64 ?\n                LandingPageContent.MAX_BODY_SIZE_BASE64 : LandingPageContent.MAX_BODY_SIZE_BYTES;\n        if (bodyString.length() > max_size) {\n            throw new APIParsingException(\"Maximum upload size exceeded.\");\n        }\n    }\n\n    return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.getTextValue())\n            .setBody(bodyString)\n            .setEncoding(optEncoding)\n            .build());\n}",
                "start_point": {
                    "row": 94,
                    "column": 4
                },
                "end_point": {
                    "row": 152,
                    "column": 5
                }
            },
            {
                "definition": "private static Action.OpenAction getExternalURLData(JsonNode def) {\n    JsonNode content = def.path(\"content\");\n    if (content.isMissingNode() || !content.isTextual()) {\n        throw new APIParsingException(\"The content attribute for an url action must be present and it must be a string.\");\n    }\n\n    URI url;\n    try {\n        url = new URI(content.getTextValue());\n    } catch (URISyntaxException e) {\n        throw new APIParsingException(\"The content attribute for a url action must be a URL.\");\n    }\n\n    if (!url.isAbsolute() || (!url.getScheme().equals(\"http\") && !url.getScheme().equals(\"https\"))) {\n        throw new APIParsingException(\"The url for a url action must use either 'http' or 'https'\");\n    }\n\n    return new OpenExternalURLAction(url);\n}",
                "name": "getExternalURLData",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "JsonNode",
                        "name": "def"
                    }
                ],
                "body": "{\n    JsonNode content = def.path(\"content\");\n    if (content.isMissingNode() || !content.isTextual()) {\n        throw new APIParsingException(\"The content attribute for an url action must be present and it must be a string.\");\n    }\n\n    URI url;\n    try {\n        url = new URI(content.getTextValue());\n    } catch (URISyntaxException e) {\n        throw new APIParsingException(\"The content attribute for a url action must be a URL.\");\n    }\n\n    if (!url.isAbsolute() || (!url.getScheme().equals(\"http\") && !url.getScheme().equals(\"https\"))) {\n        throw new APIParsingException(\"The url for a url action must use either 'http' or 'https'\");\n    }\n\n    return new OpenExternalURLAction(url);\n}",
                "start_point": {
                    "row": 154,
                    "column": 4
                },
                "end_point": {
                    "row": 172,
                    "column": 5
                }
            },
            {
                "definition": "private TagActionData getTagActionData(JsonParser parser, ActionType tagActionType) throws IOException {\n    TagActionData data = MAPPER.readValue(parser, TagActionData.class);\n    if (data == null) {\n        throw new APIParsingException(\"The value for '\" + ActionNameRegistry.INSTANCE.getFieldName(tagActionType) +\n                \"' cannot be 'null' or the empty string.\");\n    }\n\n    return data;\n}",
                "name": "getTagActionData",
                "modifiers": "private",
                "return_type": "TagActionData",
                "parameters": [
                    {
                        "type": "JsonParser",
                        "name": "parser"
                    },
                    {
                        "type": "ActionType",
                        "name": "tagActionType"
                    }
                ],
                "body": "{\n    TagActionData data = MAPPER.readValue(parser, TagActionData.class);\n    if (data == null) {\n        throw new APIParsingException(\"The value for '\" + ActionNameRegistry.INSTANCE.getFieldName(tagActionType) +\n                \"' cannot be 'null' or the empty string.\");\n    }\n\n    return data;\n}",
                "start_point": {
                    "row": 174,
                    "column": 4
                },
                "end_point": {
                    "row": 182,
                    "column": 5
                }
            },
            {
                "definition": "public void readAddTags(JsonParser parser) throws IOException {\n    builder.addTags(new AddTagAction(getTagActionData(parser, ActionType.ADD_TAG)));\n}",
                "name": "readAddTags",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "JsonParser",
                        "name": "parser"
                    }
                ],
                "body": "{\n    builder.addTags(new AddTagAction(getTagActionData(parser, ActionType.ADD_TAG)));\n}",
                "start_point": {
                    "row": 184,
                    "column": 4
                },
                "end_point": {
                    "row": 186,
                    "column": 5
                }
            },
            {
                "definition": "public void readAppDefined(JsonParser parser) throws IOException {\n    JsonNode jsonNode;\n    try {\n        jsonNode = parser.readValueAsTree();\n    } catch (JsonParseException ex) {\n        throw new APIParsingException(\"Invalid JSON found while parsing app_defined\");\n    }\n\n    if (!jsonNode.isObject()) {\n        throw new APIParsingException(\"The value for app_defined actions MUST be an object.\");\n    }\n\n    ObjectNode appDefinedObject = (ObjectNode) jsonNode;\n    if (!appDefinedObject.getFieldNames().hasNext()) {\n        throw new APIParsingException(\"The app_defined actions object MUST not be empty.\");\n    }\n\n    builder.addAppDefined(new AppDefinedAction(appDefinedObject));\n}",
                "name": "readAppDefined",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "JsonParser",
                        "name": "parser"
                    }
                ],
                "body": "{\n    JsonNode jsonNode;\n    try {\n        jsonNode = parser.readValueAsTree();\n    } catch (JsonParseException ex) {\n        throw new APIParsingException(\"Invalid JSON found while parsing app_defined\");\n    }\n\n    if (!jsonNode.isObject()) {\n        throw new APIParsingException(\"The value for app_defined actions MUST be an object.\");\n    }\n\n    ObjectNode appDefinedObject = (ObjectNode) jsonNode;\n    if (!appDefinedObject.getFieldNames().hasNext()) {\n        throw new APIParsingException(\"The app_defined actions object MUST not be empty.\");\n    }\n\n    builder.addAppDefined(new AppDefinedAction(appDefinedObject));\n}",
                "start_point": {
                    "row": 188,
                    "column": 4
                },
                "end_point": {
                    "row": 206,
                    "column": 5
                }
            },
            {
                "definition": "public void readOpen(JsonParser parser) throws IOException {\n    JsonNode definition = parser.readValueAsTree();\n    JsonNode type = definition.path(\"type\");\n\n    if (type.isMissingNode() || !type.isTextual()) {\n        throw new APIParsingException(\"The open object MUST have a 'type' attribute.\");\n    }\n\n    OpenActionReader reader = OPEN_ACTIONS.get(type.getTextValue());\n    if (reader == null) {\n        throw new APIParsingException(\"The type attribute '\" + type.getTextValue() +\n                \"' was not recognized.\");\n    }\n\n    Action.OpenAction action = reader.readOpen(parser, definition);\n    if (action == null) {\n        throw new APIParsingException(\"The open action cannot be null.\");\n    }\n\n    builder.setOpen(action);\n}",
                "name": "readOpen",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "JsonParser",
                        "name": "parser"
                    }
                ],
                "body": "{\n    JsonNode definition = parser.readValueAsTree();\n    JsonNode type = definition.path(\"type\");\n\n    if (type.isMissingNode() || !type.isTextual()) {\n        throw new APIParsingException(\"The open object MUST have a 'type' attribute.\");\n    }\n\n    OpenActionReader reader = OPEN_ACTIONS.get(type.getTextValue());\n    if (reader == null) {\n        throw new APIParsingException(\"The type attribute '\" + type.getTextValue() +\n                \"' was not recognized.\");\n    }\n\n    Action.OpenAction action = reader.readOpen(parser, definition);\n    if (action == null) {\n        throw new APIParsingException(\"The open action cannot be null.\");\n    }\n\n    builder.setOpen(action);\n}",
                "start_point": {
                    "row": 208,
                    "column": 4
                },
                "end_point": {
                    "row": 228,
                    "column": 5
                }
            },
            {
                "definition": "public void readRemoveTags(JsonParser parser) throws IOException {\n    builder.removeTags(new RemoveTagAction(getTagActionData(parser, ActionType.REMOVE_TAG)));\n}",
                "name": "readRemoveTags",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "JsonParser",
                        "name": "parser"
                    }
                ],
                "body": "{\n    builder.removeTags(new RemoveTagAction(getTagActionData(parser, ActionType.REMOVE_TAG)));\n}",
                "start_point": {
                    "row": 230,
                    "column": 4
                },
                "end_point": {
                    "row": 232,
                    "column": 5
                }
            },
            {
                "definition": "public void readShare(JsonParser parser) throws IOException {\n    ShareAction action = parser.readValueAs(ShareAction.class);\n    if (StringUtils.isEmpty(action.getValue())) {\n        throw new APIParsingException(\"The share text may not be an empty string.\");\n    }\n    builder.setShare(action);\n}",
                "name": "readShare",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "JsonParser",
                        "name": "parser"
                    }
                ],
                "body": "{\n    ShareAction action = parser.readValueAs(ShareAction.class);\n    if (StringUtils.isEmpty(action.getValue())) {\n        throw new APIParsingException(\"The share text may not be an empty string.\");\n    }\n    builder.setShare(action);\n}",
                "start_point": {
                    "row": 234,
                    "column": 4
                },
                "end_point": {
                    "row": 240,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic Actions validateAndBuild() throws IOException {\n    return builder.build();\n}",
                "name": "validateAndBuild",
                "modifiers": "@Override\n    public",
                "return_type": "Actions",
                "parameters": [],
                "body": "{\n    return builder.build();\n}",
                "start_point": {
                    "row": 242,
                    "column": 4
                },
                "end_point": {
                    "row": 245,
                    "column": 5
                }
            }
        ],
        "class_mode": "Modified"
    }
]