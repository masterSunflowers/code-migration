[
    {
        "rev_path": "monitoring/kafka-offset-metrics/src/main/java/com/hotels/road/kafka/offset/metrics/KafkaOffsetMetrics.java",
        "definition": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class KafkaOffsetMetrics extends Collector {\n  private final AdminClient adminClient;\n  private final Supplier<String> hostnameSupplier;\n  private final CollectorRegistry collectorRegistry;\n\n  private static final List<String> LABELS =  Arrays.asList(\"host\", \"group\", \"topic\", \"partition\");\n\n  @PostConstruct\n  public void registerExporter() {\n    collectorRegistry.register(this);\n  }\n\n  @Override\n  public List<MetricFamilySamples> collect() {\n\n    List<Sample> samples = asJavaCollection(adminClient.listAllGroupsFlattened())\n        .stream()\n        .map(GroupOverview::groupId)\n        .flatMap(groupId ->\n        {\n          log.info(\"Found groupId: {}\", groupId);\n          return mapAsJavaMap(adminClient.listGroupOffsets(groupId))\n              .entrySet()\n              .stream()\n              .map(entry -> createSample(groupId, entry));\n        })\n        .collect(Collectors.toList());\n\n    MetricFamilySamples mfs = new MetricFamilySamples(\"kafka-offset\", Type.GAUGE, \"kafka-offset\", samples);\n\n    return Collections.singletonList(mfs);\n  }\n\n  private Sample createSample(String groupId, Map.Entry<TopicPartition, Object> entry) {\n    String partition = Integer.toString(entry.getKey().partition());\n    String topic = clean(entry.getKey().topic());\n\n    List<String> labelValues = Arrays.asList(hostnameSupplier.get(), clean(groupId), topic, partition);\n    Number offset = (Number) entry.getValue();\n\n    return new Sample(\"kafka-offset\", LABELS, labelValues, offset.doubleValue());\n  }\n\n  private String clean(String name) {\n    return name.replaceAll(\"\\\\.\", \"_\");\n  }\n}",
        "package": "package com.hotels.road.kafka.offset.metrics;",
        "tree_path": "KafkaOffsetMetrics",
        "name": "KafkaOffsetMetrics",
        "modifiers": "@Component\n@RequiredArgsConstructor\n@Slf4j\npublic",
        "superclass": "extends Collector",
        "super_interfaces": null,
        "body": "{\n  private final AdminClient adminClient;\n  private final Supplier<String> hostnameSupplier;\n  private final CollectorRegistry collectorRegistry;\n\n  private static final List<String> LABELS =  Arrays.asList(\"host\", \"group\", \"topic\", \"partition\");\n\n  @PostConstruct\n  public void registerExporter() {\n    collectorRegistry.register(this);\n  }\n\n  @Override\n  public List<MetricFamilySamples> collect() {\n\n    List<Sample> samples = asJavaCollection(adminClient.listAllGroupsFlattened())\n        .stream()\n        .map(GroupOverview::groupId)\n        .flatMap(groupId ->\n        {\n          log.info(\"Found groupId: {}\", groupId);\n          return mapAsJavaMap(adminClient.listGroupOffsets(groupId))\n              .entrySet()\n              .stream()\n              .map(entry -> createSample(groupId, entry));\n        })\n        .collect(Collectors.toList());\n\n    MetricFamilySamples mfs = new MetricFamilySamples(\"kafka-offset\", Type.GAUGE, \"kafka-offset\", samples);\n\n    return Collections.singletonList(mfs);\n  }\n\n  private Sample createSample(String groupId, Map.Entry<TopicPartition, Object> entry) {\n    String partition = Integer.toString(entry.getKey().partition());\n    String topic = clean(entry.getKey().topic());\n\n    List<String> labelValues = Arrays.asList(hostnameSupplier.get(), clean(groupId), topic, partition);\n    Number offset = (Number) entry.getValue();\n\n    return new Sample(\"kafka-offset\", LABELS, labelValues, offset.doubleValue());\n  }\n\n  private String clean(String name) {\n    return name.replaceAll(\"\\\\.\", \"_\");\n  }\n}",
        "start_point": {
            "row": 39,
            "column": 0
        },
        "end_point": {
            "row": 88,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@PostConstruct\npublic void registerExporter() {\n  collectorRegistry.register(this);\n}",
                "name": "registerExporter",
                "modifiers": "@PostConstruct\n  public",
                "return_type": null,
                "parameters": [],
                "body": "{\n  collectorRegistry.register(this);\n}",
                "start_point": {
                    "row": 49,
                    "column": 2
                },
                "end_point": {
                    "row": 52,
                    "column": 3
                }
            },
            {
                "definition": "@Override\npublic List<MetricFamilySamples> collect() {\n\n  List<Sample> samples = asJavaCollection(adminClient.listAllGroupsFlattened())\n      .stream()\n      .map(GroupOverview::groupId)\n      .flatMap(groupId ->\n      {\n        log.info(\"Found groupId: {}\", groupId);\n        return mapAsJavaMap(adminClient.listGroupOffsets(groupId))\n            .entrySet()\n            .stream()\n            .map(entry -> createSample(groupId, entry));\n      })\n      .collect(Collectors.toList());\n\n  MetricFamilySamples mfs = new MetricFamilySamples(\"kafka-offset\", Type.GAUGE, \"kafka-offset\", samples);\n\n  return Collections.singletonList(mfs);\n}",
                "name": "collect",
                "modifiers": "@Override\n  public",
                "return_type": null,
                "parameters": [],
                "body": "{\n\n  List<Sample> samples = asJavaCollection(adminClient.listAllGroupsFlattened())\n      .stream()\n      .map(GroupOverview::groupId)\n      .flatMap(groupId ->\n      {\n        log.info(\"Found groupId: {}\", groupId);\n        return mapAsJavaMap(adminClient.listGroupOffsets(groupId))\n            .entrySet()\n            .stream()\n            .map(entry -> createSample(groupId, entry));\n      })\n      .collect(Collectors.toList());\n\n  MetricFamilySamples mfs = new MetricFamilySamples(\"kafka-offset\", Type.GAUGE, \"kafka-offset\", samples);\n\n  return Collections.singletonList(mfs);\n}",
                "start_point": {
                    "row": 54,
                    "column": 2
                },
                "end_point": {
                    "row": 73,
                    "column": 3
                }
            },
            {
                "definition": "private Sample createSample(String groupId, Map.Entry<TopicPartition, Object> entry) {\n  String partition = Integer.toString(entry.getKey().partition());\n  String topic = clean(entry.getKey().topic());\n\n  List<String> labelValues = Arrays.asList(hostnameSupplier.get(), clean(groupId), topic, partition);\n  Number offset = (Number) entry.getValue();\n\n  return new Sample(\"kafka-offset\", LABELS, labelValues, offset.doubleValue());\n}",
                "name": "createSample",
                "modifiers": "private",
                "return_type": "Sample",
                "parameters": [
                    {
                        "type": "String",
                        "name": "groupId"
                    },
                    {
                        "type": "Map.Entry<TopicPartition, Object>",
                        "name": "entry"
                    }
                ],
                "body": "{\n  String partition = Integer.toString(entry.getKey().partition());\n  String topic = clean(entry.getKey().topic());\n\n  List<String> labelValues = Arrays.asList(hostnameSupplier.get(), clean(groupId), topic, partition);\n  Number offset = (Number) entry.getValue();\n\n  return new Sample(\"kafka-offset\", LABELS, labelValues, offset.doubleValue());\n}",
                "start_point": {
                    "row": 75,
                    "column": 2
                },
                "end_point": {
                    "row": 83,
                    "column": 3
                }
            },
            {
                "definition": "private String clean(String name) {\n  return name.replaceAll(\"\\\\.\", \"_\");\n}",
                "name": "clean",
                "modifiers": "private",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "String",
                        "name": "name"
                    }
                ],
                "body": "{\n  return name.replaceAll(\"\\\\.\", \"_\");\n}",
                "start_point": {
                    "row": 85,
                    "column": 2
                },
                "end_point": {
                    "row": 87,
                    "column": 3
                }
            }
        ],
        "class_mode": "Modified"
    }
]