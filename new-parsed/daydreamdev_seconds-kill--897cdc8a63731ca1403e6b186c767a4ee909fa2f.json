[
    {
        "rev_path": "src/main/java/com/daydreamdev/secondskill/Kafka/ConsumerListen.java",
        "definition": "@Slf4j\n@Component\npublic class ConsumerListen {\n\n    private Gson gson = new GsonBuilder().create();\n\n    @Autowired\n    private OrderService orderService;\n\n    @KafkaListener(topics = \"SECONDS-KILL-TOPIC\")\n    public void listen(ConsumerRecord<String, String> record) throws Exception {\n        Optional<?> kafkaMessage = Optional.ofNullable(record.value());\n        // Object -> String\n        String message = (String) kafkaMessage.get();\n        // \u53cd\u5e8f\u5217\u5316\n        Stock stock = gson.fromJson((String) message, Stock.class);\n        // \u521b\u5efa\u8ba2\u5355\n        int res = orderService.consumerTopicToCreateOrderWithKafka(stock);\n        if (res == 1) {\n            log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u6210\u529f\");\n        } else {\n            log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n        }\n    }\n}",
        "package": "package com.daydreamdev.secondskill.Kafka;",
        "tree_path": "ConsumerListen",
        "name": "ConsumerListen",
        "modifiers": "@Slf4j\n@Component\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    private Gson gson = new GsonBuilder().create();\n\n    @Autowired\n    private OrderService orderService;\n\n    @KafkaListener(topics = \"SECONDS-KILL-TOPIC\")\n    public void listen(ConsumerRecord<String, String> record) throws Exception {\n        Optional<?> kafkaMessage = Optional.ofNullable(record.value());\n        // Object -> String\n        String message = (String) kafkaMessage.get();\n        // \u53cd\u5e8f\u5217\u5316\n        Stock stock = gson.fromJson((String) message, Stock.class);\n        // \u521b\u5efa\u8ba2\u5355\n        int res = orderService.consumerTopicToCreateOrderWithKafka(stock);\n        if (res == 1) {\n            log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u6210\u529f\");\n        } else {\n            log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n        }\n    }\n}",
        "start_point": {
            "row": 22,
            "column": 0
        },
        "end_point": {
            "row": 46,
            "column": 1
        },
        "file_mode": "Added",
        "map_path": null,
        "methods": [
            {
                "definition": "@KafkaListener(topics = \"SECONDS-KILL-TOPIC\")\npublic void listen(ConsumerRecord<String, String> record) throws Exception {\n    Optional<?> kafkaMessage = Optional.ofNullable(record.value());\n    // Object -> String\n    String message = (String) kafkaMessage.get();\n    // \u53cd\u5e8f\u5217\u5316\n    Stock stock = gson.fromJson((String) message, Stock.class);\n    // \u521b\u5efa\u8ba2\u5355\n    int res = orderService.consumerTopicToCreateOrderWithKafka(stock);\n    if (res == 1) {\n        log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u6210\u529f\");\n    } else {\n        log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n    }\n}",
                "name": "listen",
                "modifiers": "@KafkaListener(topics = \"SECONDS-KILL-TOPIC\")\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "ConsumerRecord<String, String>",
                        "name": "record"
                    }
                ],
                "body": "{\n    Optional<?> kafkaMessage = Optional.ofNullable(record.value());\n    // Object -> String\n    String message = (String) kafkaMessage.get();\n    // \u53cd\u5e8f\u5217\u5316\n    Stock stock = gson.fromJson((String) message, Stock.class);\n    // \u521b\u5efa\u8ba2\u5355\n    int res = orderService.consumerTopicToCreateOrderWithKafka(stock);\n    if (res == 1) {\n        log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u6210\u529f\");\n    } else {\n        log.info(\"Kafka \u6d88\u8d39 Topic \u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n    }\n}",
                "start_point": {
                    "row": 31,
                    "column": 4
                },
                "end_point": {
                    "row": 45,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/daydreamdev/secondskill/SecondsKillApplication.java",
        "definition": "@Slf4j\n@SpringBootApplication\n@EnableTransactionManagement\n@EnableKafka\n@ComponentScan(\"com.daydreamdev.secondskill\")\npublic class SecondsKillApplication {\n\n    /**\n     * @author G.Fukang\n     * @date: 6/7 20:49\n     */\n    public static void main(String[] args) {\n        SpringApplication.run(SecondsKillApplication.class, args);\n/*\t\tnew SpringApplicationBuilder(SecondsKillApplication.class).\n\t\t\t\tlisteners(new ApplicationPidFileWriter())\n\t\t\t\t.run(args);\n\t\tConsumer consumer = SpringBeanFactory.getBean(Consumer.class);\n\t\tnew Thread(consumer, \"\u6d88\u8d39\u8005\").start();\n\t\tlog.info(\"\u6d88\u8d39\u8005\u7ebf\u7a0b\u542f\u52a8\u6210\u529f!\");*/\n    }\n\n}",
        "package": "package com.daydreamdev.secondskill;",
        "tree_path": "SecondsKillApplication",
        "name": "SecondsKillApplication",
        "modifiers": "@Slf4j\n@SpringBootApplication\n@EnableTransactionManagement\n@EnableKafka\n@ComponentScan(\"com.daydreamdev.secondskill\")\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    /**\n     * @author G.Fukang\n     * @date: 6/7 20:49\n     */\n    public static void main(String[] args) {\n        SpringApplication.run(SecondsKillApplication.class, args);\n/*\t\tnew SpringApplicationBuilder(SecondsKillApplication.class).\n\t\t\t\tlisteners(new ApplicationPidFileWriter())\n\t\t\t\t.run(args);\n\t\tConsumer consumer = SpringBeanFactory.getBean(Consumer.class);\n\t\tnew Thread(consumer, \"\u6d88\u8d39\u8005\").start();\n\t\tlog.info(\"\u6d88\u8d39\u8005\u7ebf\u7a0b\u542f\u52a8\u6210\u529f!\");*/\n    }\n\n}",
        "start_point": {
            "row": 9,
            "column": 0
        },
        "end_point": {
            "row": 30,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public static void main(String[] args) {\n    SpringApplication.run(SecondsKillApplication.class, args);\nnew SpringApplicationBuilder(SecondsKillApplication.class).\nlisteners(new ApplicationPidFileWriter())\n.run(args);\nnsumer consumer = SpringBeanFactory.getBean(Consumer.class);\nw Thread(consumer, \"\u6d88\u8d39\u8005\").start();\ng.info(\"\u6d88\u8d39\u8005\u7ebf\u7a0b\u542f\u52a8\u6210\u529f!\");*/\n}",
                "name": "main",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String[]",
                        "name": "args"
                    }
                ],
                "body": "{\n    SpringApplication.run(SecondsKillApplication.class, args);\nnew SpringApplicationBuilder(SecondsKillApplication.class).\nlisteners(new ApplicationPidFileWriter())\n.run(args);\nnsumer consumer = SpringBeanFactory.getBean(Consumer.class);\nw Thread(consumer, \"\u6d88\u8d39\u8005\").start();\ng.info(\"\u6d88\u8d39\u8005\u7ebf\u7a0b\u542f\u52a8\u6210\u529f!\");*/\n}",
                "start_point": {
                    "row": 20,
                    "column": 4
                },
                "end_point": {
                    "row": 28,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/daydreamdev/secondskill/controller/IndexController.java",
        "definition": "@Slf4j\n@Controller\n@RequestMapping(value = \"/\")\npublic class IndexController {\n\n    private static final String success = \"SUCCESS\";\n    private static final String error = \"ERROR\";\n\n    @Autowired\n    private OrderService orderService;\n\n    @Autowired\n    private StockService stockService;\n\n    /**\n     * \u538b\u6d4b\u524d\u5148\u8bf7\u6c42\u8be5\u65b9\u6cd5\uff0c\u521d\u59cb\u5316\u6570\u636e\u5e93\u548c\u7f13\u5b58\n     */\n    @RequestMapping(value = \"initDBAndRedis\", method = RequestMethod.POST)\n    @ResponseBody\n    public String initDBAndRedisBefore(HttpServletRequest request) {\n        int res = 0;\n        try {\n            // \u521d\u59cb\u5316\u5e93\u5b58\u4fe1\u606f\n            res = stockService.initDBBefore();\n            // \u6e05\u7a7a\u8ba2\u5355\u8868\n            res &= (orderService.delOrderDBBefore() == 0 ? 1 : 0);\n            // \u91cd\u7f6e\u7f13\u5b58\n            StockWithRedis.initRedisBefore();\n        } catch (Exception e) {\n            log.error(\"Exception: \", e);\n        }\n        if (res == 1) {\n            log.info(\"\u91cd\u7f6e\u6570\u636e\u5e93\u548c\u7f13\u5b58\u6210\u529f\uff01\");\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u79d2\u6740\u57fa\u672c\u903b\u8f91\uff0c\u5b58\u5728\u8d85\u5356\u95ee\u9898\n     *\n     * @param sid\n     * @return\n     */\n    @RequestMapping(value = \"createWrongOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createWrongOrder(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            res = orderService.createWrongOrder(sid);\n        } catch (Exception e) {\n            log.error(\"Exception: \", e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u4e50\u89c2\u9501\u6263\u5e93\u5b58\n     *\n     * @param sid\n     * @return\n     */\n    @RequestMapping(value = \"createOptimisticOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOptimisticOrder(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            res = orderService.createOptimisticOrder(sid);\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u4e50\u89c2\u9501\u66f4\u65b0 + \u9650\u6d41\n     *\n     * @param sid\n     */\n    @RequestMapping(value = \"createOptimisticLimitOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOptimisticLimitOrder(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            if (RedisLimit.limit()) {\n                res = orderService.createOptimisticOrder(sid);\n            }\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * Redis \u7f13\u5b58\u5e93\u5b58\uff0c\u51cf\u5c11 DB \u538b\u529b\n     * \u5728 RedisPreheatRunner \u505a\u7f13\u5b58\u9884\u70ed\uff0c\u9700\u8981 stock.id = 1\n     * @param sid\n     */\n    @RequestMapping(value = \"createOrderWithLimitAndRedis\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOrderWithLimitAndRedis(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            if (RedisLimit.limit()) {\n                res = orderService.createOrderWithLimitAndRedis(sid);\n                if (res == 1) {\n                    log.info(\"\u79d2\u6740\u6210\u529f\");\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u9650\u6d41 + Redis \u7f13\u5b58\u5e93\u5b58 + KafkaTest \u5f02\u6b65\u4e0b\u5355\n     * @param sid\n     */\n    @RequestMapping(value = \"createOrderWithLimitAndRedisAndKafka\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOrderWithLimitAndRedisAndKafka(HttpServletRequest request, int sid) {\n        try {\n            if (RedisLimit.limit()) {\n                orderService.createOrderWithLimitAndRedisAndKafka(sid);\n            }\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return \"\u79d2\u6740\u8bf7\u6c42\u6b63\u5728\u5904\u7406\uff0c\u6392\u961f\u4e2d\";\n    }\n}",
        "package": "package com.daydreamdev.secondskill.controller;",
        "tree_path": "IndexController",
        "name": "IndexController",
        "modifiers": "@Slf4j\n@Controller\n@RequestMapping(value = \"/\")\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    private static final String success = \"SUCCESS\";\n    private static final String error = \"ERROR\";\n\n    @Autowired\n    private OrderService orderService;\n\n    @Autowired\n    private StockService stockService;\n\n    /**\n     * \u538b\u6d4b\u524d\u5148\u8bf7\u6c42\u8be5\u65b9\u6cd5\uff0c\u521d\u59cb\u5316\u6570\u636e\u5e93\u548c\u7f13\u5b58\n     */\n    @RequestMapping(value = \"initDBAndRedis\", method = RequestMethod.POST)\n    @ResponseBody\n    public String initDBAndRedisBefore(HttpServletRequest request) {\n        int res = 0;\n        try {\n            // \u521d\u59cb\u5316\u5e93\u5b58\u4fe1\u606f\n            res = stockService.initDBBefore();\n            // \u6e05\u7a7a\u8ba2\u5355\u8868\n            res &= (orderService.delOrderDBBefore() == 0 ? 1 : 0);\n            // \u91cd\u7f6e\u7f13\u5b58\n            StockWithRedis.initRedisBefore();\n        } catch (Exception e) {\n            log.error(\"Exception: \", e);\n        }\n        if (res == 1) {\n            log.info(\"\u91cd\u7f6e\u6570\u636e\u5e93\u548c\u7f13\u5b58\u6210\u529f\uff01\");\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u79d2\u6740\u57fa\u672c\u903b\u8f91\uff0c\u5b58\u5728\u8d85\u5356\u95ee\u9898\n     *\n     * @param sid\n     * @return\n     */\n    @RequestMapping(value = \"createWrongOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createWrongOrder(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            res = orderService.createWrongOrder(sid);\n        } catch (Exception e) {\n            log.error(\"Exception: \", e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u4e50\u89c2\u9501\u6263\u5e93\u5b58\n     *\n     * @param sid\n     * @return\n     */\n    @RequestMapping(value = \"createOptimisticOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOptimisticOrder(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            res = orderService.createOptimisticOrder(sid);\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u4e50\u89c2\u9501\u66f4\u65b0 + \u9650\u6d41\n     *\n     * @param sid\n     */\n    @RequestMapping(value = \"createOptimisticLimitOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOptimisticLimitOrder(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            if (RedisLimit.limit()) {\n                res = orderService.createOptimisticOrder(sid);\n            }\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * Redis \u7f13\u5b58\u5e93\u5b58\uff0c\u51cf\u5c11 DB \u538b\u529b\n     * \u5728 RedisPreheatRunner \u505a\u7f13\u5b58\u9884\u70ed\uff0c\u9700\u8981 stock.id = 1\n     * @param sid\n     */\n    @RequestMapping(value = \"createOrderWithLimitAndRedis\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOrderWithLimitAndRedis(HttpServletRequest request, int sid) {\n        int res = 0;\n        try {\n            if (RedisLimit.limit()) {\n                res = orderService.createOrderWithLimitAndRedis(sid);\n                if (res == 1) {\n                    log.info(\"\u79d2\u6740\u6210\u529f\");\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return res == 1 ? success : error;\n    }\n\n    /**\n     * \u9650\u6d41 + Redis \u7f13\u5b58\u5e93\u5b58 + KafkaTest \u5f02\u6b65\u4e0b\u5355\n     * @param sid\n     */\n    @RequestMapping(value = \"createOrderWithLimitAndRedisAndKafka\", method = RequestMethod.POST)\n    @ResponseBody\n    public String createOrderWithLimitAndRedisAndKafka(HttpServletRequest request, int sid) {\n        try {\n            if (RedisLimit.limit()) {\n                orderService.createOrderWithLimitAndRedisAndKafka(sid);\n            }\n        } catch (Exception e) {\n            log.error(\"Exception: \" + e);\n        }\n        return \"\u79d2\u6740\u8bf7\u6c42\u6b63\u5728\u5904\u7406\uff0c\u6392\u961f\u4e2d\";\n    }\n}",
        "start_point": {
            "row": 20,
            "column": 0
        },
        "end_point": {
            "row": 150,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@RequestMapping(value = \"initDBAndRedis\", method = RequestMethod.POST)\n@ResponseBody\npublic String initDBAndRedisBefore(HttpServletRequest request) {\n    int res = 0;\n    try {\n        // \u521d\u59cb\u5316\u5e93\u5b58\u4fe1\u606f\n        res = stockService.initDBBefore();\n        // \u6e05\u7a7a\u8ba2\u5355\u8868\n        res &= (orderService.delOrderDBBefore() == 0 ? 1 : 0);\n        // \u91cd\u7f6e\u7f13\u5b58\n        StockWithRedis.initRedisBefore();\n    } catch (Exception e) {\n        log.error(\"Exception: \", e);\n    }\n    if (res == 1) {\n        log.info(\"\u91cd\u7f6e\u6570\u636e\u5e93\u548c\u7f13\u5b58\u6210\u529f\uff01\");\n    }\n    return res == 1 ? success : error;\n}",
                "name": "initDBAndRedisBefore",
                "modifiers": "@RequestMapping(value = \"initDBAndRedis\", method = RequestMethod.POST)\n    @ResponseBody\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    }
                ],
                "body": "{\n    int res = 0;\n    try {\n        // \u521d\u59cb\u5316\u5e93\u5b58\u4fe1\u606f\n        res = stockService.initDBBefore();\n        // \u6e05\u7a7a\u8ba2\u5355\u8868\n        res &= (orderService.delOrderDBBefore() == 0 ? 1 : 0);\n        // \u91cd\u7f6e\u7f13\u5b58\n        StockWithRedis.initRedisBefore();\n    } catch (Exception e) {\n        log.error(\"Exception: \", e);\n    }\n    if (res == 1) {\n        log.info(\"\u91cd\u7f6e\u6570\u636e\u5e93\u548c\u7f13\u5b58\u6210\u529f\uff01\");\n    }\n    return res == 1 ? success : error;\n}",
                "start_point": {
                    "row": 37,
                    "column": 4
                },
                "end_point": {
                    "row": 55,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"createWrongOrder\", method = RequestMethod.POST)\n@ResponseBody\npublic String createWrongOrder(HttpServletRequest request, int sid) {\n    int res = 0;\n    try {\n        res = orderService.createWrongOrder(sid);\n    } catch (Exception e) {\n        log.error(\"Exception: \", e);\n    }\n    return res == 1 ? success : error;\n}",
                "name": "createWrongOrder",
                "modifiers": "@RequestMapping(value = \"createWrongOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    int res = 0;\n    try {\n        res = orderService.createWrongOrder(sid);\n    } catch (Exception e) {\n        log.error(\"Exception: \", e);\n    }\n    return res == 1 ? success : error;\n}",
                "start_point": {
                    "row": 63,
                    "column": 4
                },
                "end_point": {
                    "row": 73,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"createOptimisticOrder\", method = RequestMethod.POST)\n@ResponseBody\npublic String createOptimisticOrder(HttpServletRequest request, int sid) {\n    int res = 0;\n    try {\n        res = orderService.createOptimisticOrder(sid);\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return res == 1 ? success : error;\n}",
                "name": "createOptimisticOrder",
                "modifiers": "@RequestMapping(value = \"createOptimisticOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    int res = 0;\n    try {\n        res = orderService.createOptimisticOrder(sid);\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return res == 1 ? success : error;\n}",
                "start_point": {
                    "row": 81,
                    "column": 4
                },
                "end_point": {
                    "row": 91,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"createOptimisticLimitOrder\", method = RequestMethod.POST)\n@ResponseBody\npublic String createOptimisticLimitOrder(HttpServletRequest request, int sid) {\n    int res = 0;\n    try {\n        if (RedisLimit.limit()) {\n            res = orderService.createOptimisticOrder(sid);\n        }\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return res == 1 ? success : error;\n}",
                "name": "createOptimisticLimitOrder",
                "modifiers": "@RequestMapping(value = \"createOptimisticLimitOrder\", method = RequestMethod.POST)\n    @ResponseBody\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    int res = 0;\n    try {\n        if (RedisLimit.limit()) {\n            res = orderService.createOptimisticOrder(sid);\n        }\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return res == 1 ? success : error;\n}",
                "start_point": {
                    "row": 98,
                    "column": 4
                },
                "end_point": {
                    "row": 110,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"createOrderWithLimitAndRedis\", method = RequestMethod.POST)\n@ResponseBody\npublic String createOrderWithLimitAndRedis(HttpServletRequest request, int sid) {\n    int res = 0;\n    try {\n        if (RedisLimit.limit()) {\n            res = orderService.createOrderWithLimitAndRedis(sid);\n            if (res == 1) {\n                log.info(\"\u79d2\u6740\u6210\u529f\");\n            }\n        }\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return res == 1 ? success : error;\n}",
                "name": "createOrderWithLimitAndRedis",
                "modifiers": "@RequestMapping(value = \"createOrderWithLimitAndRedis\", method = RequestMethod.POST)\n    @ResponseBody\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    int res = 0;\n    try {\n        if (RedisLimit.limit()) {\n            res = orderService.createOrderWithLimitAndRedis(sid);\n            if (res == 1) {\n                log.info(\"\u79d2\u6740\u6210\u529f\");\n            }\n        }\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return res == 1 ? success : error;\n}",
                "start_point": {
                    "row": 117,
                    "column": 4
                },
                "end_point": {
                    "row": 132,
                    "column": 5
                }
            },
            {
                "definition": "@RequestMapping(value = \"createOrderWithLimitAndRedisAndKafka\", method = RequestMethod.POST)\n@ResponseBody\npublic String createOrderWithLimitAndRedisAndKafka(HttpServletRequest request, int sid) {\n    try {\n        if (RedisLimit.limit()) {\n            orderService.createOrderWithLimitAndRedisAndKafka(sid);\n        }\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return \"\u79d2\u6740\u8bf7\u6c42\u6b63\u5728\u5904\u7406\uff0c\u6392\u961f\u4e2d\";\n}",
                "name": "createOrderWithLimitAndRedisAndKafka",
                "modifiers": "@RequestMapping(value = \"createOrderWithLimitAndRedisAndKafka\", method = RequestMethod.POST)\n    @ResponseBody\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "HttpServletRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    try {\n        if (RedisLimit.limit()) {\n            orderService.createOrderWithLimitAndRedisAndKafka(sid);\n        }\n    } catch (Exception e) {\n        log.error(\"Exception: \" + e);\n    }\n    return \"\u79d2\u6740\u8bf7\u6c42\u6b63\u5728\u5904\u7406\uff0c\u6392\u961f\u4e2d\";\n}",
                "start_point": {
                    "row": 138,
                    "column": 4
                },
                "end_point": {
                    "row": 149,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/daydreamdev/secondskill/service/impl/OrderServiceImpl.java",
        "definition": "@Slf4j\n@Transactional(rollbackFor = Exception.class)\n@Service(value = \"OrderService\")\npublic class OrderServiceImpl implements OrderService {\n\n    @Autowired\n    private StockServiceImpl stockService;\n\n    @Autowired\n    private StockOrderMapper orderMapper;\n\n    @Autowired\n    private KafkaTemplate<String, String> kafkaTemplate;\n\n    @Value(\"${spring.kafka.template.default-topic}\")\n    private String kafkaTopic;\n\n    private Gson gson = new GsonBuilder().create();\n\n    @Override\n    public int delOrderDBBefore() {\n        return orderMapper.delOrderDBBefore();\n    }\n\n    @Override\n    public int createWrongOrder(int sid) throws Exception {\n        Stock stock = checkStock(sid);\n        saleStock(stock);\n        int res = createOrder(stock);\n\n        return res;\n    }\n\n    @Override\n    public int createOptimisticOrder(int sid) throws Exception {\n        // \u6821\u9a8c\u5e93\u5b58\n        Stock stock = checkStock(sid);\n        // \u4e50\u89c2\u9501\u66f4\u65b0\n        saleStockOptimstic(stock);\n        // \u521b\u5efa\u8ba2\u5355\n        int id = createOrder(stock);\n\n        return id;\n    }\n\n    @Override\n    public int createOrderWithLimitAndRedis(int sid) throws Exception {\n        // \u6821\u9a8c\u5e93\u5b58\uff0c\u4ece Redis \u4e2d\u83b7\u53d6\n        Stock stock = checkStockWithRedis(sid);\n        // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548cRedis\n        saleStockOptimsticWithRedis(stock);\n        // \u521b\u5efa\u8ba2\u5355\n        int res = createOrder(stock);\n\n        return res;\n    }\n\n    @Override\n    public void createOrderWithLimitAndRedisAndKafka(int sid) throws Exception {\n        // \u6821\u9a8c\u5e93\u5b58\n        Stock stock = checkStockWithRedis(sid);\n        // \u4e0b\u5355\u8bf7\u6c42\u53d1\u9001\u81f3 kafka\uff0c\u9700\u8981\u5e8f\u5217\u5316 stock\n        kafkaTemplate.send(kafkaTopic, gson.toJson(stock));\n        log.info(\"\u6d88\u606f\u53d1\u9001\u81f3 Kafka \u6210\u529f\");\n    }\n\n    @Override\n    public int consumerTopicToCreateOrderWithKafka(Stock stock) throws Exception {\n        // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548c Redis\n        saleStockOptimsticWithRedis(stock);\n        int res = createOrder(stock);\n\n        return res;\n    }\n\n    /**\n     * Redis \u6821\u9a8c\u5e93\u5b58\n     *\n     * @param sid\n     */\n    private Stock checkStockWithRedis(int sid) throws Exception {\n        Integer count = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_COUNT + sid));\n        Integer sale = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_SALE + sid));\n        Integer version = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_VERSION + sid));\n        if (count < 1) {\n            log.info(\"\u5e93\u5b58\u4e0d\u8db3\");\n            throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3 Redis currentCount: \" + sale);\n        }\n        Stock stock = new Stock();\n        stock.setId(sid);\n        stock.setCount(count);\n        stock.setSale(sale);\n        stock.setVersion(version);\n        // \u6b64\u5904\u5e94\u8be5\u662f\u70ed\u66f4\u65b0\uff0c\u4f46\u662f\u5728\u6570\u636e\u5e93\u4e2d\u53ea\u6709\u4e00\u4e2a\u5546\u54c1\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\n        stock.setName(\"\u624b\u673a\");\n\n        return stock;\n    }\n\n    /**\n     * \u66f4\u65b0\u6570\u636e\u5e93\u548c DB\n     */\n    private void saleStockOptimsticWithRedis(Stock stock) throws Exception {\n        int res = stockService.updateStockByOptimistic(stock);\n        if (res == 0){\n            throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\") ;\n        }\n        // \u66f4\u65b0 Redis\n        StockWithRedis.updateStockWithRedis(stock);\n    }\n\n    /**\n     * \u6821\u9a8c\u5e93\u5b58\n     */\n    private Stock checkStock(int sid) throws Exception {\n        Stock stock = stockService.getStockById(sid);\n        if (stock.getCount() < 1) {\n            throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3\");\n        }\n        return stock;\n    }\n\n    /**\n     * \u6263\u5e93\u5b58\n     */\n    private int saleStock(Stock stock) {\n        stock.setSale(stock.getSale() + 1);\n        stock.setCount(stock.getCount() - 1);\n        return stockService.updateStockById(stock);\n    }\n\n    /**\n     * \u4e50\u89c2\u9501\u6263\u5e93\u5b58\n     */\n    private void saleStockOptimstic(Stock stock) throws Exception {\n        int count = stockService.updateStockByOptimistic(stock);\n        if (count == 0) {\n            throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\");\n        }\n    }\n\n    /**\n     * \u521b\u5efa\u8ba2\u5355\n     */\n    private int createOrder(Stock stock) throws Exception {\n        StockOrder order = new StockOrder();\n        order.setSid(stock.getId());\n        order.setName(stock.getName());\n        order.setCreateTime(new Date());\n        int res = orderMapper.insertSelective(order);\n        if (res == 0) {\n            throw new RuntimeException(\"\u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n        }\n        return res;\n    }\n}",
        "package": "package com.daydreamdev.secondskill.service.impl;",
        "tree_path": "OrderServiceImpl",
        "name": "OrderServiceImpl",
        "modifiers": "@Slf4j\n@Transactional(rollbackFor = Exception.class)\n@Service(value = \"OrderService\")\npublic",
        "superclass": null,
        "super_interfaces": "implements OrderService",
        "body": "{\n\n    @Autowired\n    private StockServiceImpl stockService;\n\n    @Autowired\n    private StockOrderMapper orderMapper;\n\n    @Autowired\n    private KafkaTemplate<String, String> kafkaTemplate;\n\n    @Value(\"${spring.kafka.template.default-topic}\")\n    private String kafkaTopic;\n\n    private Gson gson = new GsonBuilder().create();\n\n    @Override\n    public int delOrderDBBefore() {\n        return orderMapper.delOrderDBBefore();\n    }\n\n    @Override\n    public int createWrongOrder(int sid) throws Exception {\n        Stock stock = checkStock(sid);\n        saleStock(stock);\n        int res = createOrder(stock);\n\n        return res;\n    }\n\n    @Override\n    public int createOptimisticOrder(int sid) throws Exception {\n        // \u6821\u9a8c\u5e93\u5b58\n        Stock stock = checkStock(sid);\n        // \u4e50\u89c2\u9501\u66f4\u65b0\n        saleStockOptimstic(stock);\n        // \u521b\u5efa\u8ba2\u5355\n        int id = createOrder(stock);\n\n        return id;\n    }\n\n    @Override\n    public int createOrderWithLimitAndRedis(int sid) throws Exception {\n        // \u6821\u9a8c\u5e93\u5b58\uff0c\u4ece Redis \u4e2d\u83b7\u53d6\n        Stock stock = checkStockWithRedis(sid);\n        // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548cRedis\n        saleStockOptimsticWithRedis(stock);\n        // \u521b\u5efa\u8ba2\u5355\n        int res = createOrder(stock);\n\n        return res;\n    }\n\n    @Override\n    public void createOrderWithLimitAndRedisAndKafka(int sid) throws Exception {\n        // \u6821\u9a8c\u5e93\u5b58\n        Stock stock = checkStockWithRedis(sid);\n        // \u4e0b\u5355\u8bf7\u6c42\u53d1\u9001\u81f3 kafka\uff0c\u9700\u8981\u5e8f\u5217\u5316 stock\n        kafkaTemplate.send(kafkaTopic, gson.toJson(stock));\n        log.info(\"\u6d88\u606f\u53d1\u9001\u81f3 Kafka \u6210\u529f\");\n    }\n\n    @Override\n    public int consumerTopicToCreateOrderWithKafka(Stock stock) throws Exception {\n        // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548c Redis\n        saleStockOptimsticWithRedis(stock);\n        int res = createOrder(stock);\n\n        return res;\n    }\n\n    /**\n     * Redis \u6821\u9a8c\u5e93\u5b58\n     *\n     * @param sid\n     */\n    private Stock checkStockWithRedis(int sid) throws Exception {\n        Integer count = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_COUNT + sid));\n        Integer sale = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_SALE + sid));\n        Integer version = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_VERSION + sid));\n        if (count < 1) {\n            log.info(\"\u5e93\u5b58\u4e0d\u8db3\");\n            throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3 Redis currentCount: \" + sale);\n        }\n        Stock stock = new Stock();\n        stock.setId(sid);\n        stock.setCount(count);\n        stock.setSale(sale);\n        stock.setVersion(version);\n        // \u6b64\u5904\u5e94\u8be5\u662f\u70ed\u66f4\u65b0\uff0c\u4f46\u662f\u5728\u6570\u636e\u5e93\u4e2d\u53ea\u6709\u4e00\u4e2a\u5546\u54c1\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\n        stock.setName(\"\u624b\u673a\");\n\n        return stock;\n    }\n\n    /**\n     * \u66f4\u65b0\u6570\u636e\u5e93\u548c DB\n     */\n    private void saleStockOptimsticWithRedis(Stock stock) throws Exception {\n        int res = stockService.updateStockByOptimistic(stock);\n        if (res == 0){\n            throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\") ;\n        }\n        // \u66f4\u65b0 Redis\n        StockWithRedis.updateStockWithRedis(stock);\n    }\n\n    /**\n     * \u6821\u9a8c\u5e93\u5b58\n     */\n    private Stock checkStock(int sid) throws Exception {\n        Stock stock = stockService.getStockById(sid);\n        if (stock.getCount() < 1) {\n            throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3\");\n        }\n        return stock;\n    }\n\n    /**\n     * \u6263\u5e93\u5b58\n     */\n    private int saleStock(Stock stock) {\n        stock.setSale(stock.getSale() + 1);\n        stock.setCount(stock.getCount() - 1);\n        return stockService.updateStockById(stock);\n    }\n\n    /**\n     * \u4e50\u89c2\u9501\u6263\u5e93\u5b58\n     */\n    private void saleStockOptimstic(Stock stock) throws Exception {\n        int count = stockService.updateStockByOptimistic(stock);\n        if (count == 0) {\n            throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\");\n        }\n    }\n\n    /**\n     * \u521b\u5efa\u8ba2\u5355\n     */\n    private int createOrder(Stock stock) throws Exception {\n        StockOrder order = new StockOrder();\n        order.setSid(stock.getId());\n        order.setName(stock.getName());\n        order.setCreateTime(new Date());\n        int res = orderMapper.insertSelective(order);\n        if (res == 0) {\n            throw new RuntimeException(\"\u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n        }\n        return res;\n    }\n}",
        "start_point": {
            "row": 26,
            "column": 0
        },
        "end_point": {
            "row": 181,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "@Override\npublic int delOrderDBBefore() {\n    return orderMapper.delOrderDBBefore();\n}",
                "name": "delOrderDBBefore",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n    return orderMapper.delOrderDBBefore();\n}",
                "start_point": {
                    "row": 45,
                    "column": 4
                },
                "end_point": {
                    "row": 48,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic int createWrongOrder(int sid) throws Exception {\n    Stock stock = checkStock(sid);\n    saleStock(stock);\n    int res = createOrder(stock);\n\n    return res;\n}",
                "name": "createWrongOrder",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    Stock stock = checkStock(sid);\n    saleStock(stock);\n    int res = createOrder(stock);\n\n    return res;\n}",
                "start_point": {
                    "row": 50,
                    "column": 4
                },
                "end_point": {
                    "row": 57,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic int createOptimisticOrder(int sid) throws Exception {\n    // \u6821\u9a8c\u5e93\u5b58\n    Stock stock = checkStock(sid);\n    // \u4e50\u89c2\u9501\u66f4\u65b0\n    saleStockOptimstic(stock);\n    // \u521b\u5efa\u8ba2\u5355\n    int id = createOrder(stock);\n\n    return id;\n}",
                "name": "createOptimisticOrder",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    // \u6821\u9a8c\u5e93\u5b58\n    Stock stock = checkStock(sid);\n    // \u4e50\u89c2\u9501\u66f4\u65b0\n    saleStockOptimstic(stock);\n    // \u521b\u5efa\u8ba2\u5355\n    int id = createOrder(stock);\n\n    return id;\n}",
                "start_point": {
                    "row": 59,
                    "column": 4
                },
                "end_point": {
                    "row": 69,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic int createOrderWithLimitAndRedis(int sid) throws Exception {\n    // \u6821\u9a8c\u5e93\u5b58\uff0c\u4ece Redis \u4e2d\u83b7\u53d6\n    Stock stock = checkStockWithRedis(sid);\n    // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548cRedis\n    saleStockOptimsticWithRedis(stock);\n    // \u521b\u5efa\u8ba2\u5355\n    int res = createOrder(stock);\n\n    return res;\n}",
                "name": "createOrderWithLimitAndRedis",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    // \u6821\u9a8c\u5e93\u5b58\uff0c\u4ece Redis \u4e2d\u83b7\u53d6\n    Stock stock = checkStockWithRedis(sid);\n    // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548cRedis\n    saleStockOptimsticWithRedis(stock);\n    // \u521b\u5efa\u8ba2\u5355\n    int res = createOrder(stock);\n\n    return res;\n}",
                "start_point": {
                    "row": 71,
                    "column": 4
                },
                "end_point": {
                    "row": 81,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void createOrderWithLimitAndRedisAndKafka(int sid) throws Exception {\n    // \u6821\u9a8c\u5e93\u5b58\n    Stock stock = checkStockWithRedis(sid);\n    // \u4e0b\u5355\u8bf7\u6c42\u53d1\u9001\u81f3 kafka\uff0c\u9700\u8981\u5e8f\u5217\u5316 stock\n    kafkaTemplate.send(kafkaTopic, gson.toJson(stock));\n    log.info(\"\u6d88\u606f\u53d1\u9001\u81f3 Kafka \u6210\u529f\");\n}",
                "name": "createOrderWithLimitAndRedisAndKafka",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    // \u6821\u9a8c\u5e93\u5b58\n    Stock stock = checkStockWithRedis(sid);\n    // \u4e0b\u5355\u8bf7\u6c42\u53d1\u9001\u81f3 kafka\uff0c\u9700\u8981\u5e8f\u5217\u5316 stock\n    kafkaTemplate.send(kafkaTopic, gson.toJson(stock));\n    log.info(\"\u6d88\u606f\u53d1\u9001\u81f3 Kafka \u6210\u529f\");\n}",
                "start_point": {
                    "row": 83,
                    "column": 4
                },
                "end_point": {
                    "row": 90,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic int consumerTopicToCreateOrderWithKafka(Stock stock) throws Exception {\n    // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548c Redis\n    saleStockOptimsticWithRedis(stock);\n    int res = createOrder(stock);\n\n    return res;\n}",
                "name": "consumerTopicToCreateOrderWithKafka",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Stock",
                        "name": "stock"
                    }
                ],
                "body": "{\n    // \u4e50\u89c2\u9501\u66f4\u65b0\u5e93\u5b58\u548c Redis\n    saleStockOptimsticWithRedis(stock);\n    int res = createOrder(stock);\n\n    return res;\n}",
                "start_point": {
                    "row": 92,
                    "column": 4
                },
                "end_point": {
                    "row": 99,
                    "column": 5
                }
            },
            {
                "definition": "private Stock checkStockWithRedis(int sid) throws Exception {\n    Integer count = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_COUNT + sid));\n    Integer sale = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_SALE + sid));\n    Integer version = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_VERSION + sid));\n    if (count < 1) {\n        log.info(\"\u5e93\u5b58\u4e0d\u8db3\");\n        throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3 Redis currentCount: \" + sale);\n    }\n    Stock stock = new Stock();\n    stock.setId(sid);\n    stock.setCount(count);\n    stock.setSale(sale);\n    stock.setVersion(version);\n    // \u6b64\u5904\u5e94\u8be5\u662f\u70ed\u66f4\u65b0\uff0c\u4f46\u662f\u5728\u6570\u636e\u5e93\u4e2d\u53ea\u6709\u4e00\u4e2a\u5546\u54c1\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\n    stock.setName(\"\u624b\u673a\");\n\n    return stock;\n}",
                "name": "checkStockWithRedis",
                "modifiers": "private",
                "return_type": "Stock",
                "parameters": [
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    Integer count = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_COUNT + sid));\n    Integer sale = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_SALE + sid));\n    Integer version = Integer.parseInt(RedisPoolUtil.get(RedisKeysConstant.STOCK_VERSION + sid));\n    if (count < 1) {\n        log.info(\"\u5e93\u5b58\u4e0d\u8db3\");\n        throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3 Redis currentCount: \" + sale);\n    }\n    Stock stock = new Stock();\n    stock.setId(sid);\n    stock.setCount(count);\n    stock.setSale(sale);\n    stock.setVersion(version);\n    // \u6b64\u5904\u5e94\u8be5\u662f\u70ed\u66f4\u65b0\uff0c\u4f46\u662f\u5728\u6570\u636e\u5e93\u4e2d\u53ea\u6709\u4e00\u4e2a\u5546\u54c1\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\n    stock.setName(\"\u624b\u673a\");\n\n    return stock;\n}",
                "start_point": {
                    "row": 106,
                    "column": 4
                },
                "end_point": {
                    "row": 123,
                    "column": 5
                }
            },
            {
                "definition": "private void saleStockOptimsticWithRedis(Stock stock) throws Exception {\n    int res = stockService.updateStockByOptimistic(stock);\n    if (res == 0){\n        throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\") ;\n    }\n    // \u66f4\u65b0 Redis\n    StockWithRedis.updateStockWithRedis(stock);\n}",
                "name": "saleStockOptimsticWithRedis",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Stock",
                        "name": "stock"
                    }
                ],
                "body": "{\n    int res = stockService.updateStockByOptimistic(stock);\n    if (res == 0){\n        throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\") ;\n    }\n    // \u66f4\u65b0 Redis\n    StockWithRedis.updateStockWithRedis(stock);\n}",
                "start_point": {
                    "row": 128,
                    "column": 4
                },
                "end_point": {
                    "row": 135,
                    "column": 5
                }
            },
            {
                "definition": "private Stock checkStock(int sid) throws Exception {\n    Stock stock = stockService.getStockById(sid);\n    if (stock.getCount() < 1) {\n        throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3\");\n    }\n    return stock;\n}",
                "name": "checkStock",
                "modifiers": "private",
                "return_type": "Stock",
                "parameters": [
                    {
                        "type": "int",
                        "name": "sid"
                    }
                ],
                "body": "{\n    Stock stock = stockService.getStockById(sid);\n    if (stock.getCount() < 1) {\n        throw new RuntimeException(\"\u5e93\u5b58\u4e0d\u8db3\");\n    }\n    return stock;\n}",
                "start_point": {
                    "row": 140,
                    "column": 4
                },
                "end_point": {
                    "row": 146,
                    "column": 5
                }
            },
            {
                "definition": "private int saleStock(Stock stock) {\n    stock.setSale(stock.getSale() + 1);\n    stock.setCount(stock.getCount() - 1);\n    return stockService.updateStockById(stock);\n}",
                "name": "saleStock",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Stock",
                        "name": "stock"
                    }
                ],
                "body": "{\n    stock.setSale(stock.getSale() + 1);\n    stock.setCount(stock.getCount() - 1);\n    return stockService.updateStockById(stock);\n}",
                "start_point": {
                    "row": 151,
                    "column": 4
                },
                "end_point": {
                    "row": 155,
                    "column": 5
                }
            },
            {
                "definition": "private void saleStockOptimstic(Stock stock) throws Exception {\n    int count = stockService.updateStockByOptimistic(stock);\n    if (count == 0) {\n        throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\");\n    }\n}",
                "name": "saleStockOptimstic",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Stock",
                        "name": "stock"
                    }
                ],
                "body": "{\n    int count = stockService.updateStockByOptimistic(stock);\n    if (count == 0) {\n        throw new RuntimeException(\"\u5e76\u53d1\u66f4\u65b0\u5e93\u5b58\u5931\u8d25\");\n    }\n}",
                "start_point": {
                    "row": 160,
                    "column": 4
                },
                "end_point": {
                    "row": 165,
                    "column": 5
                }
            },
            {
                "definition": "private int createOrder(Stock stock) throws Exception {\n    StockOrder order = new StockOrder();\n    order.setSid(stock.getId());\n    order.setName(stock.getName());\n    order.setCreateTime(new Date());\n    int res = orderMapper.insertSelective(order);\n    if (res == 0) {\n        throw new RuntimeException(\"\u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n    }\n    return res;\n}",
                "name": "createOrder",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Stock",
                        "name": "stock"
                    }
                ],
                "body": "{\n    StockOrder order = new StockOrder();\n    order.setSid(stock.getId());\n    order.setName(stock.getName());\n    order.setCreateTime(new Date());\n    int res = orderMapper.insertSelective(order);\n    if (res == 0) {\n        throw new RuntimeException(\"\u521b\u5efa\u8ba2\u5355\u5931\u8d25\");\n    }\n    return res;\n}",
                "start_point": {
                    "row": 170,
                    "column": 4
                },
                "end_point": {
                    "row": 180,
                    "column": 5
                }
            }
        ]
    }
]