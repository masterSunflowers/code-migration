[
    {
        "rev_path": "src/main/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "definition": "public final class PacketTestSuite {\n\n    public static interface Helper {\n\tpublic void assertEquals(Object expected, Object actual);\n\n\tpublic void assertTrue(String message, boolean condition);\n\n\tpublic IPacket createPacket(String nodeName);\n\n\tpublic void log(String message);\n    }\n\n    private static class HelperExtended implements Helper {\n\tprivate final Helper delegate;\n\n\tpublic HelperExtended(final Helper delegate) {\n\t    this.delegate = delegate;\n\t}\n\n\tpublic void assertEquals(final Object expected, final Object actual) {\n\t    delegate.assertEquals(expected, actual);\n\t}\n\n\tpublic void assertFalse(final boolean condition) {\n\t    assertTrue(\"\", !condition);\n\t}\n\n\tpublic void assertNotNull(final Object o) {\n\t    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\t}\n\n\tpublic void assertNull(final Object value) {\n\t    assertTrue(\"should be null: \" + safeString(value), value == null);\n\t}\n\n\tpublic void assertSame(final Object expected, final Object actual) {\n\t    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t\t    expected == actual);\n\t}\n\n\tpublic void assertTrue(final boolean condition) {\n\t    assertTrue(\"\", condition);\n\t}\n\n\tpublic void assertTrue(final String message, final boolean condition) {\n\t    delegate.assertTrue(message, condition);\n\t}\n\n\tpublic IPacket createPacket(final String nodeName) {\n\t    return delegate.createPacket(nodeName);\n\t}\n\n\tpublic void log(final String message) {\n\t    delegate.log(message);\n\t}\n\n\tpublic String safeString(final Object value) {\n\t    return value == null ? \"[null]\" : value.toString();\n\t}\n\n    }\n\n    public static void runPacketTests(final Helper utility) {\n\tfinal HelperExtended helper = new HelperExtended(utility);\n\tshouldNeverReturnNullWhenGetChildren(helper);\n\tshouldReturnNoPacketWhenGetFirstChild(helper);\n\tshouldSetAndClearTheAttributes(helper);\n\tshouldSetText(helper);\n\tshouldRemoveChildIfPresent(helper);\n\tshouldRenderAttributes(helper);\n\tshouldRenderChilds(helper);\n\tshouldRenderTextChildren(helper);\n\tshouldScapeText(helper);\n    }\n\n    private static void shouldNeverReturnNullWhenGetChildren(final HelperExtended helper) {\n\thelper.log(\"- shouldNeverReturnNullWhenGetChildren\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal List<? extends IPacket> children = packet.getChildren();\n\thelper.assertNotNull(children);\n\thelper.assertEquals(0, children.size());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRemoveChildIfPresent(final HelperExtended helper) {\n\thelper.log(\"- shouldRemoveChildIfPresent\");\n\tfinal IPacket root = helper.createPacket(\"packet\");\n\thelper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\n\tfinal IPacket child = root.addChild(\"child\", null);\n\thelper.assertEquals(1, root.getChildrenCount());\n\thelper.assertTrue(root.removeChild(child));\n\thelper.assertEquals(0, root.getChildrenCount());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRenderAttributes(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\n\thelper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderChilds(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"level0\");\n\tfinal IPacket child = packet.addChild(\"level1\", null);\n\tchild.addChild(\"level2\", null);\n\thelper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderTextChildren(final HelperExtended helper) {\n\tfinal IPacket root = helper.createPacket(\"root\");\n\troot.setText(\"the text\");\n\thelper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n    }\n\n    private static void shouldReturnNoPacketWhenGetFirstChild(final HelperExtended helper) {\n\thelper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal IPacket child = packet.getFirstChild(\"child\");\n\thelper.assertNotNull(child);\n\thelper.assertSame(NoPacket.INSTANCE, child);\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldScapeText(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"body\");\n\tpacket.setText(\"&\");\n\thelper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n    }\n\n    private static void shouldSetAndClearTheAttributes(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setAttribute(\"name\", \"value\");\n\thelper.assertEquals(\"value\", packet.getAttribute(\"name\"));\n\tpacket.setAttribute(\"name\", null);\n\thelper.assertNull(packet.getAttribute(\"name\"));\n\thelper.assertFalse(packet.hasAttribute(\"name\"));\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldSetText(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setText(\"text1\");\n\thelper.assertEquals(\"text1\", packet.getText());\n\tpacket.setText(\"text2\");\n\thelper.assertEquals(\"text2\", packet.getText());\n\thelper.log(\"- test ends\");\n    }\n\n}",
        "package": "package com.calclab.emite.core.client.packet;",
        "tree_path": "PacketTestSuite",
        "name": "PacketTestSuite",
        "modifiers": "public final",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public static interface Helper {\n\tpublic void assertEquals(Object expected, Object actual);\n\n\tpublic void assertTrue(String message, boolean condition);\n\n\tpublic IPacket createPacket(String nodeName);\n\n\tpublic void log(String message);\n    }\n\n    private static class HelperExtended implements Helper {\n\tprivate final Helper delegate;\n\n\tpublic HelperExtended(final Helper delegate) {\n\t    this.delegate = delegate;\n\t}\n\n\tpublic void assertEquals(final Object expected, final Object actual) {\n\t    delegate.assertEquals(expected, actual);\n\t}\n\n\tpublic void assertFalse(final boolean condition) {\n\t    assertTrue(\"\", !condition);\n\t}\n\n\tpublic void assertNotNull(final Object o) {\n\t    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\t}\n\n\tpublic void assertNull(final Object value) {\n\t    assertTrue(\"should be null: \" + safeString(value), value == null);\n\t}\n\n\tpublic void assertSame(final Object expected, final Object actual) {\n\t    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t\t    expected == actual);\n\t}\n\n\tpublic void assertTrue(final boolean condition) {\n\t    assertTrue(\"\", condition);\n\t}\n\n\tpublic void assertTrue(final String message, final boolean condition) {\n\t    delegate.assertTrue(message, condition);\n\t}\n\n\tpublic IPacket createPacket(final String nodeName) {\n\t    return delegate.createPacket(nodeName);\n\t}\n\n\tpublic void log(final String message) {\n\t    delegate.log(message);\n\t}\n\n\tpublic String safeString(final Object value) {\n\t    return value == null ? \"[null]\" : value.toString();\n\t}\n\n    }\n\n    public static void runPacketTests(final Helper utility) {\n\tfinal HelperExtended helper = new HelperExtended(utility);\n\tshouldNeverReturnNullWhenGetChildren(helper);\n\tshouldReturnNoPacketWhenGetFirstChild(helper);\n\tshouldSetAndClearTheAttributes(helper);\n\tshouldSetText(helper);\n\tshouldRemoveChildIfPresent(helper);\n\tshouldRenderAttributes(helper);\n\tshouldRenderChilds(helper);\n\tshouldRenderTextChildren(helper);\n\tshouldScapeText(helper);\n    }\n\n    private static void shouldNeverReturnNullWhenGetChildren(final HelperExtended helper) {\n\thelper.log(\"- shouldNeverReturnNullWhenGetChildren\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal List<? extends IPacket> children = packet.getChildren();\n\thelper.assertNotNull(children);\n\thelper.assertEquals(0, children.size());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRemoveChildIfPresent(final HelperExtended helper) {\n\thelper.log(\"- shouldRemoveChildIfPresent\");\n\tfinal IPacket root = helper.createPacket(\"packet\");\n\thelper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\n\tfinal IPacket child = root.addChild(\"child\", null);\n\thelper.assertEquals(1, root.getChildrenCount());\n\thelper.assertTrue(root.removeChild(child));\n\thelper.assertEquals(0, root.getChildrenCount());\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldRenderAttributes(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\n\thelper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderChilds(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"level0\");\n\tfinal IPacket child = packet.addChild(\"level1\", null);\n\tchild.addChild(\"level2\", null);\n\thelper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n    }\n\n    private static void shouldRenderTextChildren(final HelperExtended helper) {\n\tfinal IPacket root = helper.createPacket(\"root\");\n\troot.setText(\"the text\");\n\thelper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n    }\n\n    private static void shouldReturnNoPacketWhenGetFirstChild(final HelperExtended helper) {\n\thelper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\n\tfinal IPacket packet = helper.createPacket(\"root\");\n\tfinal IPacket child = packet.getFirstChild(\"child\");\n\thelper.assertNotNull(child);\n\thelper.assertSame(NoPacket.INSTANCE, child);\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldScapeText(final HelperExtended helper) {\n\tfinal IPacket packet = helper.createPacket(\"body\");\n\tpacket.setText(\"&\");\n\thelper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n    }\n\n    private static void shouldSetAndClearTheAttributes(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setAttribute(\"name\", \"value\");\n\thelper.assertEquals(\"value\", packet.getAttribute(\"name\"));\n\tpacket.setAttribute(\"name\", null);\n\thelper.assertNull(packet.getAttribute(\"name\"));\n\thelper.assertFalse(packet.hasAttribute(\"name\"));\n\thelper.log(\"- test ends\");\n    }\n\n    private static void shouldSetText(final HelperExtended helper) {\n\thelper.log(\"- shouldSetAndClearTheAttributes\");\n\tfinal IPacket packet = helper.createPacket(\"packet\");\n\tpacket.setText(\"text1\");\n\thelper.assertEquals(\"text1\", packet.getText());\n\tpacket.setText(\"text2\");\n\thelper.assertEquals(\"text2\", packet.getText());\n\thelper.log(\"- test ends\");\n    }\n\n}",
        "start_point": {
            "row": 28,
            "column": 0
        },
        "end_point": {
            "row": 177,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "methods": [
            {
                "definition": "public static void runPacketTests(final Helper utility) {\nal HelperExtended helper = new HelperExtended(utility);\nuldNeverReturnNullWhenGetChildren(helper);\nuldReturnNoPacketWhenGetFirstChild(helper);\nuldSetAndClearTheAttributes(helper);\nuldSetText(helper);\nuldRemoveChildIfPresent(helper);\nuldRenderAttributes(helper);\nuldRenderChilds(helper);\nuldRenderTextChildren(helper);\nuldScapeText(helper);\n}",
                "name": "runPacketTests",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Helper"
                    }
                ],
                "body": "{\nal HelperExtended helper = new HelperExtended(utility);\nuldNeverReturnNullWhenGetChildren(helper);\nuldReturnNoPacketWhenGetFirstChild(helper);\nuldSetAndClearTheAttributes(helper);\nuldSetText(helper);\nuldRemoveChildIfPresent(helper);\nuldRenderAttributes(helper);\nuldRenderChilds(helper);\nuldRenderTextChildren(helper);\nuldScapeText(helper);\n}",
                "start_point": {
                    "row": 90,
                    "column": 4
                },
                "end_point": {
                    "row": 101,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldNeverReturnNullWhenGetChildren(final HelperExtended helper) {\nper.log(\"- shouldNeverReturnNullWhenGetChildren\");\nal IPacket packet = helper.createPacket(\"root\");\nal List<? extends IPacket> children = packet.getChildren();\nper.assertNotNull(children);\nper.assertEquals(0, children.size());\nper.log(\"- test ends\");\n}",
                "name": "shouldNeverReturnNullWhenGetChildren",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldNeverReturnNullWhenGetChildren\");\nal IPacket packet = helper.createPacket(\"root\");\nal List<? extends IPacket> children = packet.getChildren();\nper.assertNotNull(children);\nper.assertEquals(0, children.size());\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 103,
                    "column": 4
                },
                "end_point": {
                    "row": 110,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRemoveChildIfPresent(final HelperExtended helper) {\nper.log(\"- shouldRemoveChildIfPresent\");\nal IPacket root = helper.createPacket(\"packet\");\nper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\nal IPacket child = root.addChild(\"child\", null);\nper.assertEquals(1, root.getChildrenCount());\nper.assertTrue(root.removeChild(child));\nper.assertEquals(0, root.getChildrenCount());\nper.log(\"- test ends\");\n}",
                "name": "shouldRemoveChildIfPresent",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldRemoveChildIfPresent\");\nal IPacket root = helper.createPacket(\"packet\");\nper.assertFalse(root.removeChild(helper.createPacket(\"otherPacket\")));\nal IPacket child = root.addChild(\"child\", null);\nper.assertEquals(1, root.getChildrenCount());\nper.assertTrue(root.removeChild(child));\nper.assertEquals(0, root.getChildrenCount());\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 112,
                    "column": 4
                },
                "end_point": {
                    "row": 121,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRenderAttributes(final HelperExtended helper) {\nal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\nper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n}",
                "name": "shouldRenderAttributes",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket packet = helper.createPacket(\"root\").With(\"attribute\", \"value\");\nper.assertEquals(\"<root attribute=\\\"value\\\" />\", PacketRenderer.toString(packet));\n}",
                "start_point": {
                    "row": 123,
                    "column": 4
                },
                "end_point": {
                    "row": 126,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRenderChilds(final HelperExtended helper) {\nal IPacket packet = helper.createPacket(\"level0\");\nal IPacket child = packet.addChild(\"level1\", null);\nld.addChild(\"level2\", null);\nper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n}",
                "name": "shouldRenderChilds",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket packet = helper.createPacket(\"level0\");\nal IPacket child = packet.addChild(\"level1\", null);\nld.addChild(\"level2\", null);\nper.assertEquals(\"<level0><level1><level2 /></level1></level0>\", PacketRenderer.toString(packet));\n}",
                "start_point": {
                    "row": 128,
                    "column": 4
                },
                "end_point": {
                    "row": 133,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldRenderTextChildren(final HelperExtended helper) {\nal IPacket root = helper.createPacket(\"root\");\nt.setText(\"the text\");\nper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n}",
                "name": "shouldRenderTextChildren",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket root = helper.createPacket(\"root\");\nt.setText(\"the text\");\nper.assertEquals(\"<root>the text</root>\", PacketRenderer.toString(root));\n}",
                "start_point": {
                    "row": 135,
                    "column": 4
                },
                "end_point": {
                    "row": 139,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldReturnNoPacketWhenGetFirstChild(final HelperExtended helper) {\nper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\nal IPacket packet = helper.createPacket(\"root\");\nal IPacket child = packet.getFirstChild(\"child\");\nper.assertNotNull(child);\nper.assertSame(NoPacket.INSTANCE, child);\nper.log(\"- test ends\");\n}",
                "name": "shouldReturnNoPacketWhenGetFirstChild",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldReturnNoPacketWhenGetFirstChild\");\nal IPacket packet = helper.createPacket(\"root\");\nal IPacket child = packet.getFirstChild(\"child\");\nper.assertNotNull(child);\nper.assertSame(NoPacket.INSTANCE, child);\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 141,
                    "column": 4
                },
                "end_point": {
                    "row": 148,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldScapeText(final HelperExtended helper) {\nal IPacket packet = helper.createPacket(\"body\");\nket.setText(\"&\");\nper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n}",
                "name": "shouldScapeText",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nal IPacket packet = helper.createPacket(\"body\");\nket.setText(\"&\");\nper.assertEquals(\"<body>&amp;</body>\", packet.toString());\n}",
                "start_point": {
                    "row": 150,
                    "column": 4
                },
                "end_point": {
                    "row": 154,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldSetAndClearTheAttributes(final HelperExtended helper) {\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setAttribute(\"name\", \"value\");\nper.assertEquals(\"value\", packet.getAttribute(\"name\"));\nket.setAttribute(\"name\", null);\nper.assertNull(packet.getAttribute(\"name\"));\nper.assertFalse(packet.hasAttribute(\"name\"));\nper.log(\"- test ends\");\n}",
                "name": "shouldSetAndClearTheAttributes",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setAttribute(\"name\", \"value\");\nper.assertEquals(\"value\", packet.getAttribute(\"name\"));\nket.setAttribute(\"name\", null);\nper.assertNull(packet.getAttribute(\"name\"));\nper.assertFalse(packet.hasAttribute(\"name\"));\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 156,
                    "column": 4
                },
                "end_point": {
                    "row": 165,
                    "column": 5
                }
            },
            {
                "definition": "private static void shouldSetText(final HelperExtended helper) {\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setText(\"text1\");\nper.assertEquals(\"text1\", packet.getText());\nket.setText(\"text2\");\nper.assertEquals(\"text2\", packet.getText());\nper.log(\"- test ends\");\n}",
                "name": "shouldSetText",
                "modifiers": "private static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "HelperExtended"
                    }
                ],
                "body": "{\nper.log(\"- shouldSetAndClearTheAttributes\");\nal IPacket packet = helper.createPacket(\"packet\");\nket.setText(\"text1\");\nper.assertEquals(\"text1\", packet.getText());\nket.setText(\"text2\");\nper.assertEquals(\"text2\", packet.getText());\nper.log(\"- test ends\");\n}",
                "start_point": {
                    "row": 167,
                    "column": 4
                },
                "end_point": {
                    "row": 175,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "definition": "private static class HelperExtended implements Helper {\nvate final Helper delegate;\n\nlic HelperExtended(final Helper delegate) {\n this.delegate = delegate;\n\n\nlic void assertEquals(final Object expected, final Object actual) {\n delegate.assertEquals(expected, actual);\n\n\nlic void assertFalse(final boolean condition) {\n assertTrue(\"\", !condition);\n\n\nlic void assertNotNull(final Object o) {\n assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\n\nlic void assertNull(final Object value) {\n assertTrue(\"should be null: \" + safeString(value), value == null);\n\n\nlic void assertSame(final Object expected, final Object actual) {\n assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n  expected == actual);\n\n\nlic void assertTrue(final boolean condition) {\n assertTrue(\"\", condition);\n\n\nlic void assertTrue(final String message, final boolean condition) {\n delegate.assertTrue(message, condition);\n\n\nlic IPacket createPacket(final String nodeName) {\n return delegate.createPacket(nodeName);\n\n\nlic void log(final String message) {\n delegate.log(message);\n\n\nlic String safeString(final Object value) {\n return value == null ? \"[null]\" : value.toString();\n\n\n}",
        "package": "package com.calclab.emite.core.client.packet;",
        "tree_path": "PacketTestSuite.HelperExtended",
        "name": "HelperExtended",
        "modifiers": "private static",
        "superclass": null,
        "super_interfaces": "implements Helper",
        "body": "{\nvate final Helper delegate;\n\nlic HelperExtended(final Helper delegate) {\n this.delegate = delegate;\n\n\nlic void assertEquals(final Object expected, final Object actual) {\n delegate.assertEquals(expected, actual);\n\n\nlic void assertFalse(final boolean condition) {\n assertTrue(\"\", !condition);\n\n\nlic void assertNotNull(final Object o) {\n assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n\n\nlic void assertNull(final Object value) {\n assertTrue(\"should be null: \" + safeString(value), value == null);\n\n\nlic void assertSame(final Object expected, final Object actual) {\n assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n  expected == actual);\n\n\nlic void assertTrue(final boolean condition) {\n assertTrue(\"\", condition);\n\n\nlic void assertTrue(final String message, final boolean condition) {\n delegate.assertTrue(message, condition);\n\n\nlic IPacket createPacket(final String nodeName) {\n return delegate.createPacket(nodeName);\n\n\nlic void log(final String message) {\n delegate.log(message);\n\n\nlic String safeString(final Object value) {\n return value == null ? \"[null]\" : value.toString();\n\n\n}",
        "start_point": {
            "row": 40,
            "column": 4
        },
        "end_point": {
            "row": 88,
            "column": 5
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/core/client/packet/PacketTestSuite.java",
        "methods": [
            {
                "definition": "public HelperExtended(final Helper delegate) {\n    this.delegate = delegate;\n}",
                "name": "HelperExtended",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Helper"
                    }
                ],
                "body": "{\n    this.delegate = delegate;\n}",
                "constructor": true,
                "start_point": {
                    "row": 43,
                    "column": 1
                },
                "end_point": {
                    "row": 45,
                    "column": 2
                }
            },
            {
                "definition": "public void assertEquals(final Object expected, final Object actual) {\n    delegate.assertEquals(expected, actual);\n}",
                "name": "assertEquals",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    delegate.assertEquals(expected, actual);\n}",
                "start_point": {
                    "row": 47,
                    "column": 1
                },
                "end_point": {
                    "row": 49,
                    "column": 2
                }
            },
            {
                "definition": "public void assertFalse(final boolean condition) {\n    assertTrue(\"\", !condition);\n}",
                "name": "assertFalse",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "boolean"
                    }
                ],
                "body": "{\n    assertTrue(\"\", !condition);\n}",
                "start_point": {
                    "row": 51,
                    "column": 1
                },
                "end_point": {
                    "row": 53,
                    "column": 2
                }
            },
            {
                "definition": "public void assertNotNull(final Object o) {\n    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n}",
                "name": "assertNotNull",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    assertTrue(\"should be NOT null: \" + safeString(o), o != null);\n}",
                "start_point": {
                    "row": 55,
                    "column": 1
                },
                "end_point": {
                    "row": 57,
                    "column": 2
                }
            },
            {
                "definition": "public void assertNull(final Object value) {\n    assertTrue(\"should be null: \" + safeString(value), value == null);\n}",
                "name": "assertNull",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    assertTrue(\"should be null: \" + safeString(value), value == null);\n}",
                "start_point": {
                    "row": 59,
                    "column": 1
                },
                "end_point": {
                    "row": 61,
                    "column": 2
                }
            },
            {
                "definition": "public void assertSame(final Object expected, final Object actual) {\n    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t    expected == actual);\n}",
                "name": "assertSame",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    assertTrue(\"should be same: \" + safeString(expected) + \" but was: \" + safeString(actual),\n\t    expected == actual);\n}",
                "start_point": {
                    "row": 63,
                    "column": 1
                },
                "end_point": {
                    "row": 66,
                    "column": 2
                }
            },
            {
                "definition": "public void assertTrue(final boolean condition) {\n    assertTrue(\"\", condition);\n}",
                "name": "assertTrue",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "boolean"
                    }
                ],
                "body": "{\n    assertTrue(\"\", condition);\n}",
                "start_point": {
                    "row": 68,
                    "column": 1
                },
                "end_point": {
                    "row": 70,
                    "column": 2
                }
            },
            {
                "definition": "public void assertTrue(final String message, final boolean condition) {\n    delegate.assertTrue(message, condition);\n}",
                "name": "assertTrue",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "boolean"
                    }
                ],
                "body": "{\n    delegate.assertTrue(message, condition);\n}",
                "start_point": {
                    "row": 72,
                    "column": 1
                },
                "end_point": {
                    "row": 74,
                    "column": 2
                }
            },
            {
                "definition": "public IPacket createPacket(final String nodeName) {\n    return delegate.createPacket(nodeName);\n}",
                "name": "createPacket",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n    return delegate.createPacket(nodeName);\n}",
                "start_point": {
                    "row": 76,
                    "column": 1
                },
                "end_point": {
                    "row": 78,
                    "column": 2
                }
            },
            {
                "definition": "public void log(final String message) {\n    delegate.log(message);\n}",
                "name": "log",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n    delegate.log(message);\n}",
                "start_point": {
                    "row": 80,
                    "column": 1
                },
                "end_point": {
                    "row": 82,
                    "column": 2
                }
            },
            {
                "definition": "public String safeString(final Object value) {\n    return value == null ? \"[null]\" : value.toString();\n}",
                "name": "safeString",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    return value == null ? \"[null]\" : value.toString();\n}",
                "start_point": {
                    "row": 84,
                    "column": 1
                },
                "end_point": {
                    "row": 86,
                    "column": 2
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/ConnectionTester.java",
        "definition": "public class ConnectionTester extends AbstractConnection implements Connection {\n\n    private boolean isConnected;\n    private boolean paused;\n    private boolean streamRestarted;\n    private ConnectionSettings settings;\n    private final TigaseXMLService xmler;\n    private final ArrayList<IPacket> sent;\n    private final ArrayList<IPacket> received;\n    private final EmiteEventBus eventBus;\n\n    public ConnectionTester() {\n\tsuper(new XmppBoshConnection(EmiteTestsEventBus.create(\"et\"), new ServicesTester()));\n\teventBus = delegate.getEventBus();\n\txmler = new TigaseXMLService();\n\tsent = new ArrayList<IPacket>();\n\treceived = new ArrayList<IPacket>();\n    }\n\n    @Override\n    public void connect() {\n\tisConnected = true;\n    }\n\n    @Override\n    public void disconnect() {\n\tisConnected = false;\n    }\n\n    public EmiteEventBus getEventBus() {\n\treturn eventBus;\n    }\n\n    public int getSentSize() {\n\treturn sent.size();\n    }\n\n    public ConnectionSettings getSettings() {\n\treturn settings;\n    }\n\n    @Override\n    public boolean hasErrors() {\n\treturn false;\n    }\n\n    public boolean hasSent(final IPacket packet) {\n\tfinal IsPacketLike matcher = new IsPacketLike(packet);\n\tfor (final IPacket stanza : sent) {\n\t    if (matcher.matches(stanza, System.out)) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;\n    }\n\n    @Override\n    public boolean isConnected() {\n\treturn isConnected;\n    }\n\n    public boolean isStreamRestarted() {\n\treturn streamRestarted;\n    }\n\n    @Override\n    public StreamSettings pause() {\n\tpaused = true;\n\treturn null;\n    }\n\n    public void receives(final IPacket stanza) {\n\treceived.add(stanza);\n\teventBus.fireEvent(new StanzaReceivedEvent(stanza));\n    }\n\n    public void receives(final String stanza) {\n\treceives(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void restartStream() {\n\tstreamRestarted = true;\n    }\n\n    @Override\n    public boolean resume(final StreamSettings settings) {\n\tif (paused) {\n\t    paused = false;\n\t    return true;\n\t}\n\treturn false;\n    }\n\n    @Override\n    public void send(final IPacket packet) {\n\tsent.add(packet);\n\teventBus.fireEvent(new StanzaSentEvent(packet));\n    }\n\n    public void send(final String stanza) {\n\tsend(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void setSettings(final ConnectionSettings settings) {\n\tthis.settings = settings;\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "ConnectionTester",
        "name": "ConnectionTester",
        "modifiers": "public",
        "superclass": "extends AbstractConnection",
        "super_interfaces": "implements Connection",
        "body": "{\n\n    private boolean isConnected;\n    private boolean paused;\n    private boolean streamRestarted;\n    private ConnectionSettings settings;\n    private final TigaseXMLService xmler;\n    private final ArrayList<IPacket> sent;\n    private final ArrayList<IPacket> received;\n    private final EmiteEventBus eventBus;\n\n    public ConnectionTester() {\n\tsuper(new XmppBoshConnection(EmiteTestsEventBus.create(\"et\"), new ServicesTester()));\n\teventBus = delegate.getEventBus();\n\txmler = new TigaseXMLService();\n\tsent = new ArrayList<IPacket>();\n\treceived = new ArrayList<IPacket>();\n    }\n\n    @Override\n    public void connect() {\n\tisConnected = true;\n    }\n\n    @Override\n    public void disconnect() {\n\tisConnected = false;\n    }\n\n    public EmiteEventBus getEventBus() {\n\treturn eventBus;\n    }\n\n    public int getSentSize() {\n\treturn sent.size();\n    }\n\n    public ConnectionSettings getSettings() {\n\treturn settings;\n    }\n\n    @Override\n    public boolean hasErrors() {\n\treturn false;\n    }\n\n    public boolean hasSent(final IPacket packet) {\n\tfinal IsPacketLike matcher = new IsPacketLike(packet);\n\tfor (final IPacket stanza : sent) {\n\t    if (matcher.matches(stanza, System.out)) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;\n    }\n\n    @Override\n    public boolean isConnected() {\n\treturn isConnected;\n    }\n\n    public boolean isStreamRestarted() {\n\treturn streamRestarted;\n    }\n\n    @Override\n    public StreamSettings pause() {\n\tpaused = true;\n\treturn null;\n    }\n\n    public void receives(final IPacket stanza) {\n\treceived.add(stanza);\n\teventBus.fireEvent(new StanzaReceivedEvent(stanza));\n    }\n\n    public void receives(final String stanza) {\n\treceives(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void restartStream() {\n\tstreamRestarted = true;\n    }\n\n    @Override\n    public boolean resume(final StreamSettings settings) {\n\tif (paused) {\n\t    paused = false;\n\t    return true;\n\t}\n\treturn false;\n    }\n\n    @Override\n    public void send(final IPacket packet) {\n\tsent.add(packet);\n\teventBus.fireEvent(new StanzaSentEvent(packet));\n    }\n\n    public void send(final String stanza) {\n\tsend(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void setSettings(final ConnectionSettings settings) {\n\tthis.settings = settings;\n    }\n\n}",
        "start_point": {
            "row": 21,
            "column": 0
        },
        "end_point": {
            "row": 130,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/ConnectionTester.java",
        "methods": [
            {
                "definition": "public ConnectionTester() {\ner(new XmppBoshConnection(EmiteTestsEventBus.create(\"et\"), new ServicesTester()));\nntBus = delegate.getEventBus();\ner = new TigaseXMLService();\nt = new ArrayList<IPacket>();\neived = new ArrayList<IPacket>();\n}",
                "name": "ConnectionTester",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ner(new XmppBoshConnection(EmiteTestsEventBus.create(\"et\"), new ServicesTester()));\nntBus = delegate.getEventBus();\ner = new TigaseXMLService();\nt = new ArrayList<IPacket>();\neived = new ArrayList<IPacket>();\n}",
                "constructor": true,
                "start_point": {
                    "row": 32,
                    "column": 4
                },
                "end_point": {
                    "row": 38,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void connect() {\nonnected = true;\n}",
                "name": "connect",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nonnected = true;\n}",
                "start_point": {
                    "row": 40,
                    "column": 4
                },
                "end_point": {
                    "row": 43,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void disconnect() {\nonnected = false;\n}",
                "name": "disconnect",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nonnected = false;\n}",
                "start_point": {
                    "row": 45,
                    "column": 4
                },
                "end_point": {
                    "row": 48,
                    "column": 5
                }
            },
            {
                "definition": "public EmiteEventBus getEventBus() {\nurn eventBus;\n}",
                "name": "getEventBus",
                "modifiers": "public",
                "return_type": "EmiteEventBus",
                "parameters": [],
                "body": "{\nurn eventBus;\n}",
                "start_point": {
                    "row": 50,
                    "column": 4
                },
                "end_point": {
                    "row": 52,
                    "column": 5
                }
            },
            {
                "definition": "public int getSentSize() {\nurn sent.size();\n}",
                "name": "getSentSize",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn sent.size();\n}",
                "start_point": {
                    "row": 54,
                    "column": 4
                },
                "end_point": {
                    "row": 56,
                    "column": 5
                }
            },
            {
                "definition": "public ConnectionSettings getSettings() {\nurn settings;\n}",
                "name": "getSettings",
                "modifiers": "public",
                "return_type": "ConnectionSettings",
                "parameters": [],
                "body": "{\nurn settings;\n}",
                "start_point": {
                    "row": 58,
                    "column": 4
                },
                "end_point": {
                    "row": 60,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean hasErrors() {\nurn false;\n}",
                "name": "hasErrors",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn false;\n}",
                "start_point": {
                    "row": 62,
                    "column": 4
                },
                "end_point": {
                    "row": 65,
                    "column": 5
                }
            },
            {
                "definition": "public boolean hasSent(final IPacket packet) {\nal IsPacketLike matcher = new IsPacketLike(packet);\n (final IPacket stanza : sent) {\n if (matcher.matches(stanza, System.out)) {\nturn true;\n }\n\nurn false;\n}",
                "name": "hasSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nal IsPacketLike matcher = new IsPacketLike(packet);\n (final IPacket stanza : sent) {\n if (matcher.matches(stanza, System.out)) {\nturn true;\n }\n\nurn false;\n}",
                "start_point": {
                    "row": 67,
                    "column": 4
                },
                "end_point": {
                    "row": 75,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean isConnected() {\nurn isConnected;\n}",
                "name": "isConnected",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn isConnected;\n}",
                "start_point": {
                    "row": 77,
                    "column": 4
                },
                "end_point": {
                    "row": 80,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isStreamRestarted() {\nurn streamRestarted;\n}",
                "name": "isStreamRestarted",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn streamRestarted;\n}",
                "start_point": {
                    "row": 82,
                    "column": 4
                },
                "end_point": {
                    "row": 84,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic StreamSettings pause() {\nsed = true;\nurn null;\n}",
                "name": "pause",
                "modifiers": "@Override\n    public",
                "return_type": "StreamSettings",
                "parameters": [],
                "body": "{\nsed = true;\nurn null;\n}",
                "start_point": {
                    "row": 86,
                    "column": 4
                },
                "end_point": {
                    "row": 90,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(final IPacket stanza) {\neived.add(stanza);\nntBus.fireEvent(new StanzaReceivedEvent(stanza));\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\neived.add(stanza);\nntBus.fireEvent(new StanzaReceivedEvent(stanza));\n}",
                "start_point": {
                    "row": 92,
                    "column": 4
                },
                "end_point": {
                    "row": 95,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(final String stanza) {\neives(xmler.toXML(stanza));\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\neives(xmler.toXML(stanza));\n}",
                "start_point": {
                    "row": 97,
                    "column": 4
                },
                "end_point": {
                    "row": 99,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void restartStream() {\neamRestarted = true;\n}",
                "name": "restartStream",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\neamRestarted = true;\n}",
                "start_point": {
                    "row": 101,
                    "column": 4
                },
                "end_point": {
                    "row": 104,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean resume(final StreamSettings settings) {\n(paused) {\n paused = false;\n return true;\n\nurn false;\n}",
                "name": "resume",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "StreamSettings"
                    }
                ],
                "body": "{\n(paused) {\n paused = false;\n return true;\n\nurn false;\n}",
                "start_point": {
                    "row": 106,
                    "column": 4
                },
                "end_point": {
                    "row": 113,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void send(final IPacket packet) {\nt.add(packet);\nntBus.fireEvent(new StanzaSentEvent(packet));\n}",
                "name": "send",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nt.add(packet);\nntBus.fireEvent(new StanzaSentEvent(packet));\n}",
                "start_point": {
                    "row": 115,
                    "column": 4
                },
                "end_point": {
                    "row": 119,
                    "column": 5
                }
            },
            {
                "definition": "public void send(final String stanza) {\nd(xmler.toXML(stanza));\n}",
                "name": "send",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nd(xmler.toXML(stanza));\n}",
                "start_point": {
                    "row": 121,
                    "column": 4
                },
                "end_point": {
                    "row": 123,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void setSettings(final ConnectionSettings settings) {\ns.settings = settings;\n}",
                "name": "setSettings",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "ConnectionSettings"
                    }
                ],
                "body": "{\ns.settings = settings;\n}",
                "start_point": {
                    "row": 125,
                    "column": 4
                },
                "end_point": {
                    "row": 128,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/EmiteTestsEventBus.java",
        "definition": "public class EmiteTestsEventBus extends HandlerManager implements EmiteEventBus {\n\n    private static Factory factory;\n\n    public static EmiteEventBus create(String eventBusName) {\n\tif (EmiteTestsEventBus.factory == null) {\n\t    EmiteTestsEventBus.factory = new Factory() {\n\t\t@Override\n\t\tpublic EmiteEventBus create(String eventBusName) {\n\t\t    return new EmiteTestsEventBus(eventBusName);\n\t\t}\n\t    };\n\t    EventBusFactory.setFactory(factory);\n\t}\n\treturn EventBusFactory.create(eventBusName);\n    }\n\n    private final String name;\n\n    public EmiteTestsEventBus(String name) {\n\tsuper(null);\n\tthis.name = name;\n\tSystem.out.println(\"New event bus: \" + name);\n    }\n\n    @Override\n    public void fireEvent(GwtEvent<?> event) {\n\tSystem.out.println(\"[\" + name + \"] \" + event.toDebugString());\n\tsuper.fireEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "EmiteTestsEventBus",
        "name": "EmiteTestsEventBus",
        "modifiers": "public",
        "superclass": "extends HandlerManager",
        "super_interfaces": "implements EmiteEventBus",
        "body": "{\n\n    private static Factory factory;\n\n    public static EmiteEventBus create(String eventBusName) {\n\tif (EmiteTestsEventBus.factory == null) {\n\t    EmiteTestsEventBus.factory = new Factory() {\n\t\t@Override\n\t\tpublic EmiteEventBus create(String eventBusName) {\n\t\t    return new EmiteTestsEventBus(eventBusName);\n\t\t}\n\t    };\n\t    EventBusFactory.setFactory(factory);\n\t}\n\treturn EventBusFactory.create(eventBusName);\n    }\n\n    private final String name;\n\n    public EmiteTestsEventBus(String name) {\n\tsuper(null);\n\tthis.name = name;\n\tSystem.out.println(\"New event bus: \" + name);\n    }\n\n    @Override\n    public void fireEvent(GwtEvent<?> event) {\n\tSystem.out.println(\"[\" + name + \"] \" + event.toDebugString());\n\tsuper.fireEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 8,
            "column": 0
        },
        "end_point": {
            "row": 39,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/EmiteTestsEventBus.java",
        "methods": [
            {
                "definition": "public static EmiteEventBus create(String eventBusName) {\n(EmiteTestsEventBus.factory == null) {\n EmiteTestsEventBus.factory = new Factory() {\nverride\nblic EmiteEventBus create(String eventBusName) {\n  return new EmiteTestsEventBus(eventBusName);\n\n };\n EventBusFactory.setFactory(factory);\n\nurn EventBusFactory.create(eventBusName);\n}",
                "name": "create",
                "modifiers": "public static",
                "return_type": "EmiteEventBus",
                "parameters": [
                    {
                        "type": "String",
                        "name": "eventBusName"
                    }
                ],
                "body": "{\n(EmiteTestsEventBus.factory == null) {\n EmiteTestsEventBus.factory = new Factory() {\nverride\nblic EmiteEventBus create(String eventBusName) {\n  return new EmiteTestsEventBus(eventBusName);\n\n };\n EventBusFactory.setFactory(factory);\n\nurn EventBusFactory.create(eventBusName);\n}",
                "start_point": {
                    "row": 12,
                    "column": 4
                },
                "end_point": {
                    "row": 23,
                    "column": 5
                }
            },
            {
                "definition": "public EmiteTestsEventBus(String name) {\ner(null);\ns.name = name;\ntem.out.println(\"New event bus: \" + name);\n}",
                "name": "EmiteTestsEventBus",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "String",
                        "name": "name"
                    }
                ],
                "body": "{\ner(null);\ns.name = name;\ntem.out.println(\"New event bus: \" + name);\n}",
                "constructor": true,
                "start_point": {
                    "row": 27,
                    "column": 4
                },
                "end_point": {
                    "row": 31,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void fireEvent(GwtEvent<?> event) {\ntem.out.println(\"[\" + name + \"] \" + event.toDebugString());\ner.fireEvent(event);\n}",
                "name": "fireEvent",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "GwtEvent<?>",
                        "name": "event"
                    }
                ],
                "body": "{\ntem.out.println(\"[\" + name + \"] \" + event.toDebugString());\ner.fireEvent(event);\n}",
                "start_point": {
                    "row": 33,
                    "column": 4
                },
                "end_point": {
                    "row": 37,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/RosterItemHelper.java",
        "definition": "public class RosterItemHelper {\n\n    public static RosterItem createItem(final String jid, final String name, final boolean isAvailable,\n\t    final String... groups) {\n\tfinal RosterItem item = new RosterItem(XmppURI.uri(jid), null, name, null);\n\tfor (final String group : groups) {\n\t    item.addToGroup(group);\n\t}\n\tString resource = item.getJID().getResource();\n\titem.setAvailable(isAvailable, resource);\n\treturn item;\n    }\n\n    public static RosterItem createItem(final String jid, final String name, final String... groups) {\n\treturn createItem(jid, name, false, groups);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "RosterItemHelper",
        "name": "RosterItemHelper",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public static RosterItem createItem(final String jid, final String name, final boolean isAvailable,\n\t    final String... groups) {\n\tfinal RosterItem item = new RosterItem(XmppURI.uri(jid), null, name, null);\n\tfor (final String group : groups) {\n\t    item.addToGroup(group);\n\t}\n\tString resource = item.getJID().getResource();\n\titem.setAvailable(isAvailable, resource);\n\treturn item;\n    }\n\n    public static RosterItem createItem(final String jid, final String name, final String... groups) {\n\treturn createItem(jid, name, false, groups);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 22,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/RosterItemHelper.java",
        "methods": [
            {
                "definition": "public static RosterItem createItem(final String jid, final String name, final boolean isAvailable,\n final String... groups) {\nal RosterItem item = new RosterItem(XmppURI.uri(jid), null, name, null);\n (final String group : groups) {\n item.addToGroup(group);\n\ning resource = item.getJID().getResource();\nm.setAvailable(isAvailable, resource);\nurn item;\n}",
                "name": "createItem",
                "modifiers": "public static",
                "return_type": "RosterItem",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "boolean"
                    }
                ],
                "body": "{\nal RosterItem item = new RosterItem(XmppURI.uri(jid), null, name, null);\n (final String group : groups) {\n item.addToGroup(group);\n\ning resource = item.getJID().getResource();\nm.setAvailable(isAvailable, resource);\nurn item;\n}",
                "start_point": {
                    "row": 7,
                    "column": 4
                },
                "end_point": {
                    "row": 16,
                    "column": 5
                }
            },
            {
                "definition": "public static RosterItem createItem(final String jid, final String name, final String... groups) {\nurn createItem(jid, name, false, groups);\n}",
                "name": "createItem",
                "modifiers": "public static",
                "return_type": "RosterItem",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nurn createItem(jid, name, false, groups);\n}",
                "start_point": {
                    "row": 18,
                    "column": 4
                },
                "end_point": {
                    "row": 20,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/ServicesTester.java",
        "definition": "public class ServicesTester implements Services {\n    public static class Request {\n\tpublic final String httpBase;\n\tpublic final String request;\n\tpublic final ConnectorCallback listener;\n\n\tpublic Request(final String httpBase, final String request, final ConnectorCallback listener) {\n\t    this.httpBase = httpBase;\n\t    this.request = request;\n\t    this.listener = listener;\n\t}\n\n    }\n\n    public static final TigaseXMLService xmler = TigaseXMLService.instance;\n    private final ArrayList<Request> requests;\n\n    public ServicesTester() {\n\tthis.requests = new ArrayList<Request>();\n    }\n\n    public long getCurrentTime() {\n\treturn 0;\n    }\n\n    public IPacket getSentPacket(final int index) {\n\tfinal String request = requests.get(index).request;\n\treturn xmler.toXML(request);\n    }\n\n    public int requestSentCount() {\n\treturn requests.size();\n    }\n\n    public void schedule(final int msecs, final ScheduledAction action) {\n    }\n\n    public void send(final String httpBase, final String request, final ConnectorCallback listener)\n\t    throws ConnectorException {\n\trequests.add(new Request(httpBase, request, listener));\n    }\n\n    public String toString(final IPacket packet) {\n\treturn xmler.toString(packet);\n    }\n\n    public IPacket toXML(final String xml) {\n\treturn xmler.toXML(xml);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "ServicesTester",
        "name": "ServicesTester",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements Services",
        "body": "{\n    public static class Request {\n\tpublic final String httpBase;\n\tpublic final String request;\n\tpublic final ConnectorCallback listener;\n\n\tpublic Request(final String httpBase, final String request, final ConnectorCallback listener) {\n\t    this.httpBase = httpBase;\n\t    this.request = request;\n\t    this.listener = listener;\n\t}\n\n    }\n\n    public static final TigaseXMLService xmler = TigaseXMLService.instance;\n    private final ArrayList<Request> requests;\n\n    public ServicesTester() {\n\tthis.requests = new ArrayList<Request>();\n    }\n\n    public long getCurrentTime() {\n\treturn 0;\n    }\n\n    public IPacket getSentPacket(final int index) {\n\tfinal String request = requests.get(index).request;\n\treturn xmler.toXML(request);\n    }\n\n    public int requestSentCount() {\n\treturn requests.size();\n    }\n\n    public void schedule(final int msecs, final ScheduledAction action) {\n    }\n\n    public void send(final String httpBase, final String request, final ConnectorCallback listener)\n\t    throws ConnectorException {\n\trequests.add(new Request(httpBase, request, listener));\n    }\n\n    public String toString(final IPacket packet) {\n\treturn xmler.toString(packet);\n    }\n\n    public IPacket toXML(final String xml) {\n\treturn xmler.toXML(xml);\n    }\n\n}",
        "start_point": {
            "row": 36,
            "column": 0
        },
        "end_point": {
            "row": 86,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/ServicesTester.java",
        "methods": [
            {
                "definition": "public ServicesTester() {\ns.requests = new ArrayList<Request>();\n}",
                "name": "ServicesTester",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ns.requests = new ArrayList<Request>();\n}",
                "constructor": true,
                "start_point": {
                    "row": 53,
                    "column": 4
                },
                "end_point": {
                    "row": 55,
                    "column": 5
                }
            },
            {
                "definition": "public long getCurrentTime() {\nurn 0;\n}",
                "name": "getCurrentTime",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn 0;\n}",
                "start_point": {
                    "row": 57,
                    "column": 4
                },
                "end_point": {
                    "row": 59,
                    "column": 5
                }
            },
            {
                "definition": "public IPacket getSentPacket(final int index) {\nal String request = requests.get(index).request;\nurn xmler.toXML(request);\n}",
                "name": "getSentPacket",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    }
                ],
                "body": "{\nal String request = requests.get(index).request;\nurn xmler.toXML(request);\n}",
                "start_point": {
                    "row": 61,
                    "column": 4
                },
                "end_point": {
                    "row": 64,
                    "column": 5
                }
            },
            {
                "definition": "public int requestSentCount() {\nurn requests.size();\n}",
                "name": "requestSentCount",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn requests.size();\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "public void schedule(final int msecs, final ScheduledAction action) {\n}",
                "name": "schedule",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    },
                    {
                        "type": "final",
                        "name": "ScheduledAction"
                    }
                ],
                "body": "{\n}",
                "start_point": {
                    "row": 70,
                    "column": 4
                },
                "end_point": {
                    "row": 71,
                    "column": 5
                }
            },
            {
                "definition": "public void send(final String httpBase, final String request, final ConnectorCallback listener)\n throws ConnectorException {\nuests.add(new Request(httpBase, request, listener));\n}",
                "name": "send",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    }
                ],
                "body": "{\nuests.add(new Request(httpBase, request, listener));\n}",
                "start_point": {
                    "row": 73,
                    "column": 4
                },
                "end_point": {
                    "row": 76,
                    "column": 5
                }
            },
            {
                "definition": "public String toString(final IPacket packet) {\nurn xmler.toString(packet);\n}",
                "name": "toString",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nurn xmler.toString(packet);\n}",
                "start_point": {
                    "row": 78,
                    "column": 4
                },
                "end_point": {
                    "row": 80,
                    "column": 5
                }
            },
            {
                "definition": "public IPacket toXML(final String xml) {\nurn xmler.toXML(xml);\n}",
                "name": "toXML",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nurn xmler.toXML(xml);\n}",
                "start_point": {
                    "row": 82,
                    "column": 4
                },
                "end_point": {
                    "row": 84,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/ServicesTester.java",
        "definition": "public static class Request {\nlic final String httpBase;\nlic final String request;\nlic final ConnectorCallback listener;\n\nlic Request(final String httpBase, final String request, final ConnectorCallback listener) {\n this.httpBase = httpBase;\n this.request = request;\n this.listener = listener;\n\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "ServicesTester.Request",
        "name": "Request",
        "modifiers": "public static",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\nlic final String httpBase;\nlic final String request;\nlic final ConnectorCallback listener;\n\nlic Request(final String httpBase, final String request, final ConnectorCallback listener) {\n this.httpBase = httpBase;\n this.request = request;\n this.listener = listener;\n\n\n}",
        "start_point": {
            "row": 37,
            "column": 4
        },
        "end_point": {
            "row": 48,
            "column": 5
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/ServicesTester.java",
        "methods": [
            {
                "definition": "public Request(final String httpBase, final String request, final ConnectorCallback listener) {\n    this.httpBase = httpBase;\n    this.request = request;\n    this.listener = listener;\n}",
                "name": "Request",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    }
                ],
                "body": "{\n    this.httpBase = httpBase;\n    this.request = request;\n    this.listener = listener;\n}",
                "constructor": true,
                "start_point": {
                    "row": 42,
                    "column": 1
                },
                "end_point": {
                    "row": 46,
                    "column": 2
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/SessionTester.java",
        "definition": "public class SessionTester extends SessionImpl implements Session {\n\n    private final XmppSessionTester tester;\n\n    public SessionTester() {\n\tthis(new XmppSessionTester());\n    }\n\n    public SessionTester(String user) {\n\tthis(new XmppSessionTester(user));\n    }\n\n    public SessionTester(XmppSessionTester delegate) {\n\tsuper(delegate);\n\tthis.tester = delegate;\n    }\n\n    public void answer(IQ iq) {\n\ttester.answer(iq);\n    }\n\n    public void answer(String iq) {\n\ttester.answer(iq);\n    }\n\n    public void answerSuccess() {\n\ttester.answerSuccess();\n    }\n\n    public void receives(Message message) {\n\ttester.receives(message);\n    }\n\n    public void receives(Presence presence) {\n\ttester.receives(presence);\n    }\n\n    public void receives(String xml) {\n\ttester.receives(xml);\n    }\n\n    public void setLoggedIn(String uri) {\n\ttester.setLoggedIn(uri);\n    }\n\n    public void setLoggedIn(XmppURI uri) {\n\ttester.setLoggedIn(uri);\n    }\n\n    public void verifyIQSent(IQ iq) {\n\ttester.verifyIQSent(iq);\n    }\n\n    public void verifyIQSent(String iq) {\n\ttester.verifyIQSent(iq);\n    }\n\n    public void verifyNotSent(String xml) {\n\ttester.verifyNotSent(xml);\n\n    }\n\n    public void verifySent(IPacket packet) {\n\ttester.verifySent(packet);\n    }\n\n    public void verifySent(String xml) {\n\ttester.verifySent(xml);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "SessionTester",
        "name": "SessionTester",
        "modifiers": "public",
        "superclass": "extends SessionImpl",
        "super_interfaces": "implements Session",
        "body": "{\n\n    private final XmppSessionTester tester;\n\n    public SessionTester() {\n\tthis(new XmppSessionTester());\n    }\n\n    public SessionTester(String user) {\n\tthis(new XmppSessionTester(user));\n    }\n\n    public SessionTester(XmppSessionTester delegate) {\n\tsuper(delegate);\n\tthis.tester = delegate;\n    }\n\n    public void answer(IQ iq) {\n\ttester.answer(iq);\n    }\n\n    public void answer(String iq) {\n\ttester.answer(iq);\n    }\n\n    public void answerSuccess() {\n\ttester.answerSuccess();\n    }\n\n    public void receives(Message message) {\n\ttester.receives(message);\n    }\n\n    public void receives(Presence presence) {\n\ttester.receives(presence);\n    }\n\n    public void receives(String xml) {\n\ttester.receives(xml);\n    }\n\n    public void setLoggedIn(String uri) {\n\ttester.setLoggedIn(uri);\n    }\n\n    public void setLoggedIn(XmppURI uri) {\n\ttester.setLoggedIn(uri);\n    }\n\n    public void verifyIQSent(IQ iq) {\n\ttester.verifyIQSent(iq);\n    }\n\n    public void verifyIQSent(String iq) {\n\ttester.verifyIQSent(iq);\n    }\n\n    public void verifyNotSent(String xml) {\n\ttester.verifyNotSent(xml);\n\n    }\n\n    public void verifySent(IPacket packet) {\n\ttester.verifySent(packet);\n    }\n\n    public void verifySent(String xml) {\n\ttester.verifySent(xml);\n    }\n\n}",
        "start_point": {
            "row": 17,
            "column": 0
        },
        "end_point": {
            "row": 87,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/SessionTester.java",
        "methods": [
            {
                "definition": "public SessionTester() {\ns(new XmppSessionTester());\n}",
                "name": "SessionTester",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ns(new XmppSessionTester());\n}",
                "constructor": true,
                "start_point": {
                    "row": 21,
                    "column": 4
                },
                "end_point": {
                    "row": 23,
                    "column": 5
                }
            },
            {
                "definition": "public SessionTester(String user) {\ns(new XmppSessionTester(user));\n}",
                "name": "SessionTester",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "String",
                        "name": "user"
                    }
                ],
                "body": "{\ns(new XmppSessionTester(user));\n}",
                "constructor": true,
                "start_point": {
                    "row": 25,
                    "column": 4
                },
                "end_point": {
                    "row": 27,
                    "column": 5
                }
            },
            {
                "definition": "public SessionTester(XmppSessionTester delegate) {\ner(delegate);\ns.tester = delegate;\n}",
                "name": "SessionTester",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "XmppSessionTester",
                        "name": "delegate"
                    }
                ],
                "body": "{\ner(delegate);\ns.tester = delegate;\n}",
                "constructor": true,
                "start_point": {
                    "row": 29,
                    "column": 4
                },
                "end_point": {
                    "row": 32,
                    "column": 5
                }
            },
            {
                "definition": "public void answer(IQ iq) {\nter.answer(iq);\n}",
                "name": "answer",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "IQ",
                        "name": "iq"
                    }
                ],
                "body": "{\nter.answer(iq);\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 36,
                    "column": 5
                }
            },
            {
                "definition": "public void answer(String iq) {\nter.answer(iq);\n}",
                "name": "answer",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "iq"
                    }
                ],
                "body": "{\nter.answer(iq);\n}",
                "start_point": {
                    "row": 38,
                    "column": 4
                },
                "end_point": {
                    "row": 40,
                    "column": 5
                }
            },
            {
                "definition": "public void answerSuccess() {\nter.answerSuccess();\n}",
                "name": "answerSuccess",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nter.answerSuccess();\n}",
                "start_point": {
                    "row": 42,
                    "column": 4
                },
                "end_point": {
                    "row": 44,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(Message message) {\nter.receives(message);\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Message",
                        "name": "message"
                    }
                ],
                "body": "{\nter.receives(message);\n}",
                "start_point": {
                    "row": 46,
                    "column": 4
                },
                "end_point": {
                    "row": 48,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(Presence presence) {\nter.receives(presence);\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Presence",
                        "name": "presence"
                    }
                ],
                "body": "{\nter.receives(presence);\n}",
                "start_point": {
                    "row": 50,
                    "column": 4
                },
                "end_point": {
                    "row": 52,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(String xml) {\nter.receives(xml);\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "xml"
                    }
                ],
                "body": "{\nter.receives(xml);\n}",
                "start_point": {
                    "row": 54,
                    "column": 4
                },
                "end_point": {
                    "row": 56,
                    "column": 5
                }
            },
            {
                "definition": "public void setLoggedIn(String uri) {\nter.setLoggedIn(uri);\n}",
                "name": "setLoggedIn",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "uri"
                    }
                ],
                "body": "{\nter.setLoggedIn(uri);\n}",
                "start_point": {
                    "row": 58,
                    "column": 4
                },
                "end_point": {
                    "row": 60,
                    "column": 5
                }
            },
            {
                "definition": "public void setLoggedIn(XmppURI uri) {\nter.setLoggedIn(uri);\n}",
                "name": "setLoggedIn",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "XmppURI",
                        "name": "uri"
                    }
                ],
                "body": "{\nter.setLoggedIn(uri);\n}",
                "start_point": {
                    "row": 62,
                    "column": 4
                },
                "end_point": {
                    "row": 64,
                    "column": 5
                }
            },
            {
                "definition": "public void verifyIQSent(IQ iq) {\nter.verifyIQSent(iq);\n}",
                "name": "verifyIQSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "IQ",
                        "name": "iq"
                    }
                ],
                "body": "{\nter.verifyIQSent(iq);\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "public void verifyIQSent(String iq) {\nter.verifyIQSent(iq);\n}",
                "name": "verifyIQSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "iq"
                    }
                ],
                "body": "{\nter.verifyIQSent(iq);\n}",
                "start_point": {
                    "row": 70,
                    "column": 4
                },
                "end_point": {
                    "row": 72,
                    "column": 5
                }
            },
            {
                "definition": "public void verifyNotSent(String xml) {\nter.verifyNotSent(xml);\n\n}",
                "name": "verifyNotSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "xml"
                    }
                ],
                "body": "{\nter.verifyNotSent(xml);\n\n}",
                "start_point": {
                    "row": 74,
                    "column": 4
                },
                "end_point": {
                    "row": 77,
                    "column": 5
                }
            },
            {
                "definition": "public void verifySent(IPacket packet) {\nter.verifySent(packet);\n}",
                "name": "verifySent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "IPacket",
                        "name": "packet"
                    }
                ],
                "body": "{\nter.verifySent(packet);\n}",
                "start_point": {
                    "row": 79,
                    "column": 4
                },
                "end_point": {
                    "row": 81,
                    "column": 5
                }
            },
            {
                "definition": "public void verifySent(String xml) {\nter.verifySent(xml);\n}",
                "name": "verifySent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "xml"
                    }
                ],
                "body": "{\nter.verifySent(xml);\n}",
                "start_point": {
                    "row": 83,
                    "column": 4
                },
                "end_point": {
                    "row": 85,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/XmppConnectionTester.java",
        "definition": "public class XmppConnectionTester extends XmppConnectionBoilerPlate implements XmppConnection {\n\n    private final TigaseXMLService xmler;\n    private final ArrayList<IPacket> sent;\n    private final ArrayList<IPacket> received;\n    private boolean isConnected;\n    private boolean paused;\n    private boolean streamRestarted;\n    private ConnectionSettings settings;\n\n    public XmppConnectionTester() {\n\tsuper(EmiteTestsEventBus.create(\"et\"));\n\txmler = new TigaseXMLService();\n\tsent = new ArrayList<IPacket>();\n\treceived = new ArrayList<IPacket>();\n    }\n\n    @Override\n    public void connect() {\n\tisConnected = true;\n    }\n\n    @Override\n    public void disconnect() {\n\tisConnected = false;\n    }\n\n    @Override\n    public EmiteEventBus getEventBus() {\n\treturn eventBus;\n    }\n\n    public int getSentSize() {\n\treturn sent.size();\n    }\n\n    public ConnectionSettings getSettings() {\n\treturn settings;\n    }\n\n    @Override\n    public boolean hasErrors() {\n\treturn false;\n    }\n\n    public boolean hasSent(final IPacket packet) {\n\tfinal IsPacketLike matcher = new IsPacketLike(packet);\n\tfor (final IPacket stanza : sent) {\n\t    if (matcher.matches(stanza, System.out)) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;\n    }\n\n    @Override\n    public boolean isConnected() {\n\treturn isConnected;\n    }\n\n    public boolean isStreamRestarted() {\n\treturn streamRestarted;\n    }\n\n    @Override\n    public StreamSettings pause() {\n\tpaused = true;\n\treturn null;\n    }\n\n    public void receives(final IPacket stanza) {\n\treceived.add(stanza);\n\teventBus.fireEvent(new StanzaReceivedEvent(stanza));\n    }\n\n    public void receives(final String stanza) {\n\treceives(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void restartStream() {\n\tstreamRestarted = true;\n    }\n\n    @Override\n    public boolean resume(final StreamSettings settings) {\n\tif (paused) {\n\t    paused = false;\n\t    return true;\n\t}\n\treturn false;\n    }\n\n    @Override\n    public void send(final IPacket packet) {\n\tsent.add(packet);\n\teventBus.fireEvent(new StanzaSentEvent(packet));\n    }\n\n    public void send(final String stanza) {\n\tsend(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void setSettings(final ConnectionSettings settings) {\n\tthis.settings = settings;\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "XmppConnectionTester",
        "name": "XmppConnectionTester",
        "modifiers": "public",
        "superclass": "extends XmppConnectionBoilerPlate",
        "super_interfaces": "implements XmppConnection",
        "body": "{\n\n    private final TigaseXMLService xmler;\n    private final ArrayList<IPacket> sent;\n    private final ArrayList<IPacket> received;\n    private boolean isConnected;\n    private boolean paused;\n    private boolean streamRestarted;\n    private ConnectionSettings settings;\n\n    public XmppConnectionTester() {\n\tsuper(EmiteTestsEventBus.create(\"et\"));\n\txmler = new TigaseXMLService();\n\tsent = new ArrayList<IPacket>();\n\treceived = new ArrayList<IPacket>();\n    }\n\n    @Override\n    public void connect() {\n\tisConnected = true;\n    }\n\n    @Override\n    public void disconnect() {\n\tisConnected = false;\n    }\n\n    @Override\n    public EmiteEventBus getEventBus() {\n\treturn eventBus;\n    }\n\n    public int getSentSize() {\n\treturn sent.size();\n    }\n\n    public ConnectionSettings getSettings() {\n\treturn settings;\n    }\n\n    @Override\n    public boolean hasErrors() {\n\treturn false;\n    }\n\n    public boolean hasSent(final IPacket packet) {\n\tfinal IsPacketLike matcher = new IsPacketLike(packet);\n\tfor (final IPacket stanza : sent) {\n\t    if (matcher.matches(stanza, System.out)) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;\n    }\n\n    @Override\n    public boolean isConnected() {\n\treturn isConnected;\n    }\n\n    public boolean isStreamRestarted() {\n\treturn streamRestarted;\n    }\n\n    @Override\n    public StreamSettings pause() {\n\tpaused = true;\n\treturn null;\n    }\n\n    public void receives(final IPacket stanza) {\n\treceived.add(stanza);\n\teventBus.fireEvent(new StanzaReceivedEvent(stanza));\n    }\n\n    public void receives(final String stanza) {\n\treceives(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void restartStream() {\n\tstreamRestarted = true;\n    }\n\n    @Override\n    public boolean resume(final StreamSettings settings) {\n\tif (paused) {\n\t    paused = false;\n\t    return true;\n\t}\n\treturn false;\n    }\n\n    @Override\n    public void send(final IPacket packet) {\n\tsent.add(packet);\n\teventBus.fireEvent(new StanzaSentEvent(packet));\n    }\n\n    public void send(final String stanza) {\n\tsend(xmler.toXML(stanza));\n    }\n\n    @Override\n    public void setSettings(final ConnectionSettings settings) {\n\tthis.settings = settings;\n    }\n\n}",
        "start_point": {
            "row": 15,
            "column": 0
        },
        "end_point": {
            "row": 123,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/XmppConnectionTester.java",
        "methods": [
            {
                "definition": "public XmppConnectionTester() {\ner(EmiteTestsEventBus.create(\"et\"));\ner = new TigaseXMLService();\nt = new ArrayList<IPacket>();\neived = new ArrayList<IPacket>();\n}",
                "name": "XmppConnectionTester",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ner(EmiteTestsEventBus.create(\"et\"));\ner = new TigaseXMLService();\nt = new ArrayList<IPacket>();\neived = new ArrayList<IPacket>();\n}",
                "constructor": true,
                "start_point": {
                    "row": 25,
                    "column": 4
                },
                "end_point": {
                    "row": 30,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void connect() {\nonnected = true;\n}",
                "name": "connect",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nonnected = true;\n}",
                "start_point": {
                    "row": 32,
                    "column": 4
                },
                "end_point": {
                    "row": 35,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void disconnect() {\nonnected = false;\n}",
                "name": "disconnect",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nonnected = false;\n}",
                "start_point": {
                    "row": 37,
                    "column": 4
                },
                "end_point": {
                    "row": 40,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic EmiteEventBus getEventBus() {\nurn eventBus;\n}",
                "name": "getEventBus",
                "modifiers": "@Override\n    public",
                "return_type": "EmiteEventBus",
                "parameters": [],
                "body": "{\nurn eventBus;\n}",
                "start_point": {
                    "row": 42,
                    "column": 4
                },
                "end_point": {
                    "row": 45,
                    "column": 5
                }
            },
            {
                "definition": "public int getSentSize() {\nurn sent.size();\n}",
                "name": "getSentSize",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn sent.size();\n}",
                "start_point": {
                    "row": 47,
                    "column": 4
                },
                "end_point": {
                    "row": 49,
                    "column": 5
                }
            },
            {
                "definition": "public ConnectionSettings getSettings() {\nurn settings;\n}",
                "name": "getSettings",
                "modifiers": "public",
                "return_type": "ConnectionSettings",
                "parameters": [],
                "body": "{\nurn settings;\n}",
                "start_point": {
                    "row": 51,
                    "column": 4
                },
                "end_point": {
                    "row": 53,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean hasErrors() {\nurn false;\n}",
                "name": "hasErrors",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn false;\n}",
                "start_point": {
                    "row": 55,
                    "column": 4
                },
                "end_point": {
                    "row": 58,
                    "column": 5
                }
            },
            {
                "definition": "public boolean hasSent(final IPacket packet) {\nal IsPacketLike matcher = new IsPacketLike(packet);\n (final IPacket stanza : sent) {\n if (matcher.matches(stanza, System.out)) {\nturn true;\n }\n\nurn false;\n}",
                "name": "hasSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nal IsPacketLike matcher = new IsPacketLike(packet);\n (final IPacket stanza : sent) {\n if (matcher.matches(stanza, System.out)) {\nturn true;\n }\n\nurn false;\n}",
                "start_point": {
                    "row": 60,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean isConnected() {\nurn isConnected;\n}",
                "name": "isConnected",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn isConnected;\n}",
                "start_point": {
                    "row": 70,
                    "column": 4
                },
                "end_point": {
                    "row": 73,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isStreamRestarted() {\nurn streamRestarted;\n}",
                "name": "isStreamRestarted",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn streamRestarted;\n}",
                "start_point": {
                    "row": 75,
                    "column": 4
                },
                "end_point": {
                    "row": 77,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic StreamSettings pause() {\nsed = true;\nurn null;\n}",
                "name": "pause",
                "modifiers": "@Override\n    public",
                "return_type": "StreamSettings",
                "parameters": [],
                "body": "{\nsed = true;\nurn null;\n}",
                "start_point": {
                    "row": 79,
                    "column": 4
                },
                "end_point": {
                    "row": 83,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(final IPacket stanza) {\neived.add(stanza);\nntBus.fireEvent(new StanzaReceivedEvent(stanza));\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\neived.add(stanza);\nntBus.fireEvent(new StanzaReceivedEvent(stanza));\n}",
                "start_point": {
                    "row": 85,
                    "column": 4
                },
                "end_point": {
                    "row": 88,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(final String stanza) {\neives(xmler.toXML(stanza));\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\neives(xmler.toXML(stanza));\n}",
                "start_point": {
                    "row": 90,
                    "column": 4
                },
                "end_point": {
                    "row": 92,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void restartStream() {\neamRestarted = true;\n}",
                "name": "restartStream",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\neamRestarted = true;\n}",
                "start_point": {
                    "row": 94,
                    "column": 4
                },
                "end_point": {
                    "row": 97,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean resume(final StreamSettings settings) {\n(paused) {\n paused = false;\n return true;\n\nurn false;\n}",
                "name": "resume",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "StreamSettings"
                    }
                ],
                "body": "{\n(paused) {\n paused = false;\n return true;\n\nurn false;\n}",
                "start_point": {
                    "row": 99,
                    "column": 4
                },
                "end_point": {
                    "row": 106,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void send(final IPacket packet) {\nt.add(packet);\nntBus.fireEvent(new StanzaSentEvent(packet));\n}",
                "name": "send",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nt.add(packet);\nntBus.fireEvent(new StanzaSentEvent(packet));\n}",
                "start_point": {
                    "row": 108,
                    "column": 4
                },
                "end_point": {
                    "row": 112,
                    "column": 5
                }
            },
            {
                "definition": "public void send(final String stanza) {\nd(xmler.toXML(stanza));\n}",
                "name": "send",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nd(xmler.toXML(stanza));\n}",
                "start_point": {
                    "row": 114,
                    "column": 4
                },
                "end_point": {
                    "row": 116,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void setSettings(final ConnectionSettings settings) {\ns.settings = settings;\n}",
                "name": "setSettings",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "ConnectionSettings"
                    }
                ],
                "body": "{\ns.settings = settings;\n}",
                "start_point": {
                    "row": 118,
                    "column": 4
                },
                "end_point": {
                    "row": 121,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/XmppRosterHelper.java",
        "definition": "public class XmppRosterHelper {\n    public static void setRosterItems(XmppSessionTester session, RosterItem... items) {\n\tsession.setSessionState(SessionStates.loggedIn);\n\tIQ iq = new IQ(Type.result);\n\tIPacket query = iq.addQuery(\"jabber:iq:roster\");\n\tfor (RosterItem item : items) {\n\t    item.addStanzaTo(query);\n\t}\n\tsession.answer(iq);\n    }\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "XmppRosterHelper",
        "name": "XmppRosterHelper",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    public static void setRosterItems(XmppSessionTester session, RosterItem... items) {\n\tsession.setSessionState(SessionStates.loggedIn);\n\tIQ iq = new IQ(Type.result);\n\tIPacket query = iq.addQuery(\"jabber:iq:roster\");\n\tfor (RosterItem item : items) {\n\t    item.addStanzaTo(query);\n\t}\n\tsession.answer(iq);\n    }\n}",
        "start_point": {
            "row": 8,
            "column": 0
        },
        "end_point": {
            "row": 18,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/XmppRosterHelper.java",
        "methods": [
            {
                "definition": "public static void setRosterItems(XmppSessionTester session, RosterItem... items) {\nsion.setSessionState(SessionStates.loggedIn);\niq = new IQ(Type.result);\ncket query = iq.addQuery(\"jabber:iq:roster\");\n (RosterItem item : items) {\n item.addStanzaTo(query);\n\nsion.answer(iq);\n}",
                "name": "setRosterItems",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "XmppSessionTester",
                        "name": "session"
                    }
                ],
                "body": "{\nsion.setSessionState(SessionStates.loggedIn);\niq = new IQ(Type.result);\ncket query = iq.addQuery(\"jabber:iq:roster\");\n (RosterItem item : items) {\n item.addStanzaTo(query);\n\nsion.answer(iq);\n}",
                "start_point": {
                    "row": 9,
                    "column": 4
                },
                "end_point": {
                    "row": 17,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/XmppSessionTester.java",
        "definition": "public class XmppSessionTester extends XmppSessionBoilerPlate {\n\n    private XmppURI currentUser;\n    private final TigaseXMLService xmler;\n    private final ArrayList<IPacket> sent;\n    private IPacket lastIQSent;\n    private IQResponseHandler lastIQResponseHandler;\n\n    public XmppSessionTester() {\n\tthis((XmppURI) null);\n    }\n\n    /**\n     * Create a new SessionTester and login if user provided\n     * \n     * @param user\n     *            optional user to login\n     */\n    public XmppSessionTester(final String user) {\n\tthis(XmppURI.uri(user));\n    }\n\n    /**\n     * Create a new SessionTester and login if user provided\n     * \n     * @param user\n     *            optional user to login\n     */\n    public XmppSessionTester(final XmppURI user) {\n\tsuper(EmiteTestsEventBus.create(\"et\"));\n\txmler = new TigaseXMLService();\n\tsent = new ArrayList<IPacket>();\n\tif (user != null) {\n\t    setLoggedIn(user);\n\t}\n    }\n\n    public void answer(final IPacket iq) {\n\tlastIQResponseHandler.onIQ(new IQ(iq));\n    }\n\n    public void answer(final String iq) {\n\tanswer(xmler.toXML(iq));\n    }\n\n    public void answerSuccess() {\n\tanswer(new IQ(Type.result));\n    }\n\n    @Override\n    public XmppURI getCurrentUserURI() {\n\treturn currentUser;\n    }\n\n    @Override\n    public boolean isLoggedIn() {\n\treturn isReady();\n    }\n\n    @Override\n    public boolean isReady() {\n\treturn currentUser != null;\n    }\n\n    @Override\n    public void login(final Credentials credentials) {\n\tsetLoggedIn(credentials.getXmppUri());\n    }\n\n    @Override\n    public void logout() {\n\tif (currentUser != null) {\n\t    setSessionState(SessionStates.loggingOut);\n\t    currentUser = null;\n\t    setSessionState(SessionStates.disconnected);\n\t}\n    }\n\n    @Override\n    public StreamSettings pause() {\n\treturn null;\n    }\n\n    public void receives(final Message message) {\n\teventBus.fireEvent(new MessageReceivedEvent(message));\n    }\n\n    public void receives(final Presence presence) {\n\teventBus.fireEvent(new PresenceReceivedEvent(presence));\n    }\n\n    public void receives(final String received) {\n\tfinal IPacket stanza = xmler.toXML(received);\n\tfinal String name = stanza.getName();\n\tif (name.equals(\"message\")) {\n\t    eventBus.fireEvent(new MessageReceivedEvent(new Message(stanza)));\n\t} else if (name.equals(\"presence\")) {\n\t    eventBus.fireEvent(new PresenceReceivedEvent(new Presence(stanza)));\n\t} else if (name.equals(\"iq\")) {\n\t    eventBus.fireEvent(new IQReceivedEvent(new IQ(stanza)));\n\t} else {\n\t    throw new RuntimeException(\"WHAT IS THIS? (\" + name + \"): \" + stanza.toString());\n\t}\n\n    }\n\n    @Override\n    public void resume(final XmppURI userURI, final StreamSettings settings) {\n    }\n\n    @Override\n    public void send(final IPacket packet) {\n\tsent.add(packet);\n    }\n\n    @Override\n    public void sendIQ(final String category, final IQ iq, final IQResponseHandler iqHandler) {\n\tlastIQSent = iq;\n\tlastIQResponseHandler = iqHandler;\n    }\n\n    public void setCurrentUser(final XmppURI currentUser) {\n\tthis.currentUser = currentUser;\n    }\n\n    public void setLoggedIn(final String uri) {\n\tsetLoggedIn(XmppURI.uri(uri));\n    }\n\n    public void setLoggedIn(final XmppURI userURI) {\n\tcurrentUser = userURI;\n\tsetSessionState(SessionStates.loggedIn);\n    }\n\n    public void setReady() {\n\tsetSessionState(SessionStates.ready);\n    }\n\n    @Override\n    public void setSessionState(String state) {\n\tsuper.setSessionState(state);\n    }\n\n    public IQResponseHandler verifyIQSent(final IPacket iq) {\n\tassertNotNull(lastIQSent);\n\tEmiteAsserts.assertPacketLike(iq, lastIQSent);\n\treturn lastIQResponseHandler;\n    }\n\n    public void verifyIQSent(final String xml) {\n\tverifyIQSent(xmler.toXML(xml));\n    }\n\n    public void verifyNotSent(final IPacket packet) {\n\tassertNotContains(packet, sent);\n    }\n\n    public void verifyNotSent(final String xml) {\n\tverifyNotSent(xmler.toXML(xml));\n    }\n\n    public void verifySent(final IPacket packet) {\n\tassertContains(packet, sent);\n    }\n\n    public void verifySent(final String expected) {\n\tfinal IPacket packet = xmler.toXML(expected);\n\tverifySent(packet);\n    }\n\n    public void verifySentNothing() {\n\tassertEquals(\"number of sent stanzas\", 0, sent.size());\n    }\n\n    private void assertContains(final IPacket expected, final ArrayList<IPacket> list) {\n\tfinal StringBuffer buffer = new StringBuffer();\n\tfinal boolean isContained = contains(expected, list, buffer);\n\tassertTrue(\"Expected \" + expected + \" contained in \" + buffer, isContained);\n    }\n\n    private void assertNotContains(final IPacket expected, final ArrayList<IPacket> list) {\n\tfinal StringBuffer buffer = new StringBuffer();\n\tfinal boolean isContained = contains(expected, list, buffer);\n\tassertFalse(\"Expected \" + expected + \" contained in\\n\" + buffer, isContained);\n    }\n\n    private boolean contains(final IPacket expected, final ArrayList<IPacket> list, final StringBuffer buffer) {\n\tboolean isContained = false;\n\tfinal IsPacketLike matcher = new IsPacketLike(expected);\n\tfor (final IPacket packet : list) {\n\t    buffer.append(\"[\").append(packet.toString()).append(\"]\");\n\t    isContained = isContained ? isContained : matcher.matches(packet, System.out);\n\t}\n\treturn isContained;\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting;",
        "tree_path": "XmppSessionTester",
        "name": "XmppSessionTester",
        "modifiers": "public",
        "superclass": "extends XmppSessionBoilerPlate",
        "super_interfaces": null,
        "body": "{\n\n    private XmppURI currentUser;\n    private final TigaseXMLService xmler;\n    private final ArrayList<IPacket> sent;\n    private IPacket lastIQSent;\n    private IQResponseHandler lastIQResponseHandler;\n\n    public XmppSessionTester() {\n\tthis((XmppURI) null);\n    }\n\n    /**\n     * Create a new SessionTester and login if user provided\n     * \n     * @param user\n     *            optional user to login\n     */\n    public XmppSessionTester(final String user) {\n\tthis(XmppURI.uri(user));\n    }\n\n    /**\n     * Create a new SessionTester and login if user provided\n     * \n     * @param user\n     *            optional user to login\n     */\n    public XmppSessionTester(final XmppURI user) {\n\tsuper(EmiteTestsEventBus.create(\"et\"));\n\txmler = new TigaseXMLService();\n\tsent = new ArrayList<IPacket>();\n\tif (user != null) {\n\t    setLoggedIn(user);\n\t}\n    }\n\n    public void answer(final IPacket iq) {\n\tlastIQResponseHandler.onIQ(new IQ(iq));\n    }\n\n    public void answer(final String iq) {\n\tanswer(xmler.toXML(iq));\n    }\n\n    public void answerSuccess() {\n\tanswer(new IQ(Type.result));\n    }\n\n    @Override\n    public XmppURI getCurrentUserURI() {\n\treturn currentUser;\n    }\n\n    @Override\n    public boolean isLoggedIn() {\n\treturn isReady();\n    }\n\n    @Override\n    public boolean isReady() {\n\treturn currentUser != null;\n    }\n\n    @Override\n    public void login(final Credentials credentials) {\n\tsetLoggedIn(credentials.getXmppUri());\n    }\n\n    @Override\n    public void logout() {\n\tif (currentUser != null) {\n\t    setSessionState(SessionStates.loggingOut);\n\t    currentUser = null;\n\t    setSessionState(SessionStates.disconnected);\n\t}\n    }\n\n    @Override\n    public StreamSettings pause() {\n\treturn null;\n    }\n\n    public void receives(final Message message) {\n\teventBus.fireEvent(new MessageReceivedEvent(message));\n    }\n\n    public void receives(final Presence presence) {\n\teventBus.fireEvent(new PresenceReceivedEvent(presence));\n    }\n\n    public void receives(final String received) {\n\tfinal IPacket stanza = xmler.toXML(received);\n\tfinal String name = stanza.getName();\n\tif (name.equals(\"message\")) {\n\t    eventBus.fireEvent(new MessageReceivedEvent(new Message(stanza)));\n\t} else if (name.equals(\"presence\")) {\n\t    eventBus.fireEvent(new PresenceReceivedEvent(new Presence(stanza)));\n\t} else if (name.equals(\"iq\")) {\n\t    eventBus.fireEvent(new IQReceivedEvent(new IQ(stanza)));\n\t} else {\n\t    throw new RuntimeException(\"WHAT IS THIS? (\" + name + \"): \" + stanza.toString());\n\t}\n\n    }\n\n    @Override\n    public void resume(final XmppURI userURI, final StreamSettings settings) {\n    }\n\n    @Override\n    public void send(final IPacket packet) {\n\tsent.add(packet);\n    }\n\n    @Override\n    public void sendIQ(final String category, final IQ iq, final IQResponseHandler iqHandler) {\n\tlastIQSent = iq;\n\tlastIQResponseHandler = iqHandler;\n    }\n\n    public void setCurrentUser(final XmppURI currentUser) {\n\tthis.currentUser = currentUser;\n    }\n\n    public void setLoggedIn(final String uri) {\n\tsetLoggedIn(XmppURI.uri(uri));\n    }\n\n    public void setLoggedIn(final XmppURI userURI) {\n\tcurrentUser = userURI;\n\tsetSessionState(SessionStates.loggedIn);\n    }\n\n    public void setReady() {\n\tsetSessionState(SessionStates.ready);\n    }\n\n    @Override\n    public void setSessionState(String state) {\n\tsuper.setSessionState(state);\n    }\n\n    public IQResponseHandler verifyIQSent(final IPacket iq) {\n\tassertNotNull(lastIQSent);\n\tEmiteAsserts.assertPacketLike(iq, lastIQSent);\n\treturn lastIQResponseHandler;\n    }\n\n    public void verifyIQSent(final String xml) {\n\tverifyIQSent(xmler.toXML(xml));\n    }\n\n    public void verifyNotSent(final IPacket packet) {\n\tassertNotContains(packet, sent);\n    }\n\n    public void verifyNotSent(final String xml) {\n\tverifyNotSent(xmler.toXML(xml));\n    }\n\n    public void verifySent(final IPacket packet) {\n\tassertContains(packet, sent);\n    }\n\n    public void verifySent(final String expected) {\n\tfinal IPacket packet = xmler.toXML(expected);\n\tverifySent(packet);\n    }\n\n    public void verifySentNothing() {\n\tassertEquals(\"number of sent stanzas\", 0, sent.size());\n    }\n\n    private void assertContains(final IPacket expected, final ArrayList<IPacket> list) {\n\tfinal StringBuffer buffer = new StringBuffer();\n\tfinal boolean isContained = contains(expected, list, buffer);\n\tassertTrue(\"Expected \" + expected + \" contained in \" + buffer, isContained);\n    }\n\n    private void assertNotContains(final IPacket expected, final ArrayList<IPacket> list) {\n\tfinal StringBuffer buffer = new StringBuffer();\n\tfinal boolean isContained = contains(expected, list, buffer);\n\tassertFalse(\"Expected \" + expected + \" contained in\\n\" + buffer, isContained);\n    }\n\n    private boolean contains(final IPacket expected, final ArrayList<IPacket> list, final StringBuffer buffer) {\n\tboolean isContained = false;\n\tfinal IsPacketLike matcher = new IsPacketLike(expected);\n\tfor (final IPacket packet : list) {\n\t    buffer.append(\"[\").append(packet.toString()).append(\"]\");\n\t    isContained = isContained ? isContained : matcher.matches(packet, System.out);\n\t}\n\treturn isContained;\n    }\n\n}",
        "start_point": {
            "row": 27,
            "column": 0
        },
        "end_point": {
            "row": 223,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/XmppSessionTester.java",
        "methods": [
            {
                "definition": "public XmppSessionTester() {\ns((XmppURI) null);\n}",
                "name": "XmppSessionTester",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ns((XmppURI) null);\n}",
                "constructor": true,
                "start_point": {
                    "row": 35,
                    "column": 4
                },
                "end_point": {
                    "row": 37,
                    "column": 5
                }
            },
            {
                "definition": "public XmppSessionTester(final String user) {\ns(XmppURI.uri(user));\n}",
                "name": "XmppSessionTester",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\ns(XmppURI.uri(user));\n}",
                "constructor": true,
                "start_point": {
                    "row": 45,
                    "column": 4
                },
                "end_point": {
                    "row": 47,
                    "column": 5
                }
            },
            {
                "definition": "public XmppSessionTester(final XmppURI user) {\ner(EmiteTestsEventBus.create(\"et\"));\ner = new TigaseXMLService();\nt = new ArrayList<IPacket>();\n(user != null) {\n setLoggedIn(user);\n\n}",
                "name": "XmppSessionTester",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "XmppURI"
                    }
                ],
                "body": "{\ner(EmiteTestsEventBus.create(\"et\"));\ner = new TigaseXMLService();\nt = new ArrayList<IPacket>();\n(user != null) {\n setLoggedIn(user);\n\n}",
                "constructor": true,
                "start_point": {
                    "row": 55,
                    "column": 4
                },
                "end_point": {
                    "row": 62,
                    "column": 5
                }
            },
            {
                "definition": "public void answer(final IPacket iq) {\ntIQResponseHandler.onIQ(new IQ(iq));\n}",
                "name": "answer",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\ntIQResponseHandler.onIQ(new IQ(iq));\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 66,
                    "column": 5
                }
            },
            {
                "definition": "public void answer(final String iq) {\nwer(xmler.toXML(iq));\n}",
                "name": "answer",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nwer(xmler.toXML(iq));\n}",
                "start_point": {
                    "row": 68,
                    "column": 4
                },
                "end_point": {
                    "row": 70,
                    "column": 5
                }
            },
            {
                "definition": "public void answerSuccess() {\nwer(new IQ(Type.result));\n}",
                "name": "answerSuccess",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nwer(new IQ(Type.result));\n}",
                "start_point": {
                    "row": 72,
                    "column": 4
                },
                "end_point": {
                    "row": 74,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic XmppURI getCurrentUserURI() {\nurn currentUser;\n}",
                "name": "getCurrentUserURI",
                "modifiers": "@Override\n    public",
                "return_type": "XmppURI",
                "parameters": [],
                "body": "{\nurn currentUser;\n}",
                "start_point": {
                    "row": 76,
                    "column": 4
                },
                "end_point": {
                    "row": 79,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean isLoggedIn() {\nurn isReady();\n}",
                "name": "isLoggedIn",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn isReady();\n}",
                "start_point": {
                    "row": 81,
                    "column": 4
                },
                "end_point": {
                    "row": 84,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic boolean isReady() {\nurn currentUser != null;\n}",
                "name": "isReady",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn currentUser != null;\n}",
                "start_point": {
                    "row": 86,
                    "column": 4
                },
                "end_point": {
                    "row": 89,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void login(final Credentials credentials) {\nLoggedIn(credentials.getXmppUri());\n}",
                "name": "login",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Credentials"
                    }
                ],
                "body": "{\nLoggedIn(credentials.getXmppUri());\n}",
                "start_point": {
                    "row": 91,
                    "column": 4
                },
                "end_point": {
                    "row": 94,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void logout() {\n(currentUser != null) {\n setSessionState(SessionStates.loggingOut);\n currentUser = null;\n setSessionState(SessionStates.disconnected);\n\n}",
                "name": "logout",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\n(currentUser != null) {\n setSessionState(SessionStates.loggingOut);\n currentUser = null;\n setSessionState(SessionStates.disconnected);\n\n}",
                "start_point": {
                    "row": 96,
                    "column": 4
                },
                "end_point": {
                    "row": 103,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic StreamSettings pause() {\nurn null;\n}",
                "name": "pause",
                "modifiers": "@Override\n    public",
                "return_type": "StreamSettings",
                "parameters": [],
                "body": "{\nurn null;\n}",
                "start_point": {
                    "row": 105,
                    "column": 4
                },
                "end_point": {
                    "row": 108,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(final Message message) {\nntBus.fireEvent(new MessageReceivedEvent(message));\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Message"
                    }
                ],
                "body": "{\nntBus.fireEvent(new MessageReceivedEvent(message));\n}",
                "start_point": {
                    "row": 110,
                    "column": 4
                },
                "end_point": {
                    "row": 112,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(final Presence presence) {\nntBus.fireEvent(new PresenceReceivedEvent(presence));\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Presence"
                    }
                ],
                "body": "{\nntBus.fireEvent(new PresenceReceivedEvent(presence));\n}",
                "start_point": {
                    "row": 114,
                    "column": 4
                },
                "end_point": {
                    "row": 116,
                    "column": 5
                }
            },
            {
                "definition": "public void receives(final String received) {\nal IPacket stanza = xmler.toXML(received);\nal String name = stanza.getName();\n(name.equals(\"message\")) {\n eventBus.fireEvent(new MessageReceivedEvent(new Message(stanza)));\nlse if (name.equals(\"presence\")) {\n eventBus.fireEvent(new PresenceReceivedEvent(new Presence(stanza)));\nlse if (name.equals(\"iq\")) {\n eventBus.fireEvent(new IQReceivedEvent(new IQ(stanza)));\nlse {\n throw new RuntimeException(\"WHAT IS THIS? (\" + name + \"): \" + stanza.toString());\n\n\n}",
                "name": "receives",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal IPacket stanza = xmler.toXML(received);\nal String name = stanza.getName();\n(name.equals(\"message\")) {\n eventBus.fireEvent(new MessageReceivedEvent(new Message(stanza)));\nlse if (name.equals(\"presence\")) {\n eventBus.fireEvent(new PresenceReceivedEvent(new Presence(stanza)));\nlse if (name.equals(\"iq\")) {\n eventBus.fireEvent(new IQReceivedEvent(new IQ(stanza)));\nlse {\n throw new RuntimeException(\"WHAT IS THIS? (\" + name + \"): \" + stanza.toString());\n\n\n}",
                "start_point": {
                    "row": 118,
                    "column": 4
                },
                "end_point": {
                    "row": 131,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void resume(final XmppURI userURI, final StreamSettings settings) {\n}",
                "name": "resume",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "XmppURI"
                    },
                    {
                        "type": "final",
                        "name": "StreamSettings"
                    }
                ],
                "body": "{\n}",
                "start_point": {
                    "row": 133,
                    "column": 4
                },
                "end_point": {
                    "row": 135,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void send(final IPacket packet) {\nt.add(packet);\n}",
                "name": "send",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nt.add(packet);\n}",
                "start_point": {
                    "row": 137,
                    "column": 4
                },
                "end_point": {
                    "row": 140,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void sendIQ(final String category, final IQ iq, final IQResponseHandler iqHandler) {\ntIQSent = iq;\ntIQResponseHandler = iqHandler;\n}",
                "name": "sendIQ",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "IQ"
                    },
                    {
                        "type": "final",
                        "name": "IQResponseHandler"
                    }
                ],
                "body": "{\ntIQSent = iq;\ntIQResponseHandler = iqHandler;\n}",
                "start_point": {
                    "row": 142,
                    "column": 4
                },
                "end_point": {
                    "row": 146,
                    "column": 5
                }
            },
            {
                "definition": "public void setCurrentUser(final XmppURI currentUser) {\ns.currentUser = currentUser;\n}",
                "name": "setCurrentUser",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "XmppURI"
                    }
                ],
                "body": "{\ns.currentUser = currentUser;\n}",
                "start_point": {
                    "row": 148,
                    "column": 4
                },
                "end_point": {
                    "row": 150,
                    "column": 5
                }
            },
            {
                "definition": "public void setLoggedIn(final String uri) {\nLoggedIn(XmppURI.uri(uri));\n}",
                "name": "setLoggedIn",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nLoggedIn(XmppURI.uri(uri));\n}",
                "start_point": {
                    "row": 152,
                    "column": 4
                },
                "end_point": {
                    "row": 154,
                    "column": 5
                }
            },
            {
                "definition": "public void setLoggedIn(final XmppURI userURI) {\nrentUser = userURI;\nSessionState(SessionStates.loggedIn);\n}",
                "name": "setLoggedIn",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "XmppURI"
                    }
                ],
                "body": "{\nrentUser = userURI;\nSessionState(SessionStates.loggedIn);\n}",
                "start_point": {
                    "row": 156,
                    "column": 4
                },
                "end_point": {
                    "row": 159,
                    "column": 5
                }
            },
            {
                "definition": "public void setReady() {\nSessionState(SessionStates.ready);\n}",
                "name": "setReady",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nSessionState(SessionStates.ready);\n}",
                "start_point": {
                    "row": 161,
                    "column": 4
                },
                "end_point": {
                    "row": 163,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void setSessionState(String state) {\ner.setSessionState(state);\n}",
                "name": "setSessionState",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "state"
                    }
                ],
                "body": "{\ner.setSessionState(state);\n}",
                "start_point": {
                    "row": 165,
                    "column": 4
                },
                "end_point": {
                    "row": 168,
                    "column": 5
                }
            },
            {
                "definition": "public IQResponseHandler verifyIQSent(final IPacket iq) {\nertNotNull(lastIQSent);\nteAsserts.assertPacketLike(iq, lastIQSent);\nurn lastIQResponseHandler;\n}",
                "name": "verifyIQSent",
                "modifiers": "public",
                "return_type": "IQResponseHandler",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nertNotNull(lastIQSent);\nteAsserts.assertPacketLike(iq, lastIQSent);\nurn lastIQResponseHandler;\n}",
                "start_point": {
                    "row": 170,
                    "column": 4
                },
                "end_point": {
                    "row": 174,
                    "column": 5
                }
            },
            {
                "definition": "public void verifyIQSent(final String xml) {\nifyIQSent(xmler.toXML(xml));\n}",
                "name": "verifyIQSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nifyIQSent(xmler.toXML(xml));\n}",
                "start_point": {
                    "row": 176,
                    "column": 4
                },
                "end_point": {
                    "row": 178,
                    "column": 5
                }
            },
            {
                "definition": "public void verifyNotSent(final IPacket packet) {\nertNotContains(packet, sent);\n}",
                "name": "verifyNotSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nertNotContains(packet, sent);\n}",
                "start_point": {
                    "row": 180,
                    "column": 4
                },
                "end_point": {
                    "row": 182,
                    "column": 5
                }
            },
            {
                "definition": "public void verifyNotSent(final String xml) {\nifyNotSent(xmler.toXML(xml));\n}",
                "name": "verifyNotSent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nifyNotSent(xmler.toXML(xml));\n}",
                "start_point": {
                    "row": 184,
                    "column": 4
                },
                "end_point": {
                    "row": 186,
                    "column": 5
                }
            },
            {
                "definition": "public void verifySent(final IPacket packet) {\nertContains(packet, sent);\n}",
                "name": "verifySent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nertContains(packet, sent);\n}",
                "start_point": {
                    "row": 188,
                    "column": 4
                },
                "end_point": {
                    "row": 190,
                    "column": 5
                }
            },
            {
                "definition": "public void verifySent(final String expected) {\nal IPacket packet = xmler.toXML(expected);\nifySent(packet);\n}",
                "name": "verifySent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal IPacket packet = xmler.toXML(expected);\nifySent(packet);\n}",
                "start_point": {
                    "row": 192,
                    "column": 4
                },
                "end_point": {
                    "row": 195,
                    "column": 5
                }
            },
            {
                "definition": "public void verifySentNothing() {\nertEquals(\"number of sent stanzas\", 0, sent.size());\n}",
                "name": "verifySentNothing",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nertEquals(\"number of sent stanzas\", 0, sent.size());\n}",
                "start_point": {
                    "row": 197,
                    "column": 4
                },
                "end_point": {
                    "row": 199,
                    "column": 5
                }
            },
            {
                "definition": "private void assertContains(final IPacket expected, final ArrayList<IPacket> list) {\nal StringBuffer buffer = new StringBuffer();\nal boolean isContained = contains(expected, list, buffer);\nertTrue(\"Expected \" + expected + \" contained in \" + buffer, isContained);\n}",
                "name": "assertContains",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "ArrayList<IPacket>"
                    }
                ],
                "body": "{\nal StringBuffer buffer = new StringBuffer();\nal boolean isContained = contains(expected, list, buffer);\nertTrue(\"Expected \" + expected + \" contained in \" + buffer, isContained);\n}",
                "start_point": {
                    "row": 201,
                    "column": 4
                },
                "end_point": {
                    "row": 205,
                    "column": 5
                }
            },
            {
                "definition": "private void assertNotContains(final IPacket expected, final ArrayList<IPacket> list) {\nal StringBuffer buffer = new StringBuffer();\nal boolean isContained = contains(expected, list, buffer);\nertFalse(\"Expected \" + expected + \" contained in\\n\" + buffer, isContained);\n}",
                "name": "assertNotContains",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "ArrayList<IPacket>"
                    }
                ],
                "body": "{\nal StringBuffer buffer = new StringBuffer();\nal boolean isContained = contains(expected, list, buffer);\nertFalse(\"Expected \" + expected + \" contained in\\n\" + buffer, isContained);\n}",
                "start_point": {
                    "row": 207,
                    "column": 4
                },
                "end_point": {
                    "row": 211,
                    "column": 5
                }
            },
            {
                "definition": "private boolean contains(final IPacket expected, final ArrayList<IPacket> list, final StringBuffer buffer) {\nlean isContained = false;\nal IsPacketLike matcher = new IsPacketLike(expected);\n (final IPacket packet : list) {\n buffer.append(\"[\").append(packet.toString()).append(\"]\");\n isContained = isContained ? isContained : matcher.matches(packet, System.out);\n\nurn isContained;\n}",
                "name": "contains",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "ArrayList<IPacket>"
                    },
                    {
                        "type": "final",
                        "name": "StringBuffer"
                    }
                ],
                "body": "{\nlean isContained = false;\nal IsPacketLike matcher = new IsPacketLike(expected);\n (final IPacket packet : list) {\n buffer.append(\"[\").append(packet.toString()).append(\"]\");\n isContained = isContained ? isContained : matcher.matches(packet, System.out);\n\nurn isContained;\n}",
                "start_point": {
                    "row": 213,
                    "column": 4
                },
                "end_point": {
                    "row": 221,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/ChangedTestHandler.java",
        "definition": "public abstract class ChangedTestHandler<T extends ChangedEvent<?>> extends TestHandler<T> {\n    public String getLastChangeType() {\n\treturn hasEvent() ? getLastEvent().getChangeType() : null;\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "ChangedTestHandler",
        "name": "ChangedTestHandler",
        "modifiers": "public abstract",
        "superclass": "extends TestHandler<T>",
        "super_interfaces": null,
        "body": "{\n    public String getLastChangeType() {\n\treturn hasEvent() ? getLastEvent().getChangeType() : null;\n    }\n\n}",
        "start_point": {
            "row": 4,
            "column": 0
        },
        "end_point": {
            "row": 9,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/ChangedTestHandler.java",
        "methods": [
            {
                "definition": "public String getLastChangeType() {\nurn hasEvent() ? getLastEvent().getChangeType() : null;\n}",
                "name": "getLastChangeType",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [],
                "body": "{\nurn hasEvent() ? getLastEvent().getChangeType() : null;\n}",
                "start_point": {
                    "row": 5,
                    "column": 4
                },
                "end_point": {
                    "row": 7,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/ChatChangedTestHandler.java",
        "definition": "public class ChatChangedTestHandler extends TestHandler<ChatChangedEvent> implements ChatChangedHandler {\n\n    public Chat getLastChat() {\n\treturn hasEvent() ? getLastEvent().getChat() : null;\n    }\n\n    @Override\n    public void onChatChanged(ChatChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "ChatChangedTestHandler",
        "name": "ChatChangedTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<ChatChangedEvent>",
        "super_interfaces": "implements ChatChangedHandler",
        "body": "{\n\n    public Chat getLastChat() {\n\treturn hasEvent() ? getLastEvent().getChat() : null;\n    }\n\n    @Override\n    public void onChatChanged(ChatChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 6,
            "column": 0
        },
        "end_point": {
            "row": 17,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/ChatChangedTestHandler.java",
        "methods": [
            {
                "definition": "public Chat getLastChat() {\nurn hasEvent() ? getLastEvent().getChat() : null;\n}",
                "name": "getLastChat",
                "modifiers": "public",
                "return_type": "Chat",
                "parameters": [],
                "body": "{\nurn hasEvent() ? getLastEvent().getChat() : null;\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 10,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void onChatChanged(ChatChangedEvent event) {\nEvent(event);\n}",
                "name": "onChatChanged",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "ChatChangedEvent",
                        "name": "event"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 12,
                    "column": 4
                },
                "end_point": {
                    "row": 15,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/DiscoveryInfoResultTestHandler.java",
        "definition": "public class DiscoveryInfoResultTestHandler extends TestHandler<DiscoveryInfoResultEvent> implements\n\tDiscoveryInfoResultHandler {\n\n    @Override\n    public void onDiscoveryInfoResult(DiscoveryInfoResultEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "DiscoveryInfoResultTestHandler",
        "name": "DiscoveryInfoResultTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<DiscoveryInfoResultEvent>",
        "super_interfaces": "implements\n\tDiscoveryInfoResultHandler",
        "body": "{\n\n    @Override\n    public void onDiscoveryInfoResult(DiscoveryInfoResultEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 13,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/DiscoveryInfoResultTestHandler.java",
        "methods": [
            {
                "definition": "@Override\npublic void onDiscoveryInfoResult(DiscoveryInfoResultEvent event) {\nEvent(event);\n}",
                "name": "onDiscoveryInfoResult",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "DiscoveryInfoResultEvent",
                        "name": "event"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 11,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/DiscoveryItemsResultTestHandler.java",
        "definition": "public class DiscoveryItemsResultTestHandler extends TestHandler<DiscoveryItemsResultEvent> implements\n\tDiscoveryItemsResultHandler {\n\n    @Override\n    public void onDiscoveryItemsResult(DiscoveryItemsResultEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "DiscoveryItemsResultTestHandler",
        "name": "DiscoveryItemsResultTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<DiscoveryItemsResultEvent>",
        "super_interfaces": "implements\n\tDiscoveryItemsResultHandler",
        "body": "{\n\n    @Override\n    public void onDiscoveryItemsResult(DiscoveryItemsResultEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 13,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/DiscoveryItemsResultTestHandler.java",
        "methods": [
            {
                "definition": "@Override\npublic void onDiscoveryItemsResult(DiscoveryItemsResultEvent event) {\nEvent(event);\n}",
                "name": "onDiscoveryItemsResult",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "DiscoveryItemsResultEvent",
                        "name": "event"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 11,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/ErrorTestHandler.java",
        "definition": "public class ErrorTestHandler extends TestHandler<ErrorEvent> implements ErrorHandler {\n\n    @Override\n    public void onError(ErrorEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "ErrorTestHandler",
        "name": "ErrorTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<ErrorEvent>",
        "super_interfaces": "implements ErrorHandler",
        "body": "{\n\n    @Override\n    public void onError(ErrorEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 12,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/ErrorTestHandler.java",
        "methods": [
            {
                "definition": "@Override\npublic void onError(ErrorEvent event) {\nEvent(event);\n}",
                "name": "onError",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "ErrorEvent",
                        "name": "event"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 7,
                    "column": 4
                },
                "end_point": {
                    "row": 10,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/MessageTestHandler.java",
        "definition": "public class MessageTestHandler extends TestHandler<MessageEvent> implements MessageHandler {\n\n    public Message getLastMessage() {\n\treturn hasEvent() ? getLastEvent().getMessage() : null;\n    }\n\n    @Override\n    public void onMessage(final MessageEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "MessageTestHandler",
        "name": "MessageTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<MessageEvent>",
        "super_interfaces": "implements MessageHandler",
        "body": "{\n\n    public Message getLastMessage() {\n\treturn hasEvent() ? getLastEvent().getMessage() : null;\n    }\n\n    @Override\n    public void onMessage(final MessageEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 6,
            "column": 0
        },
        "end_point": {
            "row": 17,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/MessageTestHandler.java",
        "methods": [
            {
                "definition": "public Message getLastMessage() {\nurn hasEvent() ? getLastEvent().getMessage() : null;\n}",
                "name": "getLastMessage",
                "modifiers": "public",
                "return_type": "Message",
                "parameters": [],
                "body": "{\nurn hasEvent() ? getLastEvent().getMessage() : null;\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 10,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void onMessage(final MessageEvent event) {\nEvent(event);\n}",
                "name": "onMessage",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "MessageEvent"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 12,
                    "column": 4
                },
                "end_point": {
                    "row": 15,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/PacketTestHandler.java",
        "definition": "public class PacketTestHandler extends TestHandler<PacketEvent> implements PacketHandler {\n\n    @Override\n    public void onPacket(PacketEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "PacketTestHandler",
        "name": "PacketTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<PacketEvent>",
        "super_interfaces": "implements PacketHandler",
        "body": "{\n\n    @Override\n    public void onPacket(PacketEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 12,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/PacketTestHandler.java",
        "methods": [
            {
                "definition": "@Override\npublic void onPacket(PacketEvent event) {\nEvent(event);\n}",
                "name": "onPacket",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "PacketEvent",
                        "name": "event"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 7,
                    "column": 4
                },
                "end_point": {
                    "row": 10,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/PresenceTestHandler.java",
        "definition": "public class PresenceTestHandler extends TestHandler<PresenceEvent> implements PresenceHandler {\n\n    public Presence getLastPresence() {\n\treturn hasEvent() ? getLastEvent().getPresence() : null;\n    }\n\n    @Override\n    public void onPresence(final PresenceEvent event) {\n\taddEvent(event);\n    }\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "PresenceTestHandler",
        "name": "PresenceTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<PresenceEvent>",
        "super_interfaces": "implements PresenceHandler",
        "body": "{\n\n    public Presence getLastPresence() {\n\treturn hasEvent() ? getLastEvent().getPresence() : null;\n    }\n\n    @Override\n    public void onPresence(final PresenceEvent event) {\n\taddEvent(event);\n    }\n}",
        "start_point": {
            "row": 6,
            "column": 0
        },
        "end_point": {
            "row": 16,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/PresenceTestHandler.java",
        "methods": [
            {
                "definition": "public Presence getLastPresence() {\nurn hasEvent() ? getLastEvent().getPresence() : null;\n}",
                "name": "getLastPresence",
                "modifiers": "public",
                "return_type": "Presence",
                "parameters": [],
                "body": "{\nurn hasEvent() ? getLastEvent().getPresence() : null;\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 10,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void onPresence(final PresenceEvent event) {\nEvent(event);\n}",
                "name": "onPresence",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "PresenceEvent"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 12,
                    "column": 4
                },
                "end_point": {
                    "row": 15,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/RoomSubjectChangedTestHandler.java",
        "definition": "public class RoomSubjectChangedTestHandler extends TestHandler<RoomSubjectChangedEvent> implements\n\tRoomSubjectChangedHandler {\n\n    @Override\n    public void onSubjectChanged(RoomSubjectChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "RoomSubjectChangedTestHandler",
        "name": "RoomSubjectChangedTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<RoomSubjectChangedEvent>",
        "super_interfaces": "implements\n\tRoomSubjectChangedHandler",
        "body": "{\n\n    @Override\n    public void onSubjectChanged(RoomSubjectChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 13,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/RoomSubjectChangedTestHandler.java",
        "methods": [
            {
                "definition": "@Override\npublic void onSubjectChanged(RoomSubjectChangedEvent event) {\nEvent(event);\n}",
                "name": "onSubjectChanged",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "RoomSubjectChangedEvent",
                        "name": "event"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 11,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/RosterItemChangedTestHandler.java",
        "definition": "public class RosterItemChangedTestHandler extends TestHandler<RosterItemChangedEvent> implements\n\tRosterItemChangedHandler {\n\n    @Override\n    public void onRosterItemChanged(RosterItemChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "RosterItemChangedTestHandler",
        "name": "RosterItemChangedTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<RosterItemChangedEvent>",
        "super_interfaces": "implements\n\tRosterItemChangedHandler",
        "body": "{\n\n    @Override\n    public void onRosterItemChanged(RosterItemChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 13,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/RosterItemChangedTestHandler.java",
        "methods": [
            {
                "definition": "@Override\npublic void onRosterItemChanged(RosterItemChangedEvent event) {\nEvent(event);\n}",
                "name": "onRosterItemChanged",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "RosterItemChangedEvent",
                        "name": "event"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 11,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/StateChangedTestHandler.java",
        "definition": "public class StateChangedTestHandler extends TestHandler<StateChangedEvent> implements StateChangedHandler {\n    public String getLastState() {\n\treturn hasEvent() ? getLastEvent().getState() : null;\n    }\n\n    @Override\n    public void onStateChanged(final StateChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "StateChangedTestHandler",
        "name": "StateChangedTestHandler",
        "modifiers": "public",
        "superclass": "extends TestHandler<StateChangedEvent>",
        "super_interfaces": "implements StateChangedHandler",
        "body": "{\n    public String getLastState() {\n\treturn hasEvent() ? getLastEvent().getState() : null;\n    }\n\n    @Override\n    public void onStateChanged(final StateChangedEvent event) {\n\taddEvent(event);\n    }\n\n}",
        "start_point": {
            "row": 5,
            "column": 0
        },
        "end_point": {
            "row": 15,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/StateChangedTestHandler.java",
        "methods": [
            {
                "definition": "public String getLastState() {\nurn hasEvent() ? getLastEvent().getState() : null;\n}",
                "name": "getLastState",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [],
                "body": "{\nurn hasEvent() ? getLastEvent().getState() : null;\n}",
                "start_point": {
                    "row": 6,
                    "column": 4
                },
                "end_point": {
                    "row": 8,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void onStateChanged(final StateChangedEvent event) {\nEvent(event);\n}",
                "name": "onStateChanged",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "StateChangedEvent"
                    }
                ],
                "body": "{\nEvent(event);\n}",
                "start_point": {
                    "row": 10,
                    "column": 4
                },
                "end_point": {
                    "row": 13,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/handlers/TestHandler.java",
        "definition": "public abstract class TestHandler<T> {\n    private final ArrayList<T> events;\n\n    public TestHandler() {\n\tevents = new ArrayList<T>();\n    }\n\n    public int getCalledTimes() {\n\treturn events.size();\n    }\n\n    public T getEvent(int index) {\n\treturn events.get(index);\n    }\n\n    public T getLastEvent() {\n\tint size = getCalledTimes();\n\treturn size > 0 ? events.get(size - 1) : null;\n    }\n\n    public boolean hasEvent() {\n\treturn isCalledOnce();\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    public void addEvent(final T event) {\n\tevents.add(event);\n    }\n}",
        "package": "package com.calclab.emite.xtesting.handlers;",
        "tree_path": "TestHandler",
        "name": "TestHandler",
        "modifiers": "public abstract",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    private final ArrayList<T> events;\n\n    public TestHandler() {\n\tevents = new ArrayList<T>();\n    }\n\n    public int getCalledTimes() {\n\treturn events.size();\n    }\n\n    public T getEvent(int index) {\n\treturn events.get(index);\n    }\n\n    public T getLastEvent() {\n\tint size = getCalledTimes();\n\treturn size > 0 ? events.get(size - 1) : null;\n    }\n\n    public boolean hasEvent() {\n\treturn isCalledOnce();\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    public void addEvent(final T event) {\n\tevents.add(event);\n    }\n}",
        "start_point": {
            "row": 4,
            "column": 0
        },
        "end_point": {
            "row": 35,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/handlers/TestHandler.java",
        "methods": [
            {
                "definition": "public TestHandler() {\nnts = new ArrayList<T>();\n}",
                "name": "TestHandler",
                "modifiers": "public",
                "parameters": [],
                "body": "{\nnts = new ArrayList<T>();\n}",
                "constructor": true,
                "start_point": {
                    "row": 7,
                    "column": 4
                },
                "end_point": {
                    "row": 9,
                    "column": 5
                }
            },
            {
                "definition": "public int getCalledTimes() {\nurn events.size();\n}",
                "name": "getCalledTimes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn events.size();\n}",
                "start_point": {
                    "row": 11,
                    "column": 4
                },
                "end_point": {
                    "row": 13,
                    "column": 5
                }
            },
            {
                "definition": "public T getEvent(int index) {\nurn events.get(index);\n}",
                "name": "getEvent",
                "modifiers": "public",
                "return_type": "T",
                "parameters": [
                    {
                        "type": "int",
                        "name": "index"
                    }
                ],
                "body": "{\nurn events.get(index);\n}",
                "start_point": {
                    "row": 15,
                    "column": 4
                },
                "end_point": {
                    "row": 17,
                    "column": 5
                }
            },
            {
                "definition": "public T getLastEvent() {\n size = getCalledTimes();\nurn size > 0 ? events.get(size - 1) : null;\n}",
                "name": "getLastEvent",
                "modifiers": "public",
                "return_type": "T",
                "parameters": [],
                "body": "{\n size = getCalledTimes();\nurn size > 0 ? events.get(size - 1) : null;\n}",
                "start_point": {
                    "row": 19,
                    "column": 4
                },
                "end_point": {
                    "row": 22,
                    "column": 5
                }
            },
            {
                "definition": "public boolean hasEvent() {\nurn isCalledOnce();\n}",
                "name": "hasEvent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn isCalledOnce();\n}",
                "start_point": {
                    "row": 24,
                    "column": 4
                },
                "end_point": {
                    "row": 26,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledOnce() {\nurn getCalledTimes() == 1;\n}",
                "name": "isCalledOnce",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() == 1;\n}",
                "start_point": {
                    "row": 28,
                    "column": 4
                },
                "end_point": {
                    "row": 30,
                    "column": 5
                }
            },
            {
                "definition": "public void addEvent(final T event) {\nnts.add(event);\n}",
                "name": "addEvent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "T"
                    }
                ],
                "body": "{\nnts.add(event);\n}",
                "start_point": {
                    "row": 32,
                    "column": 4
                },
                "end_point": {
                    "row": 34,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/matchers/EmiteAsserts.java",
        "definition": "public class EmiteAsserts {\n\n    public static TigaseXMLService service = new TigaseXMLService();\n\n    public static void assertNotPacketLike(final IPacket expectedPacket, final IPacket actualPacket) {\n\tfinal IsPacketLike m = new IsPacketLike(expectedPacket);\n\tassertFalse(\"\" + actualPacket + \" should not match \" + expectedPacket, m.matches(actualPacket, System.out));\n    }\n\n    public static void assertNotPacketLike(final String expected, final String actual) {\n\tfinal IPacket expectedPacket = service.toXML(expected);\n\tfinal IPacket actualPacket = service.toXML(actual);\n\tassertNotPacketLike(expectedPacket, actualPacket);\n    }\n\n    public static void assertPacketLike(final IPacket expectedPacket, final IPacket actualPacket) {\n\tfinal IsPacketLike m = new IsPacketLike(expectedPacket);\n\tassertTrue(\"\" + actualPacket + \" didn't match \" + expectedPacket, m.matches(actualPacket, System.out));\n    }\n\n    public static void assertPacketLike(final String expected, final IPacket actual) {\n\tassertPacketLike(service.toXML(expected), actual);\n    }\n\n    public static void assertPacketLike(final String expected, final String actual) {\n\tfinal IPacket expectedPacket = service.toXML(expected);\n\tfinal IPacket actualPacket = service.toXML(actual);\n\tassertPacketLike(expectedPacket, actualPacket);\n    }\n}",
        "package": "package com.calclab.emite.xtesting.matchers;",
        "tree_path": "EmiteAsserts",
        "name": "EmiteAsserts",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public static TigaseXMLService service = new TigaseXMLService();\n\n    public static void assertNotPacketLike(final IPacket expectedPacket, final IPacket actualPacket) {\n\tfinal IsPacketLike m = new IsPacketLike(expectedPacket);\n\tassertFalse(\"\" + actualPacket + \" should not match \" + expectedPacket, m.matches(actualPacket, System.out));\n    }\n\n    public static void assertNotPacketLike(final String expected, final String actual) {\n\tfinal IPacket expectedPacket = service.toXML(expected);\n\tfinal IPacket actualPacket = service.toXML(actual);\n\tassertNotPacketLike(expectedPacket, actualPacket);\n    }\n\n    public static void assertPacketLike(final IPacket expectedPacket, final IPacket actualPacket) {\n\tfinal IsPacketLike m = new IsPacketLike(expectedPacket);\n\tassertTrue(\"\" + actualPacket + \" didn't match \" + expectedPacket, m.matches(actualPacket, System.out));\n    }\n\n    public static void assertPacketLike(final String expected, final IPacket actual) {\n\tassertPacketLike(service.toXML(expected), actual);\n    }\n\n    public static void assertPacketLike(final String expected, final String actual) {\n\tfinal IPacket expectedPacket = service.toXML(expected);\n\tfinal IPacket actualPacket = service.toXML(actual);\n\tassertPacketLike(expectedPacket, actualPacket);\n    }\n}",
        "start_point": {
            "row": 8,
            "column": 0
        },
        "end_point": {
            "row": 37,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/matchers/EmiteAsserts.java",
        "methods": [
            {
                "definition": "public static void assertNotPacketLike(final IPacket expectedPacket, final IPacket actualPacket) {\nal IsPacketLike m = new IsPacketLike(expectedPacket);\nertFalse(\"\" + actualPacket + \" should not match \" + expectedPacket, m.matches(actualPacket, System.out));\n}",
                "name": "assertNotPacketLike",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nal IsPacketLike m = new IsPacketLike(expectedPacket);\nertFalse(\"\" + actualPacket + \" should not match \" + expectedPacket, m.matches(actualPacket, System.out));\n}",
                "start_point": {
                    "row": 12,
                    "column": 4
                },
                "end_point": {
                    "row": 15,
                    "column": 5
                }
            },
            {
                "definition": "public static void assertNotPacketLike(final String expected, final String actual) {\nal IPacket expectedPacket = service.toXML(expected);\nal IPacket actualPacket = service.toXML(actual);\nertNotPacketLike(expectedPacket, actualPacket);\n}",
                "name": "assertNotPacketLike",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal IPacket expectedPacket = service.toXML(expected);\nal IPacket actualPacket = service.toXML(actual);\nertNotPacketLike(expectedPacket, actualPacket);\n}",
                "start_point": {
                    "row": 17,
                    "column": 4
                },
                "end_point": {
                    "row": 21,
                    "column": 5
                }
            },
            {
                "definition": "public static void assertPacketLike(final IPacket expectedPacket, final IPacket actualPacket) {\nal IsPacketLike m = new IsPacketLike(expectedPacket);\nertTrue(\"\" + actualPacket + \" didn't match \" + expectedPacket, m.matches(actualPacket, System.out));\n}",
                "name": "assertPacketLike",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nal IsPacketLike m = new IsPacketLike(expectedPacket);\nertTrue(\"\" + actualPacket + \" didn't match \" + expectedPacket, m.matches(actualPacket, System.out));\n}",
                "start_point": {
                    "row": 23,
                    "column": 4
                },
                "end_point": {
                    "row": 26,
                    "column": 5
                }
            },
            {
                "definition": "public static void assertPacketLike(final String expected, final IPacket actual) {\nertPacketLike(service.toXML(expected), actual);\n}",
                "name": "assertPacketLike",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nertPacketLike(service.toXML(expected), actual);\n}",
                "start_point": {
                    "row": 28,
                    "column": 4
                },
                "end_point": {
                    "row": 30,
                    "column": 5
                }
            },
            {
                "definition": "public static void assertPacketLike(final String expected, final String actual) {\nal IPacket expectedPacket = service.toXML(expected);\nal IPacket actualPacket = service.toXML(actual);\nertPacketLike(expectedPacket, actualPacket);\n}",
                "name": "assertPacketLike",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal IPacket expectedPacket = service.toXML(expected);\nal IPacket actualPacket = service.toXML(actual);\nertPacketLike(expectedPacket, actualPacket);\n}",
                "start_point": {
                    "row": 32,
                    "column": 4
                },
                "end_point": {
                    "row": 36,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/matchers/IsPacketLike.java",
        "definition": "public class IsPacketLike {\n    public static IsPacketLike build(final String xml) {\n\tfinal IPacket packet = TigaseXMLService.toPacket(xml);\n\treturn new IsPacketLike(packet);\n    }\n\n    private final IPacket original;\n\n    public IsPacketLike(final IPacket expected) {\n\tthis.original = expected;\n    }\n\n    public boolean matches(final IPacket actual, final PrintStream out) {\n\tfinal String result = areEquals(original, actual);\n\tout.print(result);\n\treturn result == null;\n    }\n\n    private String areContained(final IPacket expectedChild, final List<? extends IPacket> children) {\n\tfinal int total = children.size();\n\tfor (int index = 0; index < total; index++) {\n\t    final IPacket actual = children.get(index);\n\t    final String result = areEquals(expectedChild, actual);\n\t    if (result == null) {\n\t\treturn null;\n\t    }\n\t}\n\treturn fail(\"child is not contained in children\", expectedChild.toString(), toString(children));\n    }\n\n    private String areEquals(final IPacket expected, final IPacket actual) {\n\tif (actual == null) {\n\t    return fail(\"element\", expected.toString(), \"[null]\");\n\t}\n\tif (expected.getName().equals(actual.getName())) {\n\t    final HashMap<String, String> atts = expected.getAttributes();\n\t    for (final String name : atts.keySet()) {\n\t\tif (!expected.hasAttribute(name) || !actual.hasAttribute(name, expected.getAttribute(name))) {\n\t\t    return fail(\"attribute \" + name, expected.getAttribute(name), actual.getAttribute(name));\n\t\t}\n\t    }\n\t} else {\n\t    return fail(\"element name\", expected.getName(), actual.getName());\n\t}\n\n\tfinal String expectedText = expected.getText();\n\tif (expectedText != null && !expectedText.equals(actual.getText())) {\n\t    return fail(\"text value\", expectedText, actual.getText());\n\t}\n\n\tfinal List<? extends IPacket> expChildren = expected.getChildren();\n\tfinal List<? extends IPacket> actChildren = actual.getChildren();\n\n\tfor (final IPacket expectedChild : expChildren) {\n\t    final String result = areContained(expectedChild, actChildren);\n\t    if (result != null) {\n\t\treturn result;\n\t    }\n\t}\n\treturn null;\n    }\n\n    private String fail(final String target, final String expected, final String actual) {\n\treturn \"failed on \" + target + \". expected: \" + expected + \" but was \" + actual;\n    }\n\n    private String toString(final List<? extends IPacket> children) {\n\tfinal StringBuffer buffer = new StringBuffer(\"[\");\n\tfor (final IPacket child : children) {\n\t    buffer.append(child.toString());\n\t}\n\tbuffer.append(\"]\");\n\treturn buffer.toString();\n    }\n}",
        "package": "package com.calclab.emite.xtesting.matchers;",
        "tree_path": "IsPacketLike",
        "name": "IsPacketLike",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    public static IsPacketLike build(final String xml) {\n\tfinal IPacket packet = TigaseXMLService.toPacket(xml);\n\treturn new IsPacketLike(packet);\n    }\n\n    private final IPacket original;\n\n    public IsPacketLike(final IPacket expected) {\n\tthis.original = expected;\n    }\n\n    public boolean matches(final IPacket actual, final PrintStream out) {\n\tfinal String result = areEquals(original, actual);\n\tout.print(result);\n\treturn result == null;\n    }\n\n    private String areContained(final IPacket expectedChild, final List<? extends IPacket> children) {\n\tfinal int total = children.size();\n\tfor (int index = 0; index < total; index++) {\n\t    final IPacket actual = children.get(index);\n\t    final String result = areEquals(expectedChild, actual);\n\t    if (result == null) {\n\t\treturn null;\n\t    }\n\t}\n\treturn fail(\"child is not contained in children\", expectedChild.toString(), toString(children));\n    }\n\n    private String areEquals(final IPacket expected, final IPacket actual) {\n\tif (actual == null) {\n\t    return fail(\"element\", expected.toString(), \"[null]\");\n\t}\n\tif (expected.getName().equals(actual.getName())) {\n\t    final HashMap<String, String> atts = expected.getAttributes();\n\t    for (final String name : atts.keySet()) {\n\t\tif (!expected.hasAttribute(name) || !actual.hasAttribute(name, expected.getAttribute(name))) {\n\t\t    return fail(\"attribute \" + name, expected.getAttribute(name), actual.getAttribute(name));\n\t\t}\n\t    }\n\t} else {\n\t    return fail(\"element name\", expected.getName(), actual.getName());\n\t}\n\n\tfinal String expectedText = expected.getText();\n\tif (expectedText != null && !expectedText.equals(actual.getText())) {\n\t    return fail(\"text value\", expectedText, actual.getText());\n\t}\n\n\tfinal List<? extends IPacket> expChildren = expected.getChildren();\n\tfinal List<? extends IPacket> actChildren = actual.getChildren();\n\n\tfor (final IPacket expectedChild : expChildren) {\n\t    final String result = areContained(expectedChild, actChildren);\n\t    if (result != null) {\n\t\treturn result;\n\t    }\n\t}\n\treturn null;\n    }\n\n    private String fail(final String target, final String expected, final String actual) {\n\treturn \"failed on \" + target + \". expected: \" + expected + \" but was \" + actual;\n    }\n\n    private String toString(final List<? extends IPacket> children) {\n\tfinal StringBuffer buffer = new StringBuffer(\"[\");\n\tfor (final IPacket child : children) {\n\t    buffer.append(child.toString());\n\t}\n\tbuffer.append(\"]\");\n\treturn buffer.toString();\n    }\n}",
        "start_point": {
            "row": 12,
            "column": 0
        },
        "end_point": {
            "row": 86,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/matchers/IsPacketLike.java",
        "methods": [
            {
                "definition": "public static IsPacketLike build(final String xml) {\nal IPacket packet = TigaseXMLService.toPacket(xml);\nurn new IsPacketLike(packet);\n}",
                "name": "build",
                "modifiers": "public static",
                "return_type": "IsPacketLike",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal IPacket packet = TigaseXMLService.toPacket(xml);\nurn new IsPacketLike(packet);\n}",
                "start_point": {
                    "row": 13,
                    "column": 4
                },
                "end_point": {
                    "row": 16,
                    "column": 5
                }
            },
            {
                "definition": "public IsPacketLike(final IPacket expected) {\ns.original = expected;\n}",
                "name": "IsPacketLike",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\ns.original = expected;\n}",
                "constructor": true,
                "start_point": {
                    "row": 20,
                    "column": 4
                },
                "end_point": {
                    "row": 22,
                    "column": 5
                }
            },
            {
                "definition": "public boolean matches(final IPacket actual, final PrintStream out) {\nal String result = areEquals(original, actual);\n.print(result);\nurn result == null;\n}",
                "name": "matches",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "PrintStream"
                    }
                ],
                "body": "{\nal String result = areEquals(original, actual);\n.print(result);\nurn result == null;\n}",
                "start_point": {
                    "row": 24,
                    "column": 4
                },
                "end_point": {
                    "row": 28,
                    "column": 5
                }
            },
            {
                "definition": "private String areContained(final IPacket expectedChild, final List<? extends IPacket> children) {\nal int total = children.size();\n (int index = 0; index < total; index++) {\n final IPacket actual = children.get(index);\n final String result = areEquals(expectedChild, actual);\n if (result == null) {\nturn null;\n }\n\nurn fail(\"child is not contained in children\", expectedChild.toString(), toString(children));\n}",
                "name": "areContained",
                "modifiers": "private",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "List<? extends IPacket>"
                    }
                ],
                "body": "{\nal int total = children.size();\n (int index = 0; index < total; index++) {\n final IPacket actual = children.get(index);\n final String result = areEquals(expectedChild, actual);\n if (result == null) {\nturn null;\n }\n\nurn fail(\"child is not contained in children\", expectedChild.toString(), toString(children));\n}",
                "start_point": {
                    "row": 30,
                    "column": 4
                },
                "end_point": {
                    "row": 40,
                    "column": 5
                }
            },
            {
                "definition": "private String areEquals(final IPacket expected, final IPacket actual) {\n(actual == null) {\n return fail(\"element\", expected.toString(), \"[null]\");\n\n(expected.getName().equals(actual.getName())) {\n final HashMap<String, String> atts = expected.getAttributes();\n for (final String name : atts.keySet()) {\n (!expected.hasAttribute(name) || !actual.hasAttribute(name, expected.getAttribute(name))) {\n  return fail(\"attribute \" + name, expected.getAttribute(name), actual.getAttribute(name));\n\n }\nlse {\n return fail(\"element name\", expected.getName(), actual.getName());\n\n\nal String expectedText = expected.getText();\n(expectedText != null && !expectedText.equals(actual.getText())) {\n return fail(\"text value\", expectedText, actual.getText());\n\n\nal List<? extends IPacket> expChildren = expected.getChildren();\nal List<? extends IPacket> actChildren = actual.getChildren();\n\n (final IPacket expectedChild : expChildren) {\n final String result = areContained(expectedChild, actChildren);\n if (result != null) {\nturn result;\n }\n\nurn null;\n}",
                "name": "areEquals",
                "modifiers": "private",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    },
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\n(actual == null) {\n return fail(\"element\", expected.toString(), \"[null]\");\n\n(expected.getName().equals(actual.getName())) {\n final HashMap<String, String> atts = expected.getAttributes();\n for (final String name : atts.keySet()) {\n (!expected.hasAttribute(name) || !actual.hasAttribute(name, expected.getAttribute(name))) {\n  return fail(\"attribute \" + name, expected.getAttribute(name), actual.getAttribute(name));\n\n }\nlse {\n return fail(\"element name\", expected.getName(), actual.getName());\n\n\nal String expectedText = expected.getText();\n(expectedText != null && !expectedText.equals(actual.getText())) {\n return fail(\"text value\", expectedText, actual.getText());\n\n\nal List<? extends IPacket> expChildren = expected.getChildren();\nal List<? extends IPacket> actChildren = actual.getChildren();\n\n (final IPacket expectedChild : expChildren) {\n final String result = areContained(expectedChild, actChildren);\n if (result != null) {\nturn result;\n }\n\nurn null;\n}",
                "start_point": {
                    "row": 42,
                    "column": 4
                },
                "end_point": {
                    "row": 72,
                    "column": 5
                }
            },
            {
                "definition": "private String fail(final String target, final String expected, final String actual) {\nurn \"failed on \" + target + \". expected: \" + expected + \" but was \" + actual;\n}",
                "name": "fail",
                "modifiers": "private",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nurn \"failed on \" + target + \". expected: \" + expected + \" but was \" + actual;\n}",
                "start_point": {
                    "row": 74,
                    "column": 4
                },
                "end_point": {
                    "row": 76,
                    "column": 5
                }
            },
            {
                "definition": "private String toString(final List<? extends IPacket> children) {\nal StringBuffer buffer = new StringBuffer(\"[\");\n (final IPacket child : children) {\n buffer.append(child.toString());\n\nfer.append(\"]\");\nurn buffer.toString();\n}",
                "name": "toString",
                "modifiers": "private",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "List<? extends IPacket>"
                    }
                ],
                "body": "{\nal StringBuffer buffer = new StringBuffer(\"[\");\n (final IPacket child : children) {\n buffer.append(child.toString());\n\nfer.append(\"]\");\nurn buffer.toString();\n}",
                "start_point": {
                    "row": 78,
                    "column": 4
                },
                "end_point": {
                    "row": 85,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "definition": "public class HttpConnector {\n\n    private static class HttpConnectorID {\n\tprivate static int id = 0;\n\n\tpublic static String getNext() {\n\t    id++;\n\t    return String.valueOf(id);\n\t}\n\n    }\n\n    private final ExecutorService sendService;\n    private final ExecutorService receiveService;\n\n    public HttpConnector() {\n\tsendService = Executors.newCachedThreadPool();\n\treceiveService = Executors.newFixedThreadPool(1);\n    }\n\n    public synchronized void send(final String httpBase, final String xml, final ConnectorCallback callback)\n\t    throws ConnectorException {\n\n\tsendService.execute(createSendAction(httpBase, xml, callback));\n    }\n\n    protected void debug(final String pattern, final Object... arguments) {\n\t// FIXME\n\tMessageFormat.format(pattern, arguments);\n    }\n\n    private Runnable createResponseAction(final String xml, final ConnectorCallback callback, final String id,\n\t    final int status, final String response) {\n\tfinal Runnable runnable = new Runnable() {\n\t    public void run() {\n\t\tif (status == HttpStatus.SC_OK) {\n\t\t    System.out.println(\"RECEIVED: \" + response);\n\t\t    debug(\"Connector [{0}] receive: {1}\", id, response);\n\t\t    callback.onResponseReceived(status, response, xml);\n\t\t} else {\n\t\t    debug(\"Connector [{0}] bad status: {1}\", id, status);\n\t\t    callback.onError(xml, new Exception(\"bad http status \" + status));\n\t\t}\n\n\t    }\n\n\t};\n\treturn runnable;\n    }\n\n    private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {\n\treturn new Runnable() {\n\t    public void run() {\n\t\tfinal String id = HttpConnectorID.getNext();\n\t\tdebug(\"Connector [{0}] send: {1}\", id, xml);\n\t\tfinal HttpClientParams params = new HttpClientParams();\n\t\tparams.setConnectionManagerTimeout(10000);\n\t\tfinal HttpClient client = new HttpClient(params);\n\t\tint status = 0;\n\t\tString response = null;\n\t\tfinal PostMethod post = new PostMethod(httpBase);\n\n\t\ttry {\n\t\t    post.setRequestEntity(new StringRequestEntity(xml, \"text/xml\", \"utf-8\"));\n\t\t    System.out.println(\"SENDING: \" + xml);\n\t\t    status = client.executeMethod(post);\n\t\t    response = post.getResponseBodyAsString();\n\t\t} catch (final Exception e) {\n\t\t    callback.onError(xml, e);\n\t\t    e.printStackTrace();\n\t\t} finally {\n\t\t    post.releaseConnection();\n\t\t}\n\n\t\treceiveService.execute(createResponseAction(xml, callback, id, status, response));\n\t    }\n\t};\n    }\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "HttpConnector",
        "name": "HttpConnector",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    private static class HttpConnectorID {\n\tprivate static int id = 0;\n\n\tpublic static String getNext() {\n\t    id++;\n\t    return String.valueOf(id);\n\t}\n\n    }\n\n    private final ExecutorService sendService;\n    private final ExecutorService receiveService;\n\n    public HttpConnector() {\n\tsendService = Executors.newCachedThreadPool();\n\treceiveService = Executors.newFixedThreadPool(1);\n    }\n\n    public synchronized void send(final String httpBase, final String xml, final ConnectorCallback callback)\n\t    throws ConnectorException {\n\n\tsendService.execute(createSendAction(httpBase, xml, callback));\n    }\n\n    protected void debug(final String pattern, final Object... arguments) {\n\t// FIXME\n\tMessageFormat.format(pattern, arguments);\n    }\n\n    private Runnable createResponseAction(final String xml, final ConnectorCallback callback, final String id,\n\t    final int status, final String response) {\n\tfinal Runnable runnable = new Runnable() {\n\t    public void run() {\n\t\tif (status == HttpStatus.SC_OK) {\n\t\t    System.out.println(\"RECEIVED: \" + response);\n\t\t    debug(\"Connector [{0}] receive: {1}\", id, response);\n\t\t    callback.onResponseReceived(status, response, xml);\n\t\t} else {\n\t\t    debug(\"Connector [{0}] bad status: {1}\", id, status);\n\t\t    callback.onError(xml, new Exception(\"bad http status \" + status));\n\t\t}\n\n\t    }\n\n\t};\n\treturn runnable;\n    }\n\n    private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {\n\treturn new Runnable() {\n\t    public void run() {\n\t\tfinal String id = HttpConnectorID.getNext();\n\t\tdebug(\"Connector [{0}] send: {1}\", id, xml);\n\t\tfinal HttpClientParams params = new HttpClientParams();\n\t\tparams.setConnectionManagerTimeout(10000);\n\t\tfinal HttpClient client = new HttpClient(params);\n\t\tint status = 0;\n\t\tString response = null;\n\t\tfinal PostMethod post = new PostMethod(httpBase);\n\n\t\ttry {\n\t\t    post.setRequestEntity(new StringRequestEntity(xml, \"text/xml\", \"utf-8\"));\n\t\t    System.out.println(\"SENDING: \" + xml);\n\t\t    status = client.executeMethod(post);\n\t\t    response = post.getResponseBodyAsString();\n\t\t} catch (final Exception e) {\n\t\t    callback.onError(xml, e);\n\t\t    e.printStackTrace();\n\t\t} finally {\n\t\t    post.releaseConnection();\n\t\t}\n\n\t\treceiveService.execute(createResponseAction(xml, callback, id, status, response));\n\t    }\n\t};\n    }\n}",
        "start_point": {
            "row": 36,
            "column": 0
        },
        "end_point": {
            "row": 114,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "methods": [
            {
                "definition": "public HttpConnector() {\ndService = Executors.newCachedThreadPool();\neiveService = Executors.newFixedThreadPool(1);\n}",
                "name": "HttpConnector",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ndService = Executors.newCachedThreadPool();\neiveService = Executors.newFixedThreadPool(1);\n}",
                "constructor": true,
                "start_point": {
                    "row": 51,
                    "column": 4
                },
                "end_point": {
                    "row": 54,
                    "column": 5
                }
            },
            {
                "definition": "public synchronized void send(final String httpBase, final String xml, final ConnectorCallback callback)\n throws ConnectorException {\n\ndService.execute(createSendAction(httpBase, xml, callback));\n}",
                "name": "send",
                "modifiers": "public synchronized",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    }
                ],
                "body": "{\n\ndService.execute(createSendAction(httpBase, xml, callback));\n}",
                "start_point": {
                    "row": 56,
                    "column": 4
                },
                "end_point": {
                    "row": 60,
                    "column": 5
                }
            },
            {
                "definition": "protected void debug(final String pattern, final Object... arguments) {\nFIXME\nsageFormat.format(pattern, arguments);\n}",
                "name": "debug",
                "modifiers": "protected",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nFIXME\nsageFormat.format(pattern, arguments);\n}",
                "start_point": {
                    "row": 62,
                    "column": 4
                },
                "end_point": {
                    "row": 65,
                    "column": 5
                }
            },
            {
                "definition": "private Runnable createResponseAction(final String xml, final ConnectorCallback callback, final String id,\n final int status, final String response) {\nal Runnable runnable = new Runnable() {\n public void run() {\n (status == HttpStatus.SC_OK) {\n  System.out.println(\"RECEIVED: \" + response);\n  debug(\"Connector [{0}] receive: {1}\", id, response);\n  callback.onResponseReceived(status, response, xml);\nelse {\n  debug(\"Connector [{0}] bad status: {1}\", id, status);\n  callback.onError(xml, new Exception(\"bad http status \" + status));\n\n\n }\n\n\nurn runnable;\n}",
                "name": "createResponseAction",
                "modifiers": "private",
                "return_type": "Runnable",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "int"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal Runnable runnable = new Runnable() {\n public void run() {\n (status == HttpStatus.SC_OK) {\n  System.out.println(\"RECEIVED: \" + response);\n  debug(\"Connector [{0}] receive: {1}\", id, response);\n  callback.onResponseReceived(status, response, xml);\nelse {\n  debug(\"Connector [{0}] bad status: {1}\", id, status);\n  callback.onError(xml, new Exception(\"bad http status \" + status));\n\n\n }\n\n\nurn runnable;\n}",
                "start_point": {
                    "row": 67,
                    "column": 4
                },
                "end_point": {
                    "row": 84,
                    "column": 5
                }
            },
            {
                "definition": "private Runnable createSendAction(final String httpBase, final String xml, final ConnectorCallback callback) {\nurn new Runnable() {\n public void run() {\nnal String id = HttpConnectorID.getNext();\nbug(\"Connector [{0}] send: {1}\", id, xml);\nnal HttpClientParams params = new HttpClientParams();\nrams.setConnectionManagerTimeout(10000);\nnal HttpClient client = new HttpClient(params);\nt status = 0;\nring response = null;\nnal PostMethod post = new PostMethod(httpBase);\n\ny {\n  post.setRequestEntity(new StringRequestEntity(xml, \"text/xml\", \"utf-8\"));\n  System.out.println(\"SENDING: \" + xml);\n  status = client.executeMethod(post);\n  response = post.getResponseBodyAsString();\ncatch (final Exception e) {\n  callback.onError(xml, e);\n  e.printStackTrace();\nfinally {\n  post.releaseConnection();\n\n\nceiveService.execute(createResponseAction(xml, callback, id, status, response));\n }\n\n}",
                "name": "createSendAction",
                "modifiers": "private",
                "return_type": "Runnable",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    }
                ],
                "body": "{\nurn new Runnable() {\n public void run() {\nnal String id = HttpConnectorID.getNext();\nbug(\"Connector [{0}] send: {1}\", id, xml);\nnal HttpClientParams params = new HttpClientParams();\nrams.setConnectionManagerTimeout(10000);\nnal HttpClient client = new HttpClient(params);\nt status = 0;\nring response = null;\nnal PostMethod post = new PostMethod(httpBase);\n\ny {\n  post.setRequestEntity(new StringRequestEntity(xml, \"text/xml\", \"utf-8\"));\n  System.out.println(\"SENDING: \" + xml);\n  status = client.executeMethod(post);\n  response = post.getResponseBodyAsString();\ncatch (final Exception e) {\n  callback.onError(xml, e);\n  e.printStackTrace();\nfinally {\n  post.releaseConnection();\n\n\nceiveService.execute(createResponseAction(xml, callback, id, status, response));\n }\n\n}",
                "start_point": {
                    "row": 86,
                    "column": 4
                },
                "end_point": {
                    "row": 113,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "definition": "private static class HttpConnectorID {\nvate static int id = 0;\n\nlic static String getNext() {\n id++;\n return String.valueOf(id);\n\n\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "HttpConnector.HttpConnectorID",
        "name": "HttpConnectorID",
        "modifiers": "private static",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\nvate static int id = 0;\n\nlic static String getNext() {\n id++;\n return String.valueOf(id);\n\n\n}",
        "start_point": {
            "row": 38,
            "column": 4
        },
        "end_point": {
            "row": 46,
            "column": 5
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/services/HttpConnector.java",
        "methods": [
            {
                "definition": "public static String getNext() {\n    id++;\n    return String.valueOf(id);\n}",
                "name": "getNext",
                "modifiers": "public static",
                "return_type": "String",
                "parameters": [],
                "body": "{\n    id++;\n    return String.valueOf(id);\n}",
                "start_point": {
                    "row": 41,
                    "column": 1
                },
                "end_point": {
                    "row": 44,
                    "column": 2
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/services/J2SEServicesModule.java",
        "definition": "public class J2SEServicesModule implements Services, SucoModule {\n    private final HttpConnector connector;\n\n    private final ThreadScheduler scheduler;\n    private final TigaseXMLService xmler;\n\n    public J2SEServicesModule() {\n\tthis.connector = new HttpConnector();\n\tscheduler = new ThreadScheduler();\n\txmler = new TigaseXMLService();\n    }\n\n    public long getCurrentTime() {\n\treturn scheduler.getCurrentTime();\n    }\n\n    public void onInstall(final Container container) {\n\tcontainer.removeProvider(Services.class);\n\tcontainer.registerProvider(null, Services.class, new Provider<Services>() {\n\t    public Services get() {\n\t\treturn J2SEServicesModule.this;\n\t    }\n\t});\n    }\n\n    public void schedule(final int msecs, final ScheduledAction action) {\n\tscheduler.schedule(msecs, action);\n    }\n\n    public void send(final String httpBase, final String xml, final ConnectorCallback listener)\n\t    throws ConnectorException {\n\tconnector.send(httpBase, xml, listener);\n    }\n\n    public String toString(final IPacket packet) {\n\treturn xmler.toString(packet);\n    }\n\n    public IPacket toXML(final String xml) {\n\treturn xmler.toXML(xml);\n    }\n\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "J2SEServicesModule",
        "name": "J2SEServicesModule",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements Services, SucoModule",
        "body": "{\n    private final HttpConnector connector;\n\n    private final ThreadScheduler scheduler;\n    private final TigaseXMLService xmler;\n\n    public J2SEServicesModule() {\n\tthis.connector = new HttpConnector();\n\tscheduler = new ThreadScheduler();\n\txmler = new TigaseXMLService();\n    }\n\n    public long getCurrentTime() {\n\treturn scheduler.getCurrentTime();\n    }\n\n    public void onInstall(final Container container) {\n\tcontainer.removeProvider(Services.class);\n\tcontainer.registerProvider(null, Services.class, new Provider<Services>() {\n\t    public Services get() {\n\t\treturn J2SEServicesModule.this;\n\t    }\n\t});\n    }\n\n    public void schedule(final int msecs, final ScheduledAction action) {\n\tscheduler.schedule(msecs, action);\n    }\n\n    public void send(final String httpBase, final String xml, final ConnectorCallback listener)\n\t    throws ConnectorException {\n\tconnector.send(httpBase, xml, listener);\n    }\n\n    public String toString(final IPacket packet) {\n\treturn xmler.toString(packet);\n    }\n\n    public IPacket toXML(final String xml) {\n\treturn xmler.toXML(xml);\n    }\n\n}",
        "start_point": {
            "row": 32,
            "column": 0
        },
        "end_point": {
            "row": 74,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/services/J2SEServicesModule.java",
        "methods": [
            {
                "definition": "public J2SEServicesModule() {\ns.connector = new HttpConnector();\neduler = new ThreadScheduler();\ner = new TigaseXMLService();\n}",
                "name": "J2SEServicesModule",
                "modifiers": "public",
                "parameters": [],
                "body": "{\ns.connector = new HttpConnector();\neduler = new ThreadScheduler();\ner = new TigaseXMLService();\n}",
                "constructor": true,
                "start_point": {
                    "row": 38,
                    "column": 4
                },
                "end_point": {
                    "row": 42,
                    "column": 5
                }
            },
            {
                "definition": "public long getCurrentTime() {\nurn scheduler.getCurrentTime();\n}",
                "name": "getCurrentTime",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn scheduler.getCurrentTime();\n}",
                "start_point": {
                    "row": 44,
                    "column": 4
                },
                "end_point": {
                    "row": 46,
                    "column": 5
                }
            },
            {
                "definition": "public void onInstall(final Container container) {\ntainer.removeProvider(Services.class);\ntainer.registerProvider(null, Services.class, new Provider<Services>() {\n public Services get() {\nturn J2SEServicesModule.this;\n }\n\n}",
                "name": "onInstall",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Container"
                    }
                ],
                "body": "{\ntainer.removeProvider(Services.class);\ntainer.registerProvider(null, Services.class, new Provider<Services>() {\n public Services get() {\nturn J2SEServicesModule.this;\n }\n\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 55,
                    "column": 5
                }
            },
            {
                "definition": "public void schedule(final int msecs, final ScheduledAction action) {\neduler.schedule(msecs, action);\n}",
                "name": "schedule",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    },
                    {
                        "type": "final",
                        "name": "ScheduledAction"
                    }
                ],
                "body": "{\neduler.schedule(msecs, action);\n}",
                "start_point": {
                    "row": 57,
                    "column": 4
                },
                "end_point": {
                    "row": 59,
                    "column": 5
                }
            },
            {
                "definition": "public void send(final String httpBase, final String xml, final ConnectorCallback listener)\n throws ConnectorException {\nnector.send(httpBase, xml, listener);\n}",
                "name": "send",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "ConnectorCallback"
                    }
                ],
                "body": "{\nnector.send(httpBase, xml, listener);\n}",
                "start_point": {
                    "row": 61,
                    "column": 4
                },
                "end_point": {
                    "row": 64,
                    "column": 5
                }
            },
            {
                "definition": "public String toString(final IPacket packet) {\nurn xmler.toString(packet);\n}",
                "name": "toString",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nurn xmler.toString(packet);\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "public IPacket toXML(final String xml) {\nurn xmler.toXML(xml);\n}",
                "name": "toXML",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nurn xmler.toXML(xml);\n}",
                "start_point": {
                    "row": 70,
                    "column": 4
                },
                "end_point": {
                    "row": 72,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/services/J2SEXmppDateTimeFormatter.java",
        "definition": "public class J2SEXmppDateTimeFormatter implements XmppDateTimeFormatter {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-ddTHH:mm:ss[.sss]Z\");\n    SimpleDateFormat deprecatedSdf = new SimpleDateFormat(\"yyyy-MM-ddTHH:mm:ss[.sss]Z\");\n\n    @Override\n    public String formatLegacyFormatXmppDateTime(Date dateTime) {\n\treturn deprecatedSdf.format(dateTime);\n    }\n\n    @Override\n    public String formatXmppDateTime(final Date dateTime) {\n\treturn sdf.format(dateTime);\n    }\n\n    @Override\n    public Date parseLegacyFormatXmppDateTime(String dateTime) {\n\ttry {\n\t    return deprecatedSdf.parse(dateTime);\n\t} catch (final ParseException e) {\n\t    return null;\n\t}\n    }\n\n    @Override\n    public Date parseXmppDateTime(final String dateTime) {\n\ttry {\n\t    return sdf.parse(dateTime);\n\t} catch (final ParseException e) {\n\t    return null;\n\t}\n    }\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "J2SEXmppDateTimeFormatter",
        "name": "J2SEXmppDateTimeFormatter",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements XmppDateTimeFormatter",
        "body": "{\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-ddTHH:mm:ss[.sss]Z\");\n    SimpleDateFormat deprecatedSdf = new SimpleDateFormat(\"yyyy-MM-ddTHH:mm:ss[.sss]Z\");\n\n    @Override\n    public String formatLegacyFormatXmppDateTime(Date dateTime) {\n\treturn deprecatedSdf.format(dateTime);\n    }\n\n    @Override\n    public String formatXmppDateTime(final Date dateTime) {\n\treturn sdf.format(dateTime);\n    }\n\n    @Override\n    public Date parseLegacyFormatXmppDateTime(String dateTime) {\n\ttry {\n\t    return deprecatedSdf.parse(dateTime);\n\t} catch (final ParseException e) {\n\t    return null;\n\t}\n    }\n\n    @Override\n    public Date parseXmppDateTime(final String dateTime) {\n\ttry {\n\t    return sdf.parse(dateTime);\n\t} catch (final ParseException e) {\n\t    return null;\n\t}\n    }\n}",
        "start_point": {
            "row": 8,
            "column": 0
        },
        "end_point": {
            "row": 39,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/services/J2SEXmppDateTimeFormatter.java",
        "methods": [
            {
                "definition": "@Override\npublic String formatLegacyFormatXmppDateTime(Date dateTime) {\nurn deprecatedSdf.format(dateTime);\n}",
                "name": "formatLegacyFormatXmppDateTime",
                "modifiers": "@Override\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "Date",
                        "name": "dateTime"
                    }
                ],
                "body": "{\nurn deprecatedSdf.format(dateTime);\n}",
                "start_point": {
                    "row": 12,
                    "column": 4
                },
                "end_point": {
                    "row": 15,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic String formatXmppDateTime(final Date dateTime) {\nurn sdf.format(dateTime);\n}",
                "name": "formatXmppDateTime",
                "modifiers": "@Override\n    public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Date"
                    }
                ],
                "body": "{\nurn sdf.format(dateTime);\n}",
                "start_point": {
                    "row": 17,
                    "column": 4
                },
                "end_point": {
                    "row": 20,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic Date parseLegacyFormatXmppDateTime(String dateTime) {\n {\n return deprecatedSdf.parse(dateTime);\natch (final ParseException e) {\n return null;\n\n}",
                "name": "parseLegacyFormatXmppDateTime",
                "modifiers": "@Override\n    public",
                "return_type": "Date",
                "parameters": [
                    {
                        "type": "String",
                        "name": "dateTime"
                    }
                ],
                "body": "{\n {\n return deprecatedSdf.parse(dateTime);\natch (final ParseException e) {\n return null;\n\n}",
                "start_point": {
                    "row": 22,
                    "column": 4
                },
                "end_point": {
                    "row": 29,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic Date parseXmppDateTime(final String dateTime) {\n {\n return sdf.parse(dateTime);\natch (final ParseException e) {\n return null;\n\n}",
                "name": "parseXmppDateTime",
                "modifiers": "@Override\n    public",
                "return_type": "Date",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n {\n return sdf.parse(dateTime);\natch (final ParseException e) {\n return null;\n\n}",
                "start_point": {
                    "row": 31,
                    "column": 4
                },
                "end_point": {
                    "row": 38,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/services/ThreadScheduler.java",
        "definition": "public class ThreadScheduler {\n\n    public long getCurrentTime() {\n\treturn System.currentTimeMillis();\n    }\n\n    public void schedule(final int msecs, final ScheduledAction action) {\n\tnew Thread(new Runnable() {\n\t    public void run() {\n\t\tsynchronized (this) {\n\t\t    try {\n\t\t\tThread.sleep(msecs);\n\t\t\taction.run();\n\t\t    } catch (final InterruptedException e) {\n\t\t\tthrow new RuntimeException(e.toString());\n\t\t    }\n\t\t}\n\t    }\n\t}).start();\n    }\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "ThreadScheduler",
        "name": "ThreadScheduler",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public long getCurrentTime() {\n\treturn System.currentTimeMillis();\n    }\n\n    public void schedule(final int msecs, final ScheduledAction action) {\n\tnew Thread(new Runnable() {\n\t    public void run() {\n\t\tsynchronized (this) {\n\t\t    try {\n\t\t\tThread.sleep(msecs);\n\t\t\taction.run();\n\t\t    } catch (final InterruptedException e) {\n\t\t\tthrow new RuntimeException(e.toString());\n\t\t    }\n\t\t}\n\t    }\n\t}).start();\n    }\n}",
        "start_point": {
            "row": 25,
            "column": 0
        },
        "end_point": {
            "row": 45,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/services/ThreadScheduler.java",
        "methods": [
            {
                "definition": "public long getCurrentTime() {\nurn System.currentTimeMillis();\n}",
                "name": "getCurrentTime",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn System.currentTimeMillis();\n}",
                "start_point": {
                    "row": 27,
                    "column": 4
                },
                "end_point": {
                    "row": 29,
                    "column": 5
                }
            },
            {
                "definition": "public void schedule(final int msecs, final ScheduledAction action) {\n Thread(new Runnable() {\n public void run() {\nnchronized (this) {\n  try {\nhread.sleep(msecs);\nction.run();\n  } catch (final InterruptedException e) {\nhrow new RuntimeException(e.toString());\n  }\n\n }\nstart();\n}",
                "name": "schedule",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    },
                    {
                        "type": "final",
                        "name": "ScheduledAction"
                    }
                ],
                "body": "{\n Thread(new Runnable() {\n public void run() {\nnchronized (this) {\n  try {\nhread.sleep(msecs);\nction.run();\n  } catch (final InterruptedException e) {\nhrow new RuntimeException(e.toString());\n  }\n\n }\nstart();\n}",
                "start_point": {
                    "row": 31,
                    "column": 4
                },
                "end_point": {
                    "row": 44,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/services/TigasePacket.java",
        "definition": "public class TigasePacket extends AbstractPacket {\n\n    private final Element delegate;\n\n    public TigasePacket(final Element element) {\n\tthis.delegate = element;\n    }\n\n    public TigasePacket(final String name) {\n\tthis(new Element(name));\n    }\n\n    public IPacket addChild(final IPacket child) {\n\tfinal TigasePacket tigaseChild = (TigasePacket) child;\n\tdelegate.addChild(tigaseChild.delegate);\n\treturn child;\n    }\n\n    public IPacket addChild(final String nodeName) {\n\treturn addChild(nodeName, null);\n    }\n\n    public IPacket addChild(final String nodeName, final String xmlns) {\n\tfinal TigasePacket child = new TigasePacket(nodeName);\n\tchild.setAttribute(\"xmlns\", xmlns);\n\taddChild(child);\n\treturn child;\n    }\n\n    public String getAttribute(final String name) {\n\treturn delegate.getAttribute(name);\n    }\n\n    public HashMap<String, String> getAttributes() {\n\tfinal HashMap<String, String> atts = new HashMap<String, String>();\n\tfinal Map<String, String> src = delegate.getAttributes();\n\tif (src != null) {\n\t    atts.putAll(src);\n\t}\n\treturn atts;\n    }\n\n    public List<? extends IPacket> getChildren() {\n\tfinal List<Element> children = delegate.getChildren();\n\treturn wrap(children);\n    }\n\n    public int getChildrenCount() {\n\tfinal List<Element> children = delegate.getChildren();\n\treturn children != null ? children.size() : 0;\n    }\n\n    public String getName() {\n\treturn delegate.getName();\n    }\n\n    public String getText() {\n\treturn TextUtils.unescape(delegate.getCData());\n    }\n\n    public boolean removeChild(final IPacket child) {\n\treturn delegate.removeChild(((TigasePacket) child).delegate);\n    }\n\n    public void render(final StringBuffer buffer) {\n\tbuffer.append(delegate.toString());\n    }\n\n    public void setAttribute(final String name, final String value) {\n\tdelegate.setAttribute(name, value);\n    }\n\n    public void setText(final String text) {\n\tif (text != null)\n\t    delegate.setCData(text);\n    }\n\n    @Override\n    public String toString() {\n\treturn PacketRenderer.toString(this);\n    }\n\n    private List<IPacket> wrap(final List<Element> children) {\n\tfinal ArrayList<IPacket> result = new ArrayList<IPacket>();\n\tif (children != null) {\n\t    for (final Element e : children) {\n\t\tresult.add(new TigasePacket(e));\n\t    }\n\t}\n\treturn result;\n    }\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "TigasePacket",
        "name": "TigasePacket",
        "modifiers": "public",
        "superclass": "extends AbstractPacket",
        "super_interfaces": null,
        "body": "{\n\n    private final Element delegate;\n\n    public TigasePacket(final Element element) {\n\tthis.delegate = element;\n    }\n\n    public TigasePacket(final String name) {\n\tthis(new Element(name));\n    }\n\n    public IPacket addChild(final IPacket child) {\n\tfinal TigasePacket tigaseChild = (TigasePacket) child;\n\tdelegate.addChild(tigaseChild.delegate);\n\treturn child;\n    }\n\n    public IPacket addChild(final String nodeName) {\n\treturn addChild(nodeName, null);\n    }\n\n    public IPacket addChild(final String nodeName, final String xmlns) {\n\tfinal TigasePacket child = new TigasePacket(nodeName);\n\tchild.setAttribute(\"xmlns\", xmlns);\n\taddChild(child);\n\treturn child;\n    }\n\n    public String getAttribute(final String name) {\n\treturn delegate.getAttribute(name);\n    }\n\n    public HashMap<String, String> getAttributes() {\n\tfinal HashMap<String, String> atts = new HashMap<String, String>();\n\tfinal Map<String, String> src = delegate.getAttributes();\n\tif (src != null) {\n\t    atts.putAll(src);\n\t}\n\treturn atts;\n    }\n\n    public List<? extends IPacket> getChildren() {\n\tfinal List<Element> children = delegate.getChildren();\n\treturn wrap(children);\n    }\n\n    public int getChildrenCount() {\n\tfinal List<Element> children = delegate.getChildren();\n\treturn children != null ? children.size() : 0;\n    }\n\n    public String getName() {\n\treturn delegate.getName();\n    }\n\n    public String getText() {\n\treturn TextUtils.unescape(delegate.getCData());\n    }\n\n    public boolean removeChild(final IPacket child) {\n\treturn delegate.removeChild(((TigasePacket) child).delegate);\n    }\n\n    public void render(final StringBuffer buffer) {\n\tbuffer.append(delegate.toString());\n    }\n\n    public void setAttribute(final String name, final String value) {\n\tdelegate.setAttribute(name, value);\n    }\n\n    public void setText(final String text) {\n\tif (text != null)\n\t    delegate.setCData(text);\n    }\n\n    @Override\n    public String toString() {\n\treturn PacketRenderer.toString(this);\n    }\n\n    private List<IPacket> wrap(final List<Element> children) {\n\tfinal ArrayList<IPacket> result = new ArrayList<IPacket>();\n\tif (children != null) {\n\t    for (final Element e : children) {\n\t\tresult.add(new TigasePacket(e));\n\t    }\n\t}\n\treturn result;\n    }\n}",
        "start_point": {
            "row": 35,
            "column": 0
        },
        "end_point": {
            "row": 126,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/services/TigasePacket.java",
        "methods": [
            {
                "definition": "public TigasePacket(final Element element) {\ns.delegate = element;\n}",
                "name": "TigasePacket",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Element"
                    }
                ],
                "body": "{\ns.delegate = element;\n}",
                "constructor": true,
                "start_point": {
                    "row": 39,
                    "column": 4
                },
                "end_point": {
                    "row": 41,
                    "column": 5
                }
            },
            {
                "definition": "public TigasePacket(final String name) {\ns(new Element(name));\n}",
                "name": "TigasePacket",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\ns(new Element(name));\n}",
                "constructor": true,
                "start_point": {
                    "row": 43,
                    "column": 4
                },
                "end_point": {
                    "row": 45,
                    "column": 5
                }
            },
            {
                "definition": "public IPacket addChild(final IPacket child) {\nal TigasePacket tigaseChild = (TigasePacket) child;\negate.addChild(tigaseChild.delegate);\nurn child;\n}",
                "name": "addChild",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nal TigasePacket tigaseChild = (TigasePacket) child;\negate.addChild(tigaseChild.delegate);\nurn child;\n}",
                "start_point": {
                    "row": 47,
                    "column": 4
                },
                "end_point": {
                    "row": 51,
                    "column": 5
                }
            },
            {
                "definition": "public IPacket addChild(final String nodeName) {\nurn addChild(nodeName, null);\n}",
                "name": "addChild",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nurn addChild(nodeName, null);\n}",
                "start_point": {
                    "row": 53,
                    "column": 4
                },
                "end_point": {
                    "row": 55,
                    "column": 5
                }
            },
            {
                "definition": "public IPacket addChild(final String nodeName, final String xmlns) {\nal TigasePacket child = new TigasePacket(nodeName);\nld.setAttribute(\"xmlns\", xmlns);\nChild(child);\nurn child;\n}",
                "name": "addChild",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal TigasePacket child = new TigasePacket(nodeName);\nld.setAttribute(\"xmlns\", xmlns);\nChild(child);\nurn child;\n}",
                "start_point": {
                    "row": 57,
                    "column": 4
                },
                "end_point": {
                    "row": 62,
                    "column": 5
                }
            },
            {
                "definition": "public String getAttribute(final String name) {\nurn delegate.getAttribute(name);\n}",
                "name": "getAttribute",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nurn delegate.getAttribute(name);\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 66,
                    "column": 5
                }
            },
            {
                "definition": "public HashMap<String, String> getAttributes() {\nal HashMap<String, String> atts = new HashMap<String, String>();\nal Map<String, String> src = delegate.getAttributes();\n(src != null) {\n atts.putAll(src);\n\nurn atts;\n}",
                "name": "getAttributes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal HashMap<String, String> atts = new HashMap<String, String>();\nal Map<String, String> src = delegate.getAttributes();\n(src != null) {\n atts.putAll(src);\n\nurn atts;\n}",
                "start_point": {
                    "row": 68,
                    "column": 4
                },
                "end_point": {
                    "row": 75,
                    "column": 5
                }
            },
            {
                "definition": "public List<? extends IPacket> getChildren() {\nal List<Element> children = delegate.getChildren();\nurn wrap(children);\n}",
                "name": "getChildren",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal List<Element> children = delegate.getChildren();\nurn wrap(children);\n}",
                "start_point": {
                    "row": 77,
                    "column": 4
                },
                "end_point": {
                    "row": 80,
                    "column": 5
                }
            },
            {
                "definition": "public int getChildrenCount() {\nal List<Element> children = delegate.getChildren();\nurn children != null ? children.size() : 0;\n}",
                "name": "getChildrenCount",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal List<Element> children = delegate.getChildren();\nurn children != null ? children.size() : 0;\n}",
                "start_point": {
                    "row": 82,
                    "column": 4
                },
                "end_point": {
                    "row": 85,
                    "column": 5
                }
            },
            {
                "definition": "public String getName() {\nurn delegate.getName();\n}",
                "name": "getName",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [],
                "body": "{\nurn delegate.getName();\n}",
                "start_point": {
                    "row": 87,
                    "column": 4
                },
                "end_point": {
                    "row": 89,
                    "column": 5
                }
            },
            {
                "definition": "public String getText() {\nurn TextUtils.unescape(delegate.getCData());\n}",
                "name": "getText",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [],
                "body": "{\nurn TextUtils.unescape(delegate.getCData());\n}",
                "start_point": {
                    "row": 91,
                    "column": 4
                },
                "end_point": {
                    "row": 93,
                    "column": 5
                }
            },
            {
                "definition": "public boolean removeChild(final IPacket child) {\nurn delegate.removeChild(((TigasePacket) child).delegate);\n}",
                "name": "removeChild",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nurn delegate.removeChild(((TigasePacket) child).delegate);\n}",
                "start_point": {
                    "row": 95,
                    "column": 4
                },
                "end_point": {
                    "row": 97,
                    "column": 5
                }
            },
            {
                "definition": "public void render(final StringBuffer buffer) {\nfer.append(delegate.toString());\n}",
                "name": "render",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "StringBuffer"
                    }
                ],
                "body": "{\nfer.append(delegate.toString());\n}",
                "start_point": {
                    "row": 99,
                    "column": 4
                },
                "end_point": {
                    "row": 101,
                    "column": 5
                }
            },
            {
                "definition": "public void setAttribute(final String name, final String value) {\negate.setAttribute(name, value);\n}",
                "name": "setAttribute",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    },
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\negate.setAttribute(name, value);\n}",
                "start_point": {
                    "row": 103,
                    "column": 4
                },
                "end_point": {
                    "row": 105,
                    "column": 5
                }
            },
            {
                "definition": "public void setText(final String text) {\n(text != null)\n delegate.setCData(text);\n}",
                "name": "setText",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n(text != null)\n delegate.setCData(text);\n}",
                "start_point": {
                    "row": 107,
                    "column": 4
                },
                "end_point": {
                    "row": 110,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic String toString() {\nurn PacketRenderer.toString(this);\n}",
                "name": "toString",
                "modifiers": "@Override\n    public",
                "return_type": "String",
                "parameters": [],
                "body": "{\nurn PacketRenderer.toString(this);\n}",
                "start_point": {
                    "row": 112,
                    "column": 4
                },
                "end_point": {
                    "row": 115,
                    "column": 5
                }
            },
            {
                "definition": "private List<IPacket> wrap(final List<Element> children) {\nal ArrayList<IPacket> result = new ArrayList<IPacket>();\n(children != null) {\n for (final Element e : children) {\nsult.add(new TigasePacket(e));\n }\n\nurn result;\n}",
                "name": "wrap",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "List<Element>"
                    }
                ],
                "body": "{\nal ArrayList<IPacket> result = new ArrayList<IPacket>();\n(children != null) {\n for (final Element e : children) {\nsult.add(new TigasePacket(e));\n }\n\nurn result;\n}",
                "start_point": {
                    "row": 117,
                    "column": 4
                },
                "end_point": {
                    "row": 125,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/emite/xtesting/services/TigaseXMLService.java",
        "definition": "public class TigaseXMLService {\n    public static final TigaseXMLService instance = new TigaseXMLService();\n\n    public static final IPacket toPacket(String xml) {\n\treturn instance.toXML(xml);\n    }\n\n    private final SimpleParser parser;\n\n    public TigaseXMLService() {\n\tparser = new SimpleParser();\n    }\n\n    public String toString(final IPacket iPacket) {\n\treturn iPacket != null ? iPacket.toString() : \"null\";\n    }\n\n    public IPacket toXML(final String xml) {\n\tfinal DomBuilderHandler handler = new DomBuilderHandler();\n\tparser.parse(handler, xml.toCharArray(), 0, xml.length());\n\tfinal Queue<Element> parsedElements = handler.getParsedElements();\n\n\tfinal Element body = parsedElements.poll();\n\tif (body == null) {\n\t    throw new RuntimeException(\"not valid xml: \" + xml);\n\t}\n\treturn new TigasePacket(body);\n    }\n}",
        "package": "package com.calclab.emite.xtesting.services;",
        "tree_path": "TigaseXMLService",
        "name": "TigaseXMLService",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    public static final TigaseXMLService instance = new TigaseXMLService();\n\n    public static final IPacket toPacket(String xml) {\n\treturn instance.toXML(xml);\n    }\n\n    private final SimpleParser parser;\n\n    public TigaseXMLService() {\n\tparser = new SimpleParser();\n    }\n\n    public String toString(final IPacket iPacket) {\n\treturn iPacket != null ? iPacket.toString() : \"null\";\n    }\n\n    public IPacket toXML(final String xml) {\n\tfinal DomBuilderHandler handler = new DomBuilderHandler();\n\tparser.parse(handler, xml.toCharArray(), 0, xml.length());\n\tfinal Queue<Element> parsedElements = handler.getParsedElements();\n\n\tfinal Element body = parsedElements.poll();\n\tif (body == null) {\n\t    throw new RuntimeException(\"not valid xml: \" + xml);\n\t}\n\treturn new TigasePacket(body);\n    }\n}",
        "start_point": {
            "row": 31,
            "column": 0
        },
        "end_point": {
            "row": 59,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/emite/xtesting/services/TigaseXMLService.java",
        "methods": [
            {
                "definition": "public static final IPacket toPacket(String xml) {\nurn instance.toXML(xml);\n}",
                "name": "toPacket",
                "modifiers": "public static final",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "String",
                        "name": "xml"
                    }
                ],
                "body": "{\nurn instance.toXML(xml);\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 36,
                    "column": 5
                }
            },
            {
                "definition": "public TigaseXMLService() {\nser = new SimpleParser();\n}",
                "name": "TigaseXMLService",
                "modifiers": "public",
                "parameters": [],
                "body": "{\nser = new SimpleParser();\n}",
                "constructor": true,
                "start_point": {
                    "row": 40,
                    "column": 4
                },
                "end_point": {
                    "row": 42,
                    "column": 5
                }
            },
            {
                "definition": "public String toString(final IPacket iPacket) {\nurn iPacket != null ? iPacket.toString() : \"null\";\n}",
                "name": "toString",
                "modifiers": "public",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "IPacket"
                    }
                ],
                "body": "{\nurn iPacket != null ? iPacket.toString() : \"null\";\n}",
                "start_point": {
                    "row": 44,
                    "column": 4
                },
                "end_point": {
                    "row": 46,
                    "column": 5
                }
            },
            {
                "definition": "public IPacket toXML(final String xml) {\nal DomBuilderHandler handler = new DomBuilderHandler();\nser.parse(handler, xml.toCharArray(), 0, xml.length());\nal Queue<Element> parsedElements = handler.getParsedElements();\n\nal Element body = parsedElements.poll();\n(body == null) {\n throw new RuntimeException(\"not valid xml: \" + xml);\n\nurn new TigasePacket(body);\n}",
                "name": "toXML",
                "modifiers": "public",
                "return_type": "IPacket",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\nal DomBuilderHandler handler = new DomBuilderHandler();\nser.parse(handler, xml.toCharArray(), 0, xml.length());\nal Queue<Element> parsedElements = handler.getParsedElements();\n\nal Element body = parsedElements.poll();\n(body == null) {\n throw new RuntimeException(\"not valid xml: \" + xml);\n\nurn new TigasePacket(body);\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 58,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/Logger.java",
        "definition": "public class Logger {\n    private static boolean debug = true;\n\n    public static void debug(final String pattern, final Object... arguments) {\n\tif (debug ) {\n\t    System.out.println(format(pattern, arguments));\n\t}\n    }\n\n    public static String format(String pattern, final Object... arguments) {\n\tfinal int total = arguments.length;\n\tfor (int index = 0; index < total; index++) {\n\t    final Object arg = arguments[index];\n\t    final String value = arg == null ? \"null\" : arg.toString();\n\t    pattern = pattern.replace(\"{\" + index + \"}\", value);\n\t}\n\treturn pattern;\n    }\n\n    public static String toString(final Collection<?> objects) {\n\tfinal StringBuilder builder = new StringBuilder();\n\n\tfor (final Object o : objects) {\n\t    builder.append(o.toString()).append(\", \");\n\t}\n\n\treturn builder.toString();\n    }\n\n}",
        "package": "package com.calclab.suco.testing;",
        "tree_path": "Logger",
        "name": "Logger",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    private static boolean debug = true;\n\n    public static void debug(final String pattern, final Object... arguments) {\n\tif (debug ) {\n\t    System.out.println(format(pattern, arguments));\n\t}\n    }\n\n    public static String format(String pattern, final Object... arguments) {\n\tfinal int total = arguments.length;\n\tfor (int index = 0; index < total; index++) {\n\t    final Object arg = arguments[index];\n\t    final String value = arg == null ? \"null\" : arg.toString();\n\t    pattern = pattern.replace(\"{\" + index + \"}\", value);\n\t}\n\treturn pattern;\n    }\n\n    public static String toString(final Collection<?> objects) {\n\tfinal StringBuilder builder = new StringBuilder();\n\n\tfor (final Object o : objects) {\n\t    builder.append(o.toString()).append(\", \");\n\t}\n\n\treturn builder.toString();\n    }\n\n}",
        "start_point": {
            "row": 25,
            "column": 0
        },
        "end_point": {
            "row": 54,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/Logger.java",
        "methods": [
            {
                "definition": "public static void debug(final String pattern, final Object... arguments) {\n(debug ) {\n System.out.println(format(pattern, arguments));\n\n}",
                "name": "debug",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n(debug ) {\n System.out.println(format(pattern, arguments));\n\n}",
                "start_point": {
                    "row": 28,
                    "column": 4
                },
                "end_point": {
                    "row": 32,
                    "column": 5
                }
            },
            {
                "definition": "public static String format(String pattern, final Object... arguments) {\nal int total = arguments.length;\n (int index = 0; index < total; index++) {\n final Object arg = arguments[index];\n final String value = arg == null ? \"null\" : arg.toString();\n pattern = pattern.replace(\"{\" + index + \"}\", value);\n\nurn pattern;\n}",
                "name": "format",
                "modifiers": "public static",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "String",
                        "name": "pattern"
                    }
                ],
                "body": "{\nal int total = arguments.length;\n (int index = 0; index < total; index++) {\n final Object arg = arguments[index];\n final String value = arg == null ? \"null\" : arg.toString();\n pattern = pattern.replace(\"{\" + index + \"}\", value);\n\nurn pattern;\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 42,
                    "column": 5
                }
            },
            {
                "definition": "public static String toString(final Collection<?> objects) {\nal StringBuilder builder = new StringBuilder();\n\n (final Object o : objects) {\n builder.append(o.toString()).append(\", \");\n\n\nurn builder.toString();\n}",
                "name": "toString",
                "modifiers": "public static",
                "return_type": "String",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Collection<?>"
                    }
                ],
                "body": "{\nal StringBuilder builder = new StringBuilder();\n\n (final Object o : objects) {\n builder.append(o.toString()).append(\", \");\n\n\nurn builder.toString();\n}",
                "start_point": {
                    "row": 44,
                    "column": 4
                },
                "end_point": {
                    "row": 52,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/Eventito.java",
        "definition": "@SuppressWarnings(\"unchecked\")\npublic class Eventito {\n    public static class ParamHolder {\n\tprivate final Object param1;\n\tprivate final Object param2;\n\n\tpublic ParamHolder(final Object param1, final Object param2) {\n\t    this.param1 = param1;\n\t    this.param2 = param2;\n\t}\n\n\tpublic Object getParam1() {\n\t    return param1;\n\t}\n\n\tpublic Object getParam2() {\n\t    return param2;\n\t}\n\n\tpublic <T> T when(final T publisher) {\n\t    return Mockito.verify(publisher);\n\t}\n    }\n\n    private static ParamHolder currentParam;\n\n    public static Listener anyListener() {\n\treturn (Listener) Mockito.argThat(new ListenerMatcher(currentParam));\n    }\n\n    public static <T> Listener<T> anyListener(final Class<T> listenerParamType) {\n\treturn Mockito.argThat(new ListenerMatcher<T>(currentParam));\n    }\n\n    public static Listener0 anyListener0() {\n\treturn Mockito.argThat(new Listener0Matcher(currentParam));\n    }\n\n    public static <A, B> Listener2<A, B> anyListener2(final Class<A> listenerParam1Type,\n\t    final Class<B> listenerParam2Type) {\n\treturn Mockito.argThat(new Listener2Matcher<A, B>(currentParam));\n    }\n\n    public static ParamHolder fire() {\n\tcurrentParam = new ParamHolder(null, null);\n\treturn currentParam;\n    }\n\n    public static ParamHolder fire(final Object param) {\n\tcurrentParam = new ParamHolder(param, null);\n\treturn currentParam;\n    }\n\n    public static ParamHolder fire(final Object param1, final Object param2) {\n\tcurrentParam = new ParamHolder(param1, param2);\n\treturn currentParam;\n    }\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "Eventito",
        "name": "Eventito",
        "modifiers": "@SuppressWarnings(\"unchecked\")\npublic",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n    public static class ParamHolder {\n\tprivate final Object param1;\n\tprivate final Object param2;\n\n\tpublic ParamHolder(final Object param1, final Object param2) {\n\t    this.param1 = param1;\n\t    this.param2 = param2;\n\t}\n\n\tpublic Object getParam1() {\n\t    return param1;\n\t}\n\n\tpublic Object getParam2() {\n\t    return param2;\n\t}\n\n\tpublic <T> T when(final T publisher) {\n\t    return Mockito.verify(publisher);\n\t}\n    }\n\n    private static ParamHolder currentParam;\n\n    public static Listener anyListener() {\n\treturn (Listener) Mockito.argThat(new ListenerMatcher(currentParam));\n    }\n\n    public static <T> Listener<T> anyListener(final Class<T> listenerParamType) {\n\treturn Mockito.argThat(new ListenerMatcher<T>(currentParam));\n    }\n\n    public static Listener0 anyListener0() {\n\treturn Mockito.argThat(new Listener0Matcher(currentParam));\n    }\n\n    public static <A, B> Listener2<A, B> anyListener2(final Class<A> listenerParam1Type,\n\t    final Class<B> listenerParam2Type) {\n\treturn Mockito.argThat(new Listener2Matcher<A, B>(currentParam));\n    }\n\n    public static ParamHolder fire() {\n\tcurrentParam = new ParamHolder(null, null);\n\treturn currentParam;\n    }\n\n    public static ParamHolder fire(final Object param) {\n\tcurrentParam = new ParamHolder(param, null);\n\treturn currentParam;\n    }\n\n    public static ParamHolder fire(final Object param1, final Object param2) {\n\tcurrentParam = new ParamHolder(param1, param2);\n\treturn currentParam;\n    }\n}",
        "start_point": {
            "row": 38,
            "column": 0
        },
        "end_point": {
            "row": 95,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/Eventito.java",
        "methods": [
            {
                "definition": "public static Listener anyListener() {\nurn (Listener) Mockito.argThat(new ListenerMatcher(currentParam));\n}",
                "name": "anyListener",
                "modifiers": "public static",
                "return_type": "Listener",
                "parameters": [],
                "body": "{\nurn (Listener) Mockito.argThat(new ListenerMatcher(currentParam));\n}",
                "start_point": {
                    "row": 64,
                    "column": 4
                },
                "end_point": {
                    "row": 66,
                    "column": 5
                }
            },
            {
                "definition": "public static <T> Listener<T> anyListener(final Class<T> listenerParamType) {\nurn Mockito.argThat(new ListenerMatcher<T>(currentParam));\n}",
                "name": "anyListener",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\nurn Mockito.argThat(new ListenerMatcher<T>(currentParam));\n}",
                "start_point": {
                    "row": 68,
                    "column": 4
                },
                "end_point": {
                    "row": 70,
                    "column": 5
                }
            },
            {
                "definition": "public static Listener0 anyListener0() {\nurn Mockito.argThat(new Listener0Matcher(currentParam));\n}",
                "name": "anyListener0",
                "modifiers": "public static",
                "return_type": "Listener0",
                "parameters": [],
                "body": "{\nurn Mockito.argThat(new Listener0Matcher(currentParam));\n}",
                "start_point": {
                    "row": 72,
                    "column": 4
                },
                "end_point": {
                    "row": 74,
                    "column": 5
                }
            },
            {
                "definition": "public static <A, B> Listener2<A, B> anyListener2(final Class<A> listenerParam1Type,\n final Class<B> listenerParam2Type) {\nurn Mockito.argThat(new Listener2Matcher<A, B>(currentParam));\n}",
                "name": "anyListener2",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<A>"
                    },
                    {
                        "type": "final",
                        "name": "Class<B>"
                    }
                ],
                "body": "{\nurn Mockito.argThat(new Listener2Matcher<A, B>(currentParam));\n}",
                "start_point": {
                    "row": 76,
                    "column": 4
                },
                "end_point": {
                    "row": 79,
                    "column": 5
                }
            },
            {
                "definition": "public static ParamHolder fire() {\nrentParam = new ParamHolder(null, null);\nurn currentParam;\n}",
                "name": "fire",
                "modifiers": "public static",
                "return_type": "ParamHolder",
                "parameters": [],
                "body": "{\nrentParam = new ParamHolder(null, null);\nurn currentParam;\n}",
                "start_point": {
                    "row": 81,
                    "column": 4
                },
                "end_point": {
                    "row": 84,
                    "column": 5
                }
            },
            {
                "definition": "public static ParamHolder fire(final Object param) {\nrentParam = new ParamHolder(param, null);\nurn currentParam;\n}",
                "name": "fire",
                "modifiers": "public static",
                "return_type": "ParamHolder",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\nrentParam = new ParamHolder(param, null);\nurn currentParam;\n}",
                "start_point": {
                    "row": 86,
                    "column": 4
                },
                "end_point": {
                    "row": 89,
                    "column": 5
                }
            },
            {
                "definition": "public static ParamHolder fire(final Object param1, final Object param2) {\nrentParam = new ParamHolder(param1, param2);\nurn currentParam;\n}",
                "name": "fire",
                "modifiers": "public static",
                "return_type": "ParamHolder",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\nrentParam = new ParamHolder(param1, param2);\nurn currentParam;\n}",
                "start_point": {
                    "row": 91,
                    "column": 4
                },
                "end_point": {
                    "row": 94,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/Eventito.java",
        "definition": "public static class ParamHolder {\nvate final Object param1;\nvate final Object param2;\n\nlic ParamHolder(final Object param1, final Object param2) {\n this.param1 = param1;\n this.param2 = param2;\n\n\nlic Object getParam1() {\n return param1;\n\n\nlic Object getParam2() {\n return param2;\n\n\nlic <T> T when(final T publisher) {\n return Mockito.verify(publisher);\n\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "Eventito.ParamHolder",
        "name": "ParamHolder",
        "modifiers": "public static",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\nvate final Object param1;\nvate final Object param2;\n\nlic ParamHolder(final Object param1, final Object param2) {\n this.param1 = param1;\n this.param2 = param2;\n\n\nlic Object getParam1() {\n return param1;\n\n\nlic Object getParam2() {\n return param2;\n\n\nlic <T> T when(final T publisher) {\n return Mockito.verify(publisher);\n\n}",
        "start_point": {
            "row": 40,
            "column": 4
        },
        "end_point": {
            "row": 60,
            "column": 5
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/Eventito.java",
        "methods": [
            {
                "definition": "public ParamHolder(final Object param1, final Object param2) {\n    this.param1 = param1;\n    this.param2 = param2;\n}",
                "name": "ParamHolder",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n    this.param1 = param1;\n    this.param2 = param2;\n}",
                "constructor": true,
                "start_point": {
                    "row": 44,
                    "column": 1
                },
                "end_point": {
                    "row": 47,
                    "column": 2
                }
            },
            {
                "definition": "public Object getParam1() {\n    return param1;\n}",
                "name": "getParam1",
                "modifiers": "public",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n    return param1;\n}",
                "start_point": {
                    "row": 49,
                    "column": 1
                },
                "end_point": {
                    "row": 51,
                    "column": 2
                }
            },
            {
                "definition": "public Object getParam2() {\n    return param2;\n}",
                "name": "getParam2",
                "modifiers": "public",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n    return param2;\n}",
                "start_point": {
                    "row": 53,
                    "column": 1
                },
                "end_point": {
                    "row": 55,
                    "column": 2
                }
            },
            {
                "definition": "public <T> T when(final T publisher) {\n    return Mockito.verify(publisher);\n}",
                "name": "when",
                "modifiers": "public",
                "return_type": "T",
                "parameters": [
                    {
                        "type": "final",
                        "name": "T"
                    }
                ],
                "body": "{\n    return Mockito.verify(publisher);\n}",
                "start_point": {
                    "row": 57,
                    "column": 1
                },
                "end_point": {
                    "row": 59,
                    "column": 2
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/EventitoTests.java",
        "definition": "public class EventitoTests {\n\n    public static interface Publisher {\n\tpublic void onEvent(final Listener<String> listener);\n    }\n\n    public static interface Publisher0 {\n\tpublic void onEvent(final Listener0 listener);\n    }\n\n    public static interface Publisher2 {\n\tpublic void onEvent(final Listener2<String, String> listener);\n    }\n\n    @Test\n    public void shouldFireEvent() {\n\tfinal Publisher publisher = Mockito.mock(Publisher.class);\n\tfinal MockedListener<String> listener = new MockedListener<String>();\n\tpublisher.onEvent(listener);\n\tfire(\"message\").when(publisher).onEvent(anyListener(String.class));\n\tassertEquals(1, listener.getCalledTimes());\n\tassertEquals(\"message\", listener.getValue(0));\n    }\n\n    @Test\n    public void shouldFireEvent0() {\n\tfinal Publisher0 publisher = Mockito.mock(Publisher0.class);\n\tfinal MockedListener0 listener = new MockedListener0();\n\tpublisher.onEvent(listener);\n\n\tfire().when(publisher).onEvent(anyListener0());\n\tassertEquals(1, listener.getCalledTimes());\n    }\n\n    @Test\n    public void shouldFireEvent2() {\n\tfinal Publisher2 publisher = Mockito.mock(Publisher2.class);\n\tfinal MockedListener2<String, String> listener = new MockedListener2<String, String>();\n\tpublisher.onEvent(listener);\n\n\tfire(\"something\", \"here\").when(publisher).onEvent(anyListener2(String.class, String.class));\n\tassertEquals(1, listener.getCalledTimes());\n\tassertTrue(listener.isCalledWithEquals(\"something\", \"here\"));\n    }\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "EventitoTests",
        "name": "EventitoTests",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public static interface Publisher {\n\tpublic void onEvent(final Listener<String> listener);\n    }\n\n    public static interface Publisher0 {\n\tpublic void onEvent(final Listener0 listener);\n    }\n\n    public static interface Publisher2 {\n\tpublic void onEvent(final Listener2<String, String> listener);\n    }\n\n    @Test\n    public void shouldFireEvent() {\n\tfinal Publisher publisher = Mockito.mock(Publisher.class);\n\tfinal MockedListener<String> listener = new MockedListener<String>();\n\tpublisher.onEvent(listener);\n\tfire(\"message\").when(publisher).onEvent(anyListener(String.class));\n\tassertEquals(1, listener.getCalledTimes());\n\tassertEquals(\"message\", listener.getValue(0));\n    }\n\n    @Test\n    public void shouldFireEvent0() {\n\tfinal Publisher0 publisher = Mockito.mock(Publisher0.class);\n\tfinal MockedListener0 listener = new MockedListener0();\n\tpublisher.onEvent(listener);\n\n\tfire().when(publisher).onEvent(anyListener0());\n\tassertEquals(1, listener.getCalledTimes());\n    }\n\n    @Test\n    public void shouldFireEvent2() {\n\tfinal Publisher2 publisher = Mockito.mock(Publisher2.class);\n\tfinal MockedListener2<String, String> listener = new MockedListener2<String, String>();\n\tpublisher.onEvent(listener);\n\n\tfire(\"something\", \"here\").when(publisher).onEvent(anyListener2(String.class, String.class));\n\tassertEquals(1, listener.getCalledTimes());\n\tassertTrue(listener.isCalledWithEquals(\"something\", \"here\"));\n    }\n}",
        "start_point": {
            "row": 16,
            "column": 0
        },
        "end_point": {
            "row": 60,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/EventitoTests.java",
        "methods": [
            {
                "definition": "@Test\npublic void shouldFireEvent() {\nal Publisher publisher = Mockito.mock(Publisher.class);\nal MockedListener<String> listener = new MockedListener<String>();\nlisher.onEvent(listener);\ne(\"message\").when(publisher).onEvent(anyListener(String.class));\nertEquals(1, listener.getCalledTimes());\nertEquals(\"message\", listener.getValue(0));\n}",
                "name": "shouldFireEvent",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal Publisher publisher = Mockito.mock(Publisher.class);\nal MockedListener<String> listener = new MockedListener<String>();\nlisher.onEvent(listener);\ne(\"message\").when(publisher).onEvent(anyListener(String.class));\nertEquals(1, listener.getCalledTimes());\nertEquals(\"message\", listener.getValue(0));\n}",
                "start_point": {
                    "row": 30,
                    "column": 4
                },
                "end_point": {
                    "row": 38,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldFireEvent0() {\nal Publisher0 publisher = Mockito.mock(Publisher0.class);\nal MockedListener0 listener = new MockedListener0();\nlisher.onEvent(listener);\n\ne().when(publisher).onEvent(anyListener0());\nertEquals(1, listener.getCalledTimes());\n}",
                "name": "shouldFireEvent0",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal Publisher0 publisher = Mockito.mock(Publisher0.class);\nal MockedListener0 listener = new MockedListener0();\nlisher.onEvent(listener);\n\ne().when(publisher).onEvent(anyListener0());\nertEquals(1, listener.getCalledTimes());\n}",
                "start_point": {
                    "row": 40,
                    "column": 4
                },
                "end_point": {
                    "row": 48,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldFireEvent2() {\nal Publisher2 publisher = Mockito.mock(Publisher2.class);\nal MockedListener2<String, String> listener = new MockedListener2<String, String>();\nlisher.onEvent(listener);\n\ne(\"something\", \"here\").when(publisher).onEvent(anyListener2(String.class, String.class));\nertEquals(1, listener.getCalledTimes());\nertTrue(listener.isCalledWithEquals(\"something\", \"here\"));\n}",
                "name": "shouldFireEvent2",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal Publisher2 publisher = Mockito.mock(Publisher2.class);\nal MockedListener2<String, String> listener = new MockedListener2<String, String>();\nlisher.onEvent(listener);\n\ne(\"something\", \"here\").when(publisher).onEvent(anyListener2(String.class, String.class));\nertEquals(1, listener.getCalledTimes());\nertTrue(listener.isCalledWithEquals(\"something\", \"here\"));\n}",
                "start_point": {
                    "row": 50,
                    "column": 4
                },
                "end_point": {
                    "row": 59,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/MockedListener.java",
        "definition": "public class MockedListener<A> implements Listener<A>, VerificableListener {\n    private final ArrayList<A> parameters;\n\n    public MockedListener() {\n\tparameters = new ArrayList<A>();\n    }\n\n    public void clear() {\n\tparameters.clear();\n    }\n\n    public int getCalledTimes() {\n\treturn parameters.size();\n    }\n\n    public A getValue(final int index) {\n\treturn parameters.get(index);\n    }\n\n    public boolean isCalled() {\n\treturn getCalledTimes() > 0;\n    }\n\n    public boolean isCalled(final int timesCalled) {\n\treturn getCalledTimes() == timesCalled;\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    /**\n     * The number of the values must be the same of number of calls this\n     * listener received\n     */\n    public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n\tif (parameters.size() != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n\t    return false;\n\t}\n\tfor (int index = 0; index < expectedOrderedValues.length; index++) {\n\t    final Object expected = expectedOrderedValues[index];\n\t    final A actual = parameters.get(index);\n\t    if (!expected.equals(actual)) {\n\t\tLogger.debug(\"Expected equals to {0} but was {1}\", expected, actual);\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }\n\n    /**\n     * The number of the values must be the same of number of calls this\n     * listener received\n     */\n    public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n\tif (parameters.size() != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n\t    return false;\n\t}\n\tfor (int index = 0; index < expectedOrderedValues.length; index++) {\n\t    final Object expected = expectedOrderedValues[index];\n\t    final A actual = parameters.get(index);\n\t    if (!(expected == actual)) {\n\t\tLogger.debug(\"Expected same {0} but was {1}\", expected, actual);\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }\n\n    public boolean isNotCalled() {\n\treturn getCalledTimes() == 0;\n    }\n\n    public void onEvent(final A parameter) {\n\tparameters.add(parameter);\n    }\n\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "MockedListener",
        "name": "MockedListener",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements Listener<A>, VerificableListener",
        "body": "{\n    private final ArrayList<A> parameters;\n\n    public MockedListener() {\n\tparameters = new ArrayList<A>();\n    }\n\n    public void clear() {\n\tparameters.clear();\n    }\n\n    public int getCalledTimes() {\n\treturn parameters.size();\n    }\n\n    public A getValue(final int index) {\n\treturn parameters.get(index);\n    }\n\n    public boolean isCalled() {\n\treturn getCalledTimes() > 0;\n    }\n\n    public boolean isCalled(final int timesCalled) {\n\treturn getCalledTimes() == timesCalled;\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    /**\n     * The number of the values must be the same of number of calls this\n     * listener received\n     */\n    public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n\tif (parameters.size() != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n\t    return false;\n\t}\n\tfor (int index = 0; index < expectedOrderedValues.length; index++) {\n\t    final Object expected = expectedOrderedValues[index];\n\t    final A actual = parameters.get(index);\n\t    if (!expected.equals(actual)) {\n\t\tLogger.debug(\"Expected equals to {0} but was {1}\", expected, actual);\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }\n\n    /**\n     * The number of the values must be the same of number of calls this\n     * listener received\n     */\n    public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n\tif (parameters.size() != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n\t    return false;\n\t}\n\tfor (int index = 0; index < expectedOrderedValues.length; index++) {\n\t    final Object expected = expectedOrderedValues[index];\n\t    final A actual = parameters.get(index);\n\t    if (!(expected == actual)) {\n\t\tLogger.debug(\"Expected same {0} but was {1}\", expected, actual);\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }\n\n    public boolean isNotCalled() {\n\treturn getCalledTimes() == 0;\n    }\n\n    public void onEvent(final A parameter) {\n\tparameters.add(parameter);\n    }\n\n}",
        "start_point": {
            "row": 28,
            "column": 0
        },
        "end_point": {
            "row": 107,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/MockedListener.java",
        "methods": [
            {
                "definition": "public MockedListener() {\nameters = new ArrayList<A>();\n}",
                "name": "MockedListener",
                "modifiers": "public",
                "parameters": [],
                "body": "{\nameters = new ArrayList<A>();\n}",
                "constructor": true,
                "start_point": {
                    "row": 31,
                    "column": 4
                },
                "end_point": {
                    "row": 33,
                    "column": 5
                }
            },
            {
                "definition": "public void clear() {\nameters.clear();\n}",
                "name": "clear",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nameters.clear();\n}",
                "start_point": {
                    "row": 35,
                    "column": 4
                },
                "end_point": {
                    "row": 37,
                    "column": 5
                }
            },
            {
                "definition": "public int getCalledTimes() {\nurn parameters.size();\n}",
                "name": "getCalledTimes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn parameters.size();\n}",
                "start_point": {
                    "row": 39,
                    "column": 4
                },
                "end_point": {
                    "row": 41,
                    "column": 5
                }
            },
            {
                "definition": "public A getValue(final int index) {\nurn parameters.get(index);\n}",
                "name": "getValue",
                "modifiers": "public",
                "return_type": "A",
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    }
                ],
                "body": "{\nurn parameters.get(index);\n}",
                "start_point": {
                    "row": 43,
                    "column": 4
                },
                "end_point": {
                    "row": 45,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalled() {\nurn getCalledTimes() > 0;\n}",
                "name": "isCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() > 0;\n}",
                "start_point": {
                    "row": 47,
                    "column": 4
                },
                "end_point": {
                    "row": 49,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalled(final int timesCalled) {\nurn getCalledTimes() == timesCalled;\n}",
                "name": "isCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    }
                ],
                "body": "{\nurn getCalledTimes() == timesCalled;\n}",
                "start_point": {
                    "row": 51,
                    "column": 4
                },
                "end_point": {
                    "row": 53,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledOnce() {\nurn getCalledTimes() == 1;\n}",
                "name": "isCalledOnce",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() == 1;\n}",
                "start_point": {
                    "row": 55,
                    "column": 4
                },
                "end_point": {
                    "row": 57,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n(parameters.size() != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n return false;\n\n (int index = 0; index < expectedOrderedValues.length; index++) {\n final Object expected = expectedOrderedValues[index];\n final A actual = parameters.get(index);\n if (!expected.equals(actual)) {\ngger.debug(\"Expected equals to {0} but was {1}\", expected, actual);\nturn false;\n }\n\nurn true;\n}",
                "name": "isCalledWithEquals",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n(parameters.size() != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n return false;\n\n (int index = 0; index < expectedOrderedValues.length; index++) {\n final Object expected = expectedOrderedValues[index];\n final A actual = parameters.get(index);\n if (!expected.equals(actual)) {\ngger.debug(\"Expected equals to {0} but was {1}\", expected, actual);\nturn false;\n }\n\nurn true;\n}",
                "start_point": {
                    "row": 63,
                    "column": 4
                },
                "end_point": {
                    "row": 77,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n(parameters.size() != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n return false;\n\n (int index = 0; index < expectedOrderedValues.length; index++) {\n final Object expected = expectedOrderedValues[index];\n final A actual = parameters.get(index);\n if (!(expected == actual)) {\ngger.debug(\"Expected same {0} but was {1}\", expected, actual);\nturn false;\n }\n\nurn true;\n}",
                "name": "isCalledWithSame",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n(parameters.size() != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length, parameters.size());\n return false;\n\n (int index = 0; index < expectedOrderedValues.length; index++) {\n final Object expected = expectedOrderedValues[index];\n final A actual = parameters.get(index);\n if (!(expected == actual)) {\ngger.debug(\"Expected same {0} but was {1}\", expected, actual);\nturn false;\n }\n\nurn true;\n}",
                "start_point": {
                    "row": 83,
                    "column": 4
                },
                "end_point": {
                    "row": 97,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isNotCalled() {\nurn getCalledTimes() == 0;\n}",
                "name": "isNotCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() == 0;\n}",
                "start_point": {
                    "row": 99,
                    "column": 4
                },
                "end_point": {
                    "row": 101,
                    "column": 5
                }
            },
            {
                "definition": "public void onEvent(final A parameter) {\nameters.add(parameter);\n}",
                "name": "onEvent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "A"
                    }
                ],
                "body": "{\nameters.add(parameter);\n}",
                "start_point": {
                    "row": 103,
                    "column": 4
                },
                "end_point": {
                    "row": 105,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/MockedListener0.java",
        "definition": "public class MockedListener0 implements Listener0, VerificableListener {\n    private int timesCalled;\n\n    public MockedListener0() {\n\ttimesCalled = 0;\n    }\n\n    public void clear() {\n\ttimesCalled = 0;\n    }\n\n    public int getCalledTimes() {\n\treturn timesCalled;\n    }\n\n    public boolean isCalled() {\n\treturn getCalledTimes() > 0;\n    }\n\n    public boolean isCalled(final int timesCalled) {\n\treturn getCalledTimes() == timesCalled;\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    /**\n     * does't have sense for Listener0. Throws RuntimeException\n     */\n    public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n\tthrow new RuntimeException(\"Listener0 can't have parameters\");\n    }\n\n    /**\n     * does't have sense for Listener0. Throws RuntimeException\n     */\n    public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n\tthrow new RuntimeException(\"Listener0 can't have parameters\");\n    }\n\n    public boolean isNotCalled() {\n\treturn getCalledTimes() == 0;\n    }\n\n    public void onEvent() {\n\ttimesCalled++;\n    }\n\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "MockedListener0",
        "name": "MockedListener0",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements Listener0, VerificableListener",
        "body": "{\n    private int timesCalled;\n\n    public MockedListener0() {\n\ttimesCalled = 0;\n    }\n\n    public void clear() {\n\ttimesCalled = 0;\n    }\n\n    public int getCalledTimes() {\n\treturn timesCalled;\n    }\n\n    public boolean isCalled() {\n\treturn getCalledTimes() > 0;\n    }\n\n    public boolean isCalled(final int timesCalled) {\n\treturn getCalledTimes() == timesCalled;\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    /**\n     * does't have sense for Listener0. Throws RuntimeException\n     */\n    public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n\tthrow new RuntimeException(\"Listener0 can't have parameters\");\n    }\n\n    /**\n     * does't have sense for Listener0. Throws RuntimeException\n     */\n    public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n\tthrow new RuntimeException(\"Listener0 can't have parameters\");\n    }\n\n    public boolean isNotCalled() {\n\treturn getCalledTimes() == 0;\n    }\n\n    public void onEvent() {\n\ttimesCalled++;\n    }\n\n}",
        "start_point": {
            "row": 25,
            "column": 0
        },
        "end_point": {
            "row": 74,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/MockedListener0.java",
        "methods": [
            {
                "definition": "public MockedListener0() {\nesCalled = 0;\n}",
                "name": "MockedListener0",
                "modifiers": "public",
                "parameters": [],
                "body": "{\nesCalled = 0;\n}",
                "constructor": true,
                "start_point": {
                    "row": 28,
                    "column": 4
                },
                "end_point": {
                    "row": 30,
                    "column": 5
                }
            },
            {
                "definition": "public void clear() {\nesCalled = 0;\n}",
                "name": "clear",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nesCalled = 0;\n}",
                "start_point": {
                    "row": 32,
                    "column": 4
                },
                "end_point": {
                    "row": 34,
                    "column": 5
                }
            },
            {
                "definition": "public int getCalledTimes() {\nurn timesCalled;\n}",
                "name": "getCalledTimes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn timesCalled;\n}",
                "start_point": {
                    "row": 36,
                    "column": 4
                },
                "end_point": {
                    "row": 38,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalled() {\nurn getCalledTimes() > 0;\n}",
                "name": "isCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() > 0;\n}",
                "start_point": {
                    "row": 40,
                    "column": 4
                },
                "end_point": {
                    "row": 42,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalled(final int timesCalled) {\nurn getCalledTimes() == timesCalled;\n}",
                "name": "isCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    }
                ],
                "body": "{\nurn getCalledTimes() == timesCalled;\n}",
                "start_point": {
                    "row": 44,
                    "column": 4
                },
                "end_point": {
                    "row": 46,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledOnce() {\nurn getCalledTimes() == 1;\n}",
                "name": "isCalledOnce",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() == 1;\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 50,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\now new RuntimeException(\"Listener0 can't have parameters\");\n}",
                "name": "isCalledWithEquals",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\now new RuntimeException(\"Listener0 can't have parameters\");\n}",
                "start_point": {
                    "row": 55,
                    "column": 4
                },
                "end_point": {
                    "row": 57,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledWithSame(final Object... expectedOrderedValues) {\now new RuntimeException(\"Listener0 can't have parameters\");\n}",
                "name": "isCalledWithSame",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\now new RuntimeException(\"Listener0 can't have parameters\");\n}",
                "start_point": {
                    "row": 62,
                    "column": 4
                },
                "end_point": {
                    "row": 64,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isNotCalled() {\nurn getCalledTimes() == 0;\n}",
                "name": "isNotCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() == 0;\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "public void onEvent() {\nesCalled++;\n}",
                "name": "onEvent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nesCalled++;\n}",
                "start_point": {
                    "row": 70,
                    "column": 4
                },
                "end_point": {
                    "row": 72,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/MockedListener0Tests.java",
        "definition": "public class MockedListener0Tests {\n\n    @Test\n    public void test() {\n\tfinal MockedListener0 listener = new MockedListener0();\n\tlistener.onEvent();\n\tassertTrue(listener.isCalled());\n\tassertTrue(listener.isCalledOnce());\n\tassertTrue(listener.isCalled(1));\n\tlistener.onEvent();\n\tassertTrue(listener.isCalled());\n\tassertFalse(listener.isCalledOnce());\n\tassertTrue(listener.isCalled(2));\n    }\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "MockedListener0Tests",
        "name": "MockedListener0Tests",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    @Test\n    public void test() {\n\tfinal MockedListener0 listener = new MockedListener0();\n\tlistener.onEvent();\n\tassertTrue(listener.isCalled());\n\tassertTrue(listener.isCalledOnce());\n\tassertTrue(listener.isCalled(1));\n\tlistener.onEvent();\n\tassertTrue(listener.isCalled());\n\tassertFalse(listener.isCalledOnce());\n\tassertTrue(listener.isCalled(2));\n    }\n}",
        "start_point": {
            "row": 7,
            "column": 0
        },
        "end_point": {
            "row": 21,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/MockedListener0Tests.java",
        "methods": [
            {
                "definition": "@Test\npublic void test() {\nal MockedListener0 listener = new MockedListener0();\ntener.onEvent();\nertTrue(listener.isCalled());\nertTrue(listener.isCalledOnce());\nertTrue(listener.isCalled(1));\ntener.onEvent();\nertTrue(listener.isCalled());\nertFalse(listener.isCalledOnce());\nertTrue(listener.isCalled(2));\n}",
                "name": "test",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockedListener0 listener = new MockedListener0();\ntener.onEvent();\nertTrue(listener.isCalled());\nertTrue(listener.isCalledOnce());\nertTrue(listener.isCalled(1));\ntener.onEvent();\nertTrue(listener.isCalled());\nertFalse(listener.isCalledOnce());\nertTrue(listener.isCalled(2));\n}",
                "start_point": {
                    "row": 9,
                    "column": 4
                },
                "end_point": {
                    "row": 20,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/MockedListener2.java",
        "definition": "public class MockedListener2<A, B> implements Listener2<A, B>, VerificableListener {\n    private final ArrayList<A> paramsA;\n    private final ArrayList<B> paramsB;\n\n    public MockedListener2() {\n\tparamsA = new ArrayList<A>();\n\tparamsB = new ArrayList<B>();\n    }\n\n    public void clear() {\n\tparamsA.clear();\n\tparamsB.clear();\n    }\n\n    public int getCalledTimes() {\n\treturn paramsA.size();\n    }\n\n    public boolean isCalled() {\n\treturn getCalledTimes() > 0;\n    }\n\n    public boolean isCalled(final int timesCalled) {\n\treturn getCalledTimes() == timesCalled;\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    /**\n     * the number of arguments must be double of listener calls!\n     */\n    public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n\tif (paramsA.size() * 2 != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n\t    return false;\n\t}\n\tfinal ArrayList<Object> expectedA = new ArrayList<Object>();\n\tfinal ArrayList<Object> expectedB = new ArrayList<Object>();\n\tfor (int index = 0; index < expectedOrderedValues.length; index += 2) {\n\t    expectedA.add(expectedOrderedValues[index]);\n\t    expectedB.add(expectedOrderedValues[index + 1]);\n\t}\n\n\tfor (int index = 0; index < paramsA.size(); index++) {\n\t    if (!expectedA.get(index).equals(paramsA.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t    if (!expectedB.get(index).equals(paramsB.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    /**\n     * the number of arguments must be double of listener calls!\n     */\n    public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n\tif (paramsA.size() * 2 != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n\t    return false;\n\t}\n\tfinal ArrayList<Object> expectedA = new ArrayList<Object>();\n\tfinal ArrayList<Object> expectedB = new ArrayList<Object>();\n\tfor (int index = 0; index < expectedOrderedValues.length; index += 2) {\n\t    expectedA.add(expectedOrderedValues[index]);\n\t    expectedB.add(expectedOrderedValues[index + 1]);\n\t}\n\n\tfor (int index = 0; index < paramsA.size(); index++) {\n\t    if (!(expectedA.get(index) == paramsA.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t    if (!(expectedB.get(index) == paramsB.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    public boolean isNotCalled() {\n\treturn getCalledTimes() == 0;\n    }\n\n    public void onEvent(final A paramA, final B paramB) {\n\tparamsA.add(paramA);\n\tparamsB.add(paramB);\n    }\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "MockedListener2",
        "name": "MockedListener2",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements Listener2<A, B>, VerificableListener",
        "body": "{\n    private final ArrayList<A> paramsA;\n    private final ArrayList<B> paramsB;\n\n    public MockedListener2() {\n\tparamsA = new ArrayList<A>();\n\tparamsB = new ArrayList<B>();\n    }\n\n    public void clear() {\n\tparamsA.clear();\n\tparamsB.clear();\n    }\n\n    public int getCalledTimes() {\n\treturn paramsA.size();\n    }\n\n    public boolean isCalled() {\n\treturn getCalledTimes() > 0;\n    }\n\n    public boolean isCalled(final int timesCalled) {\n\treturn getCalledTimes() == timesCalled;\n    }\n\n    public boolean isCalledOnce() {\n\treturn getCalledTimes() == 1;\n    }\n\n    /**\n     * the number of arguments must be double of listener calls!\n     */\n    public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n\tif (paramsA.size() * 2 != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n\t    return false;\n\t}\n\tfinal ArrayList<Object> expectedA = new ArrayList<Object>();\n\tfinal ArrayList<Object> expectedB = new ArrayList<Object>();\n\tfor (int index = 0; index < expectedOrderedValues.length; index += 2) {\n\t    expectedA.add(expectedOrderedValues[index]);\n\t    expectedB.add(expectedOrderedValues[index + 1]);\n\t}\n\n\tfor (int index = 0; index < paramsA.size(); index++) {\n\t    if (!expectedA.get(index).equals(paramsA.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t    if (!expectedB.get(index).equals(paramsB.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    /**\n     * the number of arguments must be double of listener calls!\n     */\n    public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n\tif (paramsA.size() * 2 != expectedOrderedValues.length) {\n\t    Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n\t    return false;\n\t}\n\tfinal ArrayList<Object> expectedA = new ArrayList<Object>();\n\tfinal ArrayList<Object> expectedB = new ArrayList<Object>();\n\tfor (int index = 0; index < expectedOrderedValues.length; index += 2) {\n\t    expectedA.add(expectedOrderedValues[index]);\n\t    expectedB.add(expectedOrderedValues[index + 1]);\n\t}\n\n\tfor (int index = 0; index < paramsA.size(); index++) {\n\t    if (!(expectedA.get(index) == paramsA.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t    if (!(expectedB.get(index) == paramsB.get(index))) {\n\t\tLogger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\n\t\t\t.get(index));\n\t\treturn false;\n\t    }\n\t}\n\n\treturn true;\n    }\n\n    public boolean isNotCalled() {\n\treturn getCalledTimes() == 0;\n    }\n\n    public void onEvent(final A paramA, final B paramB) {\n\tparamsA.add(paramA);\n\tparamsB.add(paramB);\n    }\n}",
        "start_point": {
            "row": 33,
            "column": 0
        },
        "end_point": {
            "row": 133,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/MockedListener2.java",
        "methods": [
            {
                "definition": "public MockedListener2() {\namsA = new ArrayList<A>();\namsB = new ArrayList<B>();\n}",
                "name": "MockedListener2",
                "modifiers": "public",
                "parameters": [],
                "body": "{\namsA = new ArrayList<A>();\namsB = new ArrayList<B>();\n}",
                "constructor": true,
                "start_point": {
                    "row": 37,
                    "column": 4
                },
                "end_point": {
                    "row": 40,
                    "column": 5
                }
            },
            {
                "definition": "public void clear() {\namsA.clear();\namsB.clear();\n}",
                "name": "clear",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\namsA.clear();\namsB.clear();\n}",
                "start_point": {
                    "row": 42,
                    "column": 4
                },
                "end_point": {
                    "row": 45,
                    "column": 5
                }
            },
            {
                "definition": "public int getCalledTimes() {\nurn paramsA.size();\n}",
                "name": "getCalledTimes",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn paramsA.size();\n}",
                "start_point": {
                    "row": 47,
                    "column": 4
                },
                "end_point": {
                    "row": 49,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalled() {\nurn getCalledTimes() > 0;\n}",
                "name": "isCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() > 0;\n}",
                "start_point": {
                    "row": 51,
                    "column": 4
                },
                "end_point": {
                    "row": 53,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalled(final int timesCalled) {\nurn getCalledTimes() == timesCalled;\n}",
                "name": "isCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "int"
                    }
                ],
                "body": "{\nurn getCalledTimes() == timesCalled;\n}",
                "start_point": {
                    "row": 55,
                    "column": 4
                },
                "end_point": {
                    "row": 57,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledOnce() {\nurn getCalledTimes() == 1;\n}",
                "name": "isCalledOnce",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() == 1;\n}",
                "start_point": {
                    "row": 59,
                    "column": 4
                },
                "end_point": {
                    "row": 61,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledWithEquals(final Object... expectedOrderedValues) {\n(paramsA.size() * 2 != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n return false;\n\nal ArrayList<Object> expectedA = new ArrayList<Object>();\nal ArrayList<Object> expectedB = new ArrayList<Object>();\n (int index = 0; index < expectedOrderedValues.length; index += 2) {\n expectedA.add(expectedOrderedValues[index]);\n expectedB.add(expectedOrderedValues[index + 1]);\n\n\n (int index = 0; index < paramsA.size(); index++) {\n if (!expectedA.get(index).equals(paramsA.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\nget(index));\nturn false;\n }\n if (!expectedB.get(index).equals(paramsB.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\nget(index));\nturn false;\n }\n\n\nurn true;\n}",
                "name": "isCalledWithEquals",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n(paramsA.size() * 2 != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n return false;\n\nal ArrayList<Object> expectedA = new ArrayList<Object>();\nal ArrayList<Object> expectedB = new ArrayList<Object>();\n (int index = 0; index < expectedOrderedValues.length; index += 2) {\n expectedA.add(expectedOrderedValues[index]);\n expectedB.add(expectedOrderedValues[index + 1]);\n\n\n (int index = 0; index < paramsA.size(); index++) {\n if (!expectedA.get(index).equals(paramsA.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\nget(index));\nturn false;\n }\n if (!expectedB.get(index).equals(paramsB.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\nget(index));\nturn false;\n }\n\n\nurn true;\n}",
                "start_point": {
                    "row": 66,
                    "column": 4
                },
                "end_point": {
                    "row": 92,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isCalledWithSame(final Object... expectedOrderedValues) {\n(paramsA.size() * 2 != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n return false;\n\nal ArrayList<Object> expectedA = new ArrayList<Object>();\nal ArrayList<Object> expectedB = new ArrayList<Object>();\n (int index = 0; index < expectedOrderedValues.length; index += 2) {\n expectedA.add(expectedOrderedValues[index]);\n expectedB.add(expectedOrderedValues[index + 1]);\n\n\n (int index = 0; index < paramsA.size(); index++) {\n if (!(expectedA.get(index) == paramsA.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\nget(index));\nturn false;\n }\n if (!(expectedB.get(index) == paramsB.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\nget(index));\nturn false;\n }\n\n\nurn true;\n}",
                "name": "isCalledWithSame",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\n(paramsA.size() * 2 != expectedOrderedValues.length) {\n Logger.debug(\"Expected called {0} times but was {1}\", expectedOrderedValues.length / 2, paramsA.size());\n return false;\n\nal ArrayList<Object> expectedA = new ArrayList<Object>();\nal ArrayList<Object> expectedB = new ArrayList<Object>();\n (int index = 0; index < expectedOrderedValues.length; index += 2) {\n expectedA.add(expectedOrderedValues[index]);\n expectedB.add(expectedOrderedValues[index + 1]);\n\n\n (int index = 0; index < paramsA.size(); index++) {\n if (!(expectedA.get(index) == paramsA.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedA.get(index), paramsA\nget(index));\nturn false;\n }\n if (!(expectedB.get(index) == paramsB.get(index))) {\ngger.debug(\"Expected as first parameter equals to {0} but was {1}\", expectedB.get(index), paramsB\nget(index));\nturn false;\n }\n\n\nurn true;\n}",
                "start_point": {
                    "row": 97,
                    "column": 4
                },
                "end_point": {
                    "row": 123,
                    "column": 5
                }
            },
            {
                "definition": "public boolean isNotCalled() {\nurn getCalledTimes() == 0;\n}",
                "name": "isNotCalled",
                "modifiers": "public",
                "return_type": null,
                "parameters": [],
                "body": "{\nurn getCalledTimes() == 0;\n}",
                "start_point": {
                    "row": 125,
                    "column": 4
                },
                "end_point": {
                    "row": 127,
                    "column": 5
                }
            },
            {
                "definition": "public void onEvent(final A paramA, final B paramB) {\namsA.add(paramA);\namsB.add(paramB);\n}",
                "name": "onEvent",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "A"
                    },
                    {
                        "type": "final",
                        "name": "B"
                    }
                ],
                "body": "{\namsA.add(paramA);\namsB.add(paramB);\n}",
                "start_point": {
                    "row": 129,
                    "column": 4
                },
                "end_point": {
                    "row": 132,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/MockedListener2Tests.java",
        "definition": "public class MockedListener2Tests {\n\n    @Test\n    public void test() {\n\tfinal MockedListener2<String, String> listener = new MockedListener2<String, String>();\n\tlistener.onEvent(\"one\", \"two\");\n\tlistener.onEvent(\"three\", \"four\");\n\tassertTrue(listener.isCalled(2));\n\tassertTrue(listener.isCalledWithEquals(\"one\", \"two\", \"three\", \"four\"));\n\tassertTrue(listener.isCalledWithSame(\"one\", \"two\", \"three\", \"four\"));\n    }\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "MockedListener2Tests",
        "name": "MockedListener2Tests",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    @Test\n    public void test() {\n\tfinal MockedListener2<String, String> listener = new MockedListener2<String, String>();\n\tlistener.onEvent(\"one\", \"two\");\n\tlistener.onEvent(\"three\", \"four\");\n\tassertTrue(listener.isCalled(2));\n\tassertTrue(listener.isCalledWithEquals(\"one\", \"two\", \"three\", \"four\"));\n\tassertTrue(listener.isCalledWithSame(\"one\", \"two\", \"three\", \"four\"));\n    }\n}",
        "start_point": {
            "row": 6,
            "column": 0
        },
        "end_point": {
            "row": 17,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/MockedListener2Tests.java",
        "methods": [
            {
                "definition": "@Test\npublic void test() {\nal MockedListener2<String, String> listener = new MockedListener2<String, String>();\ntener.onEvent(\"one\", \"two\");\ntener.onEvent(\"three\", \"four\");\nertTrue(listener.isCalled(2));\nertTrue(listener.isCalledWithEquals(\"one\", \"two\", \"three\", \"four\"));\nertTrue(listener.isCalledWithSame(\"one\", \"two\", \"three\", \"four\"));\n}",
                "name": "test",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockedListener2<String, String> listener = new MockedListener2<String, String>();\ntener.onEvent(\"one\", \"two\");\ntener.onEvent(\"three\", \"four\");\nertTrue(listener.isCalled(2));\nertTrue(listener.isCalledWithEquals(\"one\", \"two\", \"three\", \"four\"));\nertTrue(listener.isCalledWithSame(\"one\", \"two\", \"three\", \"four\"));\n}",
                "start_point": {
                    "row": 8,
                    "column": 4
                },
                "end_point": {
                    "row": 16,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/MockedListenerTests.java",
        "definition": "public class MockedListenerTests {\n\n    @Test\n    public void simple() {\n\tfinal MockedListener<String> listener = new MockedListener<String>();\n\tassertFalse(listener.isCalled());\n\tlistener.onEvent(\"One\");\n\tlistener.onEvent(\"Two\");\n\tassertTrue(listener.isCalled());\n\tassertTrue(listener.isCalledWithEquals(\"One\", \"Two\"));\n\tassertFalse(listener.isCalledWithEquals(\"Two\", \"One\"));\n\tassertFalse(listener.isCalledWithSame(\"One-\", \"Two\"));\n    }\n}",
        "package": "package com.calclab.suco.testing.events;",
        "tree_path": "MockedListenerTests",
        "name": "MockedListenerTests",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    @Test\n    public void simple() {\n\tfinal MockedListener<String> listener = new MockedListener<String>();\n\tassertFalse(listener.isCalled());\n\tlistener.onEvent(\"One\");\n\tlistener.onEvent(\"Two\");\n\tassertTrue(listener.isCalled());\n\tassertTrue(listener.isCalledWithEquals(\"One\", \"Two\"));\n\tassertFalse(listener.isCalledWithEquals(\"Two\", \"One\"));\n\tassertFalse(listener.isCalledWithSame(\"One-\", \"Two\"));\n    }\n}",
        "start_point": {
            "row": 7,
            "column": 0
        },
        "end_point": {
            "row": 20,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/MockedListenerTests.java",
        "methods": [
            {
                "definition": "@Test\npublic void simple() {\nal MockedListener<String> listener = new MockedListener<String>();\nertFalse(listener.isCalled());\ntener.onEvent(\"One\");\ntener.onEvent(\"Two\");\nertTrue(listener.isCalled());\nertTrue(listener.isCalledWithEquals(\"One\", \"Two\"));\nertFalse(listener.isCalledWithEquals(\"Two\", \"One\"));\nertFalse(listener.isCalledWithSame(\"One-\", \"Two\"));\n}",
                "name": "simple",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockedListener<String> listener = new MockedListener<String>();\nertFalse(listener.isCalled());\ntener.onEvent(\"One\");\ntener.onEvent(\"Two\");\nertTrue(listener.isCalled());\nertTrue(listener.isCalledWithEquals(\"One\", \"Two\"));\nertFalse(listener.isCalledWithEquals(\"Two\", \"One\"));\nertFalse(listener.isCalledWithSame(\"One-\", \"Two\"));\n}",
                "start_point": {
                    "row": 9,
                    "column": 4
                },
                "end_point": {
                    "row": 19,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/internal/BaseListenerMatcher.java",
        "definition": "public abstract class BaseListenerMatcher<T> extends BaseMatcher<T> {\n    private ParamHolder param;\n\n    public BaseListenerMatcher(final ParamHolder param) {\n\tthis.param = param;\n    }\n\n    public void describeTo(final Description description) {\n\tdescription.appendText(\"any listener\");\n    }\n\n    public boolean matches(final Object item) {\n\ttry {\n\t    if (param != null) {\n\t\tperform(item, param);\n\t\tparam = null;\n\t    }\n\t} catch (final ClassCastException e) {\n\t    return false;\n\t}\n\treturn true;\n    }\n\n    public abstract void perform(Object listener, ParamHolder param);\n}",
        "package": "package com.calclab.suco.testing.events.internal;",
        "tree_path": "BaseListenerMatcher",
        "name": "BaseListenerMatcher",
        "modifiers": "public abstract",
        "superclass": "extends BaseMatcher<T>",
        "super_interfaces": null,
        "body": "{\n    private ParamHolder param;\n\n    public BaseListenerMatcher(final ParamHolder param) {\n\tthis.param = param;\n    }\n\n    public void describeTo(final Description description) {\n\tdescription.appendText(\"any listener\");\n    }\n\n    public boolean matches(final Object item) {\n\ttry {\n\t    if (param != null) {\n\t\tperform(item, param);\n\t\tparam = null;\n\t    }\n\t} catch (final ClassCastException e) {\n\t    return false;\n\t}\n\treturn true;\n    }\n\n    public abstract void perform(Object listener, ParamHolder param);\n}",
        "start_point": {
            "row": 31,
            "column": 0
        },
        "end_point": {
            "row": 55,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/internal/BaseListenerMatcher.java",
        "methods": [
            {
                "definition": "public BaseListenerMatcher(final ParamHolder param) {\ns.param = param;\n}",
                "name": "BaseListenerMatcher",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "ParamHolder"
                    }
                ],
                "body": "{\ns.param = param;\n}",
                "constructor": true,
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 36,
                    "column": 5
                }
            },
            {
                "definition": "public void describeTo(final Description description) {\ncription.appendText(\"any listener\");\n}",
                "name": "describeTo",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Description"
                    }
                ],
                "body": "{\ncription.appendText(\"any listener\");\n}",
                "start_point": {
                    "row": 38,
                    "column": 4
                },
                "end_point": {
                    "row": 40,
                    "column": 5
                }
            },
            {
                "definition": "public boolean matches(final Object item) {\n {\n if (param != null) {\nrform(item, param);\nram = null;\n }\natch (final ClassCastException e) {\n return false;\n\nurn true;\n}",
                "name": "matches",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    }
                ],
                "body": "{\n {\n if (param != null) {\nrform(item, param);\nram = null;\n }\natch (final ClassCastException e) {\n return false;\n\nurn true;\n}",
                "start_point": {
                    "row": 42,
                    "column": 4
                },
                "end_point": {
                    "row": 52,
                    "column": 5
                }
            },
            {
                "definition": "public abstract void perform(Object listener, ParamHolder param);",
                "name": "perform",
                "modifiers": "public abstract",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Object",
                        "name": "listener"
                    },
                    {
                        "type": "ParamHolder",
                        "name": "param"
                    }
                ],
                "body": null,
                "start_point": {
                    "row": 54,
                    "column": 4
                },
                "end_point": {
                    "row": 54,
                    "column": 69
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/internal/Listener0Matcher.java",
        "definition": "public class Listener0Matcher extends BaseListenerMatcher<Listener0> {\n    public Listener0Matcher(final ParamHolder param) {\n\tsuper(param);\n    }\n\n    @Override\n    public void perform(final Object listener, final ParamHolder param) {\n\t((Listener0) listener).onEvent();\n    }\n\n}",
        "package": "package com.calclab.suco.testing.events.internal;",
        "tree_path": "Listener0Matcher",
        "name": "Listener0Matcher",
        "modifiers": "public",
        "superclass": "extends BaseListenerMatcher<Listener0>",
        "super_interfaces": null,
        "body": "{\n    public Listener0Matcher(final ParamHolder param) {\n\tsuper(param);\n    }\n\n    @Override\n    public void perform(final Object listener, final ParamHolder param) {\n\t((Listener0) listener).onEvent();\n    }\n\n}",
        "start_point": {
            "row": 29,
            "column": 0
        },
        "end_point": {
            "row": 39,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/internal/Listener0Matcher.java",
        "methods": [
            {
                "definition": "public Listener0Matcher(final ParamHolder param) {\ner(param);\n}",
                "name": "Listener0Matcher",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "ParamHolder"
                    }
                ],
                "body": "{\ner(param);\n}",
                "constructor": true,
                "start_point": {
                    "row": 30,
                    "column": 4
                },
                "end_point": {
                    "row": 32,
                    "column": 5
                }
            },
            {
                "definition": "@Override\npublic void perform(final Object listener, final ParamHolder param) {\nistener0) listener).onEvent();\n}",
                "name": "perform",
                "modifiers": "@Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "ParamHolder"
                    }
                ],
                "body": "{\nistener0) listener).onEvent();\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 37,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/internal/Listener2Matcher.java",
        "definition": "public class Listener2Matcher<A, B> extends BaseListenerMatcher<Listener2<A, B>> {\n    public Listener2Matcher(final ParamHolder param) {\n\tsuper(param);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void perform(final Object listener, final ParamHolder param) {\n\t((Listener2) listener).onEvent(param.getParam1(), param.getParam2());\n    }\n\n}",
        "package": "package com.calclab.suco.testing.events.internal;",
        "tree_path": "Listener2Matcher",
        "name": "Listener2Matcher",
        "modifiers": "public",
        "superclass": "extends BaseListenerMatcher<Listener2<A, B>>",
        "super_interfaces": null,
        "body": "{\n    public Listener2Matcher(final ParamHolder param) {\n\tsuper(param);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void perform(final Object listener, final ParamHolder param) {\n\t((Listener2) listener).onEvent(param.getParam1(), param.getParam2());\n    }\n\n}",
        "start_point": {
            "row": 29,
            "column": 0
        },
        "end_point": {
            "row": 40,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/internal/Listener2Matcher.java",
        "methods": [
            {
                "definition": "public Listener2Matcher(final ParamHolder param) {\ner(param);\n}",
                "name": "Listener2Matcher",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "ParamHolder"
                    }
                ],
                "body": "{\ner(param);\n}",
                "constructor": true,
                "start_point": {
                    "row": 30,
                    "column": 4
                },
                "end_point": {
                    "row": 32,
                    "column": 5
                }
            },
            {
                "definition": "@SuppressWarnings(\"unchecked\")\n@Override\npublic void perform(final Object listener, final ParamHolder param) {\nistener2) listener).onEvent(param.getParam1(), param.getParam2());\n}",
                "name": "perform",
                "modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "ParamHolder"
                    }
                ],
                "body": "{\nistener2) listener).onEvent(param.getParam1(), param.getParam2());\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 38,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/events/internal/ListenerMatcher.java",
        "definition": "public class ListenerMatcher<T> extends BaseListenerMatcher<Listener<T>> {\n    public ListenerMatcher(final ParamHolder param) {\n\tsuper(param);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void perform(final Object listener, final ParamHolder param) {\n\t((Listener) listener).onEvent(param.getParam1());\n    }\n\n}",
        "package": "package com.calclab.suco.testing.events.internal;",
        "tree_path": "ListenerMatcher",
        "name": "ListenerMatcher",
        "modifiers": "public",
        "superclass": "extends BaseListenerMatcher<Listener<T>>",
        "super_interfaces": null,
        "body": "{\n    public ListenerMatcher(final ParamHolder param) {\n\tsuper(param);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void perform(final Object listener, final ParamHolder param) {\n\t((Listener) listener).onEvent(param.getParam1());\n    }\n\n}",
        "start_point": {
            "row": 29,
            "column": 0
        },
        "end_point": {
            "row": 40,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/events/internal/ListenerMatcher.java",
        "methods": [
            {
                "definition": "public ListenerMatcher(final ParamHolder param) {\ner(param);\n}",
                "name": "ListenerMatcher",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "ParamHolder"
                    }
                ],
                "body": "{\ner(param);\n}",
                "constructor": true,
                "start_point": {
                    "row": 30,
                    "column": 4
                },
                "end_point": {
                    "row": 32,
                    "column": 5
                }
            },
            {
                "definition": "@SuppressWarnings(\"unchecked\")\n@Override\npublic void perform(final Object listener, final ParamHolder param) {\nistener) listener).onEvent(param.getParam1());\n}",
                "name": "perform",
                "modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "ParamHolder"
                    }
                ],
                "body": "{\nistener) listener).onEvent(param.getParam1());\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 38,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/ioc/MockContainer.java",
        "definition": "public class MockContainer implements Container {\n    private final HashMap<Class<?>, Provider<?>> providers;\n\n    public MockContainer() {\n\tproviders = new HashMap<Class<?>, Provider<?>>();\n    }\n\n    /**\n     * Create a instance of the given class if only one public constructor\n     * available. Fill the constructor dependencies with the instances of the\n     * container (mocks by default)\n     * \n     * @param <T>\n     * @param componentType\n     *            the type of the component to be created\n     * @return a instance of that component if only public constructor\n     *         available.\n     */\n    public <T> T create(final Class<T> componentType) {\n\treturn registerProvider(Singleton.instance, componentType, new Provider<T>() {\n\t    public T get() {\n\t\treturn createInstance(componentType);\n\t    }\n\t}).get();\n    }\n\n    public <T> T getInstance(final Class<T> componentKey) {\n\treturn getProvider(componentKey).get();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> Provider<T> getProvider(final Class<T> componentKey) {\n\tProvider<T> p = (Provider<T>) providers.get(componentKey);\n\tif (p == null) {\n\t    p = Singleton.instance.decorate(componentKey, createProvider(componentKey));\n\t    providers.put(componentKey, p);\n\t}\n\treturn p;\n    }\n\n    public boolean hasProvider(final Class<?> componentKey) {\n\treturn true;\n    }\n\n    public <T> Provider<T> registerInstance(final Class<T> type, final T instance) {\n\treturn registerProvider(NoDecoration.instance, type, new Provider<T>() {\n\t    public T get() {\n\t\treturn instance;\n\t    }\n\t});\n    }\n\n    /**\n     * You can override the default singleton mocked providers\n     */\n    public <T> Provider<T> registerProvider(final Decorator decorator, final Class<T> componentType,\n\t    final Provider<T> provider) {\n\tfinal Provider<T> decorated = decorator.decorate(componentType, provider);\n\tproviders.put(componentType, decorated);\n\treturn decorated;\n    }\n\n    public <T> Provider<T> removeProvider(final Class<T> componentKey) {\n\tthrow new RuntimeException(\"method not implemented\");\n    }\n\n    /**\n     * All the mocked providers have Singleton scope by default. You can\n     * override this behaviour with this method\n     * \n     * @param decorator\n     *            The decorator to be applied\n     * @param type\n     *            the component type of the provider\n     */\n    public <T> Provider<T> setDecorationOfProvider(final Decorator decorator, final Class<T> type) {\n\tfinal Provider<T> p = decorator.decorate(type, createProvider(type));\n\tproviders.put(type, p);\n\treturn p;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T> T createInstance(final Class<T> componentType) {\n\tfinal Constructor<T>[] constructors = (Constructor<T>[]) componentType.getConstructors();\n\tif (constructors.length != 1) {\n\t    throw new RuntimeException(\"Should be one and only one public constructor\");\n\t}\n\tfinal Constructor<T> constructor = constructors[0];\n\tfinal Class<?>[] parameterTypes = constructor.getParameterTypes();\n\tfinal Object[] args = new Object[parameterTypes.length];\n\tfor (int index = 0; index < parameterTypes.length; index++) {\n\t    args[index] = getInstance(parameterTypes[index]);\n\t}\n\ttry {\n\t    return constructor.newInstance(args);\n\t} catch (final Exception e) {\n\t    throw new RuntimeException(\"problem creating the instance\", e);\n\t}\n    }\n\n    private <T> Provider<T> createProvider(final Class<T> componentKey) {\n\treturn new Provider<T>() {\n\t    public T get() {\n\t\treturn Mockito.mock(componentKey);\n\t    }\n\t};\n    }\n\n}",
        "package": "package com.calclab.suco.testing.ioc;",
        "tree_path": "MockContainer",
        "name": "MockContainer",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements Container",
        "body": "{\n    private final HashMap<Class<?>, Provider<?>> providers;\n\n    public MockContainer() {\n\tproviders = new HashMap<Class<?>, Provider<?>>();\n    }\n\n    /**\n     * Create a instance of the given class if only one public constructor\n     * available. Fill the constructor dependencies with the instances of the\n     * container (mocks by default)\n     * \n     * @param <T>\n     * @param componentType\n     *            the type of the component to be created\n     * @return a instance of that component if only public constructor\n     *         available.\n     */\n    public <T> T create(final Class<T> componentType) {\n\treturn registerProvider(Singleton.instance, componentType, new Provider<T>() {\n\t    public T get() {\n\t\treturn createInstance(componentType);\n\t    }\n\t}).get();\n    }\n\n    public <T> T getInstance(final Class<T> componentKey) {\n\treturn getProvider(componentKey).get();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> Provider<T> getProvider(final Class<T> componentKey) {\n\tProvider<T> p = (Provider<T>) providers.get(componentKey);\n\tif (p == null) {\n\t    p = Singleton.instance.decorate(componentKey, createProvider(componentKey));\n\t    providers.put(componentKey, p);\n\t}\n\treturn p;\n    }\n\n    public boolean hasProvider(final Class<?> componentKey) {\n\treturn true;\n    }\n\n    public <T> Provider<T> registerInstance(final Class<T> type, final T instance) {\n\treturn registerProvider(NoDecoration.instance, type, new Provider<T>() {\n\t    public T get() {\n\t\treturn instance;\n\t    }\n\t});\n    }\n\n    /**\n     * You can override the default singleton mocked providers\n     */\n    public <T> Provider<T> registerProvider(final Decorator decorator, final Class<T> componentType,\n\t    final Provider<T> provider) {\n\tfinal Provider<T> decorated = decorator.decorate(componentType, provider);\n\tproviders.put(componentType, decorated);\n\treturn decorated;\n    }\n\n    public <T> Provider<T> removeProvider(final Class<T> componentKey) {\n\tthrow new RuntimeException(\"method not implemented\");\n    }\n\n    /**\n     * All the mocked providers have Singleton scope by default. You can\n     * override this behaviour with this method\n     * \n     * @param decorator\n     *            The decorator to be applied\n     * @param type\n     *            the component type of the provider\n     */\n    public <T> Provider<T> setDecorationOfProvider(final Decorator decorator, final Class<T> type) {\n\tfinal Provider<T> p = decorator.decorate(type, createProvider(type));\n\tproviders.put(type, p);\n\treturn p;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T> T createInstance(final Class<T> componentType) {\n\tfinal Constructor<T>[] constructors = (Constructor<T>[]) componentType.getConstructors();\n\tif (constructors.length != 1) {\n\t    throw new RuntimeException(\"Should be one and only one public constructor\");\n\t}\n\tfinal Constructor<T> constructor = constructors[0];\n\tfinal Class<?>[] parameterTypes = constructor.getParameterTypes();\n\tfinal Object[] args = new Object[parameterTypes.length];\n\tfor (int index = 0; index < parameterTypes.length; index++) {\n\t    args[index] = getInstance(parameterTypes[index]);\n\t}\n\ttry {\n\t    return constructor.newInstance(args);\n\t} catch (final Exception e) {\n\t    throw new RuntimeException(\"problem creating the instance\", e);\n\t}\n    }\n\n    private <T> Provider<T> createProvider(final Class<T> componentKey) {\n\treturn new Provider<T>() {\n\t    public T get() {\n\t\treturn Mockito.mock(componentKey);\n\t    }\n\t};\n    }\n\n}",
        "start_point": {
            "row": 18,
            "column": 0
        },
        "end_point": {
            "row": 126,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/ioc/MockContainer.java",
        "methods": [
            {
                "definition": "public MockContainer() {\nviders = new HashMap<Class<?>, Provider<?>>();\n}",
                "name": "MockContainer",
                "modifiers": "public",
                "parameters": [],
                "body": "{\nviders = new HashMap<Class<?>, Provider<?>>();\n}",
                "constructor": true,
                "start_point": {
                    "row": 21,
                    "column": 4
                },
                "end_point": {
                    "row": 23,
                    "column": 5
                }
            },
            {
                "definition": "public <T> T create(final Class<T> componentType) {\nurn registerProvider(Singleton.instance, componentType, new Provider<T>() {\n public T get() {\nturn createInstance(componentType);\n }\nget();\n}",
                "name": "create",
                "modifiers": "public",
                "return_type": "T",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\nurn registerProvider(Singleton.instance, componentType, new Provider<T>() {\n public T get() {\nturn createInstance(componentType);\n }\nget();\n}",
                "start_point": {
                    "row": 36,
                    "column": 4
                },
                "end_point": {
                    "row": 42,
                    "column": 5
                }
            },
            {
                "definition": "public <T> T getInstance(final Class<T> componentKey) {\nurn getProvider(componentKey).get();\n}",
                "name": "getInstance",
                "modifiers": "public",
                "return_type": "T",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\nurn getProvider(componentKey).get();\n}",
                "start_point": {
                    "row": 44,
                    "column": 4
                },
                "end_point": {
                    "row": 46,
                    "column": 5
                }
            },
            {
                "definition": "@SuppressWarnings(\"unchecked\")\npublic <T> Provider<T> getProvider(final Class<T> componentKey) {\nvider<T> p = (Provider<T>) providers.get(componentKey);\n(p == null) {\n p = Singleton.instance.decorate(componentKey, createProvider(componentKey));\n providers.put(componentKey, p);\n\nurn p;\n}",
                "name": "getProvider",
                "modifiers": "@SuppressWarnings(\"unchecked\")\n    public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\nvider<T> p = (Provider<T>) providers.get(componentKey);\n(p == null) {\n p = Singleton.instance.decorate(componentKey, createProvider(componentKey));\n providers.put(componentKey, p);\n\nurn p;\n}",
                "start_point": {
                    "row": 48,
                    "column": 4
                },
                "end_point": {
                    "row": 56,
                    "column": 5
                }
            },
            {
                "definition": "public boolean hasProvider(final Class<?> componentKey) {\nurn true;\n}",
                "name": "hasProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<?>"
                    }
                ],
                "body": "{\nurn true;\n}",
                "start_point": {
                    "row": 58,
                    "column": 4
                },
                "end_point": {
                    "row": 60,
                    "column": 5
                }
            },
            {
                "definition": "public <T> Provider<T> registerInstance(final Class<T> type, final T instance) {\nurn registerProvider(NoDecoration.instance, type, new Provider<T>() {\n public T get() {\nturn instance;\n }\n\n}",
                "name": "registerInstance",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    },
                    {
                        "type": "final",
                        "name": "T"
                    }
                ],
                "body": "{\nurn registerProvider(NoDecoration.instance, type, new Provider<T>() {\n public T get() {\nturn instance;\n }\n\n}",
                "start_point": {
                    "row": 62,
                    "column": 4
                },
                "end_point": {
                    "row": 68,
                    "column": 5
                }
            },
            {
                "definition": "public <T> Provider<T> registerProvider(final Decorator decorator, final Class<T> componentType,\n final Provider<T> provider) {\nal Provider<T> decorated = decorator.decorate(componentType, provider);\nviders.put(componentType, decorated);\nurn decorated;\n}",
                "name": "registerProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Decorator"
                    },
                    {
                        "type": "final",
                        "name": "Class<T>"
                    },
                    {
                        "type": "final",
                        "name": "Provider<T>"
                    }
                ],
                "body": "{\nal Provider<T> decorated = decorator.decorate(componentType, provider);\nviders.put(componentType, decorated);\nurn decorated;\n}",
                "start_point": {
                    "row": 73,
                    "column": 4
                },
                "end_point": {
                    "row": 78,
                    "column": 5
                }
            },
            {
                "definition": "public <T> Provider<T> removeProvider(final Class<T> componentKey) {\now new RuntimeException(\"method not implemented\");\n}",
                "name": "removeProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\now new RuntimeException(\"method not implemented\");\n}",
                "start_point": {
                    "row": 80,
                    "column": 4
                },
                "end_point": {
                    "row": 82,
                    "column": 5
                }
            },
            {
                "definition": "public <T> Provider<T> setDecorationOfProvider(final Decorator decorator, final Class<T> type) {\nal Provider<T> p = decorator.decorate(type, createProvider(type));\nviders.put(type, p);\nurn p;\n}",
                "name": "setDecorationOfProvider",
                "modifiers": "public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Decorator"
                    },
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\nal Provider<T> p = decorator.decorate(type, createProvider(type));\nviders.put(type, p);\nurn p;\n}",
                "start_point": {
                    "row": 93,
                    "column": 4
                },
                "end_point": {
                    "row": 97,
                    "column": 5
                }
            },
            {
                "definition": "@SuppressWarnings(\"unchecked\")\nprivate <T> T createInstance(final Class<T> componentType) {\nal Constructor<T>[] constructors = (Constructor<T>[]) componentType.getConstructors();\n(constructors.length != 1) {\n throw new RuntimeException(\"Should be one and only one public constructor\");\n\nal Constructor<T> constructor = constructors[0];\nal Class<?>[] parameterTypes = constructor.getParameterTypes();\nal Object[] args = new Object[parameterTypes.length];\n (int index = 0; index < parameterTypes.length; index++) {\n args[index] = getInstance(parameterTypes[index]);\n\n {\n return constructor.newInstance(args);\natch (final Exception e) {\n throw new RuntimeException(\"problem creating the instance\", e);\n\n}",
                "name": "createInstance",
                "modifiers": "@SuppressWarnings(\"unchecked\")\n    private",
                "return_type": "T",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\nal Constructor<T>[] constructors = (Constructor<T>[]) componentType.getConstructors();\n(constructors.length != 1) {\n throw new RuntimeException(\"Should be one and only one public constructor\");\n\nal Constructor<T> constructor = constructors[0];\nal Class<?>[] parameterTypes = constructor.getParameterTypes();\nal Object[] args = new Object[parameterTypes.length];\n (int index = 0; index < parameterTypes.length; index++) {\n args[index] = getInstance(parameterTypes[index]);\n\n {\n return constructor.newInstance(args);\natch (final Exception e) {\n throw new RuntimeException(\"problem creating the instance\", e);\n\n}",
                "start_point": {
                    "row": 99,
                    "column": 4
                },
                "end_point": {
                    "row": 116,
                    "column": 5
                }
            },
            {
                "definition": "private <T> Provider<T> createProvider(final Class<T> componentKey) {\nurn new Provider<T>() {\n public T get() {\nturn Mockito.mock(componentKey);\n }\n\n}",
                "name": "createProvider",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<T>"
                    }
                ],
                "body": "{\nurn new Provider<T>() {\n public T get() {\nturn Mockito.mock(componentKey);\n }\n\n}",
                "start_point": {
                    "row": 118,
                    "column": 4
                },
                "end_point": {
                    "row": 124,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/ioc/MockContainerTests.java",
        "definition": "public class MockContainerTests {\n\n    public static class Component {\n\tpublic final Object object;\n\tpublic final Exception exception;\n\n\tpublic Component(final Object object, final Exception exception) {\n\t    this.object = object;\n\t    this.exception = exception;\n\t}\n    }\n\n    public static class StringDependant {\n\tpublic final String message;\n\n\tpublic StringDependant(final String message) {\n\t    this.message = message;\n\t}\n    }\n\n    @Test\n    public void allMockedInstancesAreSingletonByDefault() {\n\tfinal MockContainer c = new MockContainer();\n\tassertSame(c.getInstance(Object.class), c.getInstance(Object.class));\n    }\n\n    @Test\n    public void shouldAlwaysHaveAProvider() {\n\tfinal MockContainer c = new MockContainer();\n\tassertTrue(c.hasProvider(Object.class));\n\tassertNotNull(c.getProvider(Object.class));\n    }\n\n    @Test\n    public void shouldAlwaysReturnInstances() {\n\tfinal MockContainer c = new MockContainer();\n\tassertNotNull(c.getInstance(Exception.class));\n\tassertNotNull(c.getInstance(Object.class));\n    }\n\n    @Test\n    public void shouldBeAbleToChangeScopeOfMockedProviders() {\n\tfinal MockContainer c = new MockContainer();\n\tc.setDecorationOfProvider(NoDecoration.instance, Object.class);\n\tassertNotSame(c.getInstance(Object.class), c.getInstance(Object.class));\n    }\n\n    @Test\n    public void shouldBeAbleToOverrideProviders() {\n\tfinal MockContainer c = new MockContainer();\n\tc.registerProvider(Singleton.instance, String.class, new Provider<String>() {\n\t    public String get() {\n\t\treturn \"Hola!\";\n\t    }\n\t});\n\tfinal StringDependant instance = c.create(StringDependant.class);\n\tassertEquals(\"Hola!\", instance.message);\n    }\n\n    @Test\n    public void shouldBeAbleToRegisterInstances() {\n\tfinal MockContainer c = new MockContainer();\n\tc.registerInstance(String.class, \"Adi\u00f3s!\");\n\tfinal StringDependant instance = c.create(StringDependant.class);\n\tassertEquals(\"Adi\u00f3s!\", instance.message);\n    }\n\n    @Test\n    public void shouldCreateInstancesWithOneContstructor() {\n\tfinal MockContainer c = new MockContainer();\n\tfinal Component instance = c.create(Component.class);\n\tassertNotNull(instance);\n\tassertNotNull(instance.object);\n\tassertSame(instance.object, c.getInstance(Object.class));\n\tassertNotNull(instance.exception);\n\tassertSame(instance.exception, c.getInstance(Exception.class));\n    }\n\n    @Test\n    public void shouldReturnInstanceProvider() {\n\tfinal MockContainer c = new MockContainer();\n\tfinal Component instance = c.create(Component.class);\n\tfinal Provider<Component> provider = c.getProvider(Component.class);\n\tassertNotNull(provider);\n\tassertSame(instance, provider.get());\n    }\n}",
        "package": "package com.calclab.suco.testing.ioc;",
        "tree_path": "MockContainerTests",
        "name": "MockContainerTests",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n    public static class Component {\n\tpublic final Object object;\n\tpublic final Exception exception;\n\n\tpublic Component(final Object object, final Exception exception) {\n\t    this.object = object;\n\t    this.exception = exception;\n\t}\n    }\n\n    public static class StringDependant {\n\tpublic final String message;\n\n\tpublic StringDependant(final String message) {\n\t    this.message = message;\n\t}\n    }\n\n    @Test\n    public void allMockedInstancesAreSingletonByDefault() {\n\tfinal MockContainer c = new MockContainer();\n\tassertSame(c.getInstance(Object.class), c.getInstance(Object.class));\n    }\n\n    @Test\n    public void shouldAlwaysHaveAProvider() {\n\tfinal MockContainer c = new MockContainer();\n\tassertTrue(c.hasProvider(Object.class));\n\tassertNotNull(c.getProvider(Object.class));\n    }\n\n    @Test\n    public void shouldAlwaysReturnInstances() {\n\tfinal MockContainer c = new MockContainer();\n\tassertNotNull(c.getInstance(Exception.class));\n\tassertNotNull(c.getInstance(Object.class));\n    }\n\n    @Test\n    public void shouldBeAbleToChangeScopeOfMockedProviders() {\n\tfinal MockContainer c = new MockContainer();\n\tc.setDecorationOfProvider(NoDecoration.instance, Object.class);\n\tassertNotSame(c.getInstance(Object.class), c.getInstance(Object.class));\n    }\n\n    @Test\n    public void shouldBeAbleToOverrideProviders() {\n\tfinal MockContainer c = new MockContainer();\n\tc.registerProvider(Singleton.instance, String.class, new Provider<String>() {\n\t    public String get() {\n\t\treturn \"Hola!\";\n\t    }\n\t});\n\tfinal StringDependant instance = c.create(StringDependant.class);\n\tassertEquals(\"Hola!\", instance.message);\n    }\n\n    @Test\n    public void shouldBeAbleToRegisterInstances() {\n\tfinal MockContainer c = new MockContainer();\n\tc.registerInstance(String.class, \"Adi\u00f3s!\");\n\tfinal StringDependant instance = c.create(StringDependant.class);\n\tassertEquals(\"Adi\u00f3s!\", instance.message);\n    }\n\n    @Test\n    public void shouldCreateInstancesWithOneContstructor() {\n\tfinal MockContainer c = new MockContainer();\n\tfinal Component instance = c.create(Component.class);\n\tassertNotNull(instance);\n\tassertNotNull(instance.object);\n\tassertSame(instance.object, c.getInstance(Object.class));\n\tassertNotNull(instance.exception);\n\tassertSame(instance.exception, c.getInstance(Exception.class));\n    }\n\n    @Test\n    public void shouldReturnInstanceProvider() {\n\tfinal MockContainer c = new MockContainer();\n\tfinal Component instance = c.create(Component.class);\n\tfinal Provider<Component> provider = c.getProvider(Component.class);\n\tassertNotNull(provider);\n\tassertSame(instance, provider.get());\n    }\n}",
        "start_point": {
            "row": 14,
            "column": 0
        },
        "end_point": {
            "row": 100,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/ioc/MockContainerTests.java",
        "methods": [
            {
                "definition": "@Test\npublic void allMockedInstancesAreSingletonByDefault() {\nal MockContainer c = new MockContainer();\nertSame(c.getInstance(Object.class), c.getInstance(Object.class));\n}",
                "name": "allMockedInstancesAreSingletonByDefault",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\nertSame(c.getInstance(Object.class), c.getInstance(Object.class));\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 38,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldAlwaysHaveAProvider() {\nal MockContainer c = new MockContainer();\nertTrue(c.hasProvider(Object.class));\nertNotNull(c.getProvider(Object.class));\n}",
                "name": "shouldAlwaysHaveAProvider",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\nertTrue(c.hasProvider(Object.class));\nertNotNull(c.getProvider(Object.class));\n}",
                "start_point": {
                    "row": 40,
                    "column": 4
                },
                "end_point": {
                    "row": 45,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldAlwaysReturnInstances() {\nal MockContainer c = new MockContainer();\nertNotNull(c.getInstance(Exception.class));\nertNotNull(c.getInstance(Object.class));\n}",
                "name": "shouldAlwaysReturnInstances",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\nertNotNull(c.getInstance(Exception.class));\nertNotNull(c.getInstance(Object.class));\n}",
                "start_point": {
                    "row": 47,
                    "column": 4
                },
                "end_point": {
                    "row": 52,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldBeAbleToChangeScopeOfMockedProviders() {\nal MockContainer c = new MockContainer();\netDecorationOfProvider(NoDecoration.instance, Object.class);\nertNotSame(c.getInstance(Object.class), c.getInstance(Object.class));\n}",
                "name": "shouldBeAbleToChangeScopeOfMockedProviders",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\netDecorationOfProvider(NoDecoration.instance, Object.class);\nertNotSame(c.getInstance(Object.class), c.getInstance(Object.class));\n}",
                "start_point": {
                    "row": 54,
                    "column": 4
                },
                "end_point": {
                    "row": 59,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldBeAbleToOverrideProviders() {\nal MockContainer c = new MockContainer();\negisterProvider(Singleton.instance, String.class, new Provider<String>() {\n public String get() {\nturn \"Hola!\";\n }\n\nal StringDependant instance = c.create(StringDependant.class);\nertEquals(\"Hola!\", instance.message);\n}",
                "name": "shouldBeAbleToOverrideProviders",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\negisterProvider(Singleton.instance, String.class, new Provider<String>() {\n public String get() {\nturn \"Hola!\";\n }\n\nal StringDependant instance = c.create(StringDependant.class);\nertEquals(\"Hola!\", instance.message);\n}",
                "start_point": {
                    "row": 61,
                    "column": 4
                },
                "end_point": {
                    "row": 71,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldBeAbleToRegisterInstances() {\nal MockContainer c = new MockContainer();\negisterInstance(String.class, \"Adi\u00f3s!\");\nal StringDependant instance = c.create(StringDependant.class);\nertEquals(\"Adi\u00f3s!\", instance.message);\n}",
                "name": "shouldBeAbleToRegisterInstances",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\negisterInstance(String.class, \"Adi\u00f3s!\");\nal StringDependant instance = c.create(StringDependant.class);\nertEquals(\"Adi\u00f3s!\", instance.message);\n}",
                "start_point": {
                    "row": 73,
                    "column": 4
                },
                "end_point": {
                    "row": 79,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldCreateInstancesWithOneContstructor() {\nal MockContainer c = new MockContainer();\nal Component instance = c.create(Component.class);\nertNotNull(instance);\nertNotNull(instance.object);\nertSame(instance.object, c.getInstance(Object.class));\nertNotNull(instance.exception);\nertSame(instance.exception, c.getInstance(Exception.class));\n}",
                "name": "shouldCreateInstancesWithOneContstructor",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\nal Component instance = c.create(Component.class);\nertNotNull(instance);\nertNotNull(instance.object);\nertSame(instance.object, c.getInstance(Object.class));\nertNotNull(instance.exception);\nertSame(instance.exception, c.getInstance(Exception.class));\n}",
                "start_point": {
                    "row": 81,
                    "column": 4
                },
                "end_point": {
                    "row": 90,
                    "column": 5
                }
            },
            {
                "definition": "@Test\npublic void shouldReturnInstanceProvider() {\nal MockContainer c = new MockContainer();\nal Component instance = c.create(Component.class);\nal Provider<Component> provider = c.getProvider(Component.class);\nertNotNull(provider);\nertSame(instance, provider.get());\n}",
                "name": "shouldReturnInstanceProvider",
                "modifiers": "@Test\n    public",
                "return_type": null,
                "parameters": [],
                "body": "{\nal MockContainer c = new MockContainer();\nal Component instance = c.create(Component.class);\nal Provider<Component> provider = c.getProvider(Component.class);\nertNotNull(provider);\nertSame(instance, provider.get());\n}",
                "start_point": {
                    "row": 92,
                    "column": 4
                },
                "end_point": {
                    "row": 99,
                    "column": 5
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/ioc/MockContainerTests.java",
        "definition": "public static class Component {\nlic final Object object;\nlic final Exception exception;\n\nlic Component(final Object object, final Exception exception) {\n this.object = object;\n this.exception = exception;\n\n}",
        "package": "package com.calclab.suco.testing.ioc;",
        "tree_path": "MockContainerTests.Component",
        "name": "Component",
        "modifiers": "public static",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\nlic final Object object;\nlic final Exception exception;\n\nlic Component(final Object object, final Exception exception) {\n this.object = object;\n this.exception = exception;\n\n}",
        "start_point": {
            "row": 16,
            "column": 4
        },
        "end_point": {
            "row": 24,
            "column": 5
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/ioc/MockContainerTests.java",
        "methods": [
            {
                "definition": "public Component(final Object object, final Exception exception) {\n    this.object = object;\n    this.exception = exception;\n}",
                "name": "Component",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Object"
                    },
                    {
                        "type": "final",
                        "name": "Exception"
                    }
                ],
                "body": "{\n    this.object = object;\n    this.exception = exception;\n}",
                "constructor": true,
                "start_point": {
                    "row": 20,
                    "column": 1
                },
                "end_point": {
                    "row": 23,
                    "column": 2
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/ioc/MockContainerTests.java",
        "definition": "public static class StringDependant {\nlic final String message;\n\nlic StringDependant(final String message) {\n this.message = message;\n\n}",
        "package": "package com.calclab.suco.testing.ioc;",
        "tree_path": "MockContainerTests.StringDependant",
        "name": "StringDependant",
        "modifiers": "public static",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\nlic final String message;\n\nlic StringDependant(final String message) {\n this.message = message;\n\n}",
        "start_point": {
            "row": 26,
            "column": 4
        },
        "end_point": {
            "row": 32,
            "column": 5
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/ioc/MockContainerTests.java",
        "methods": [
            {
                "definition": "public StringDependant(final String message) {\n    this.message = message;\n}",
                "name": "StringDependant",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "String"
                    }
                ],
                "body": "{\n    this.message = message;\n}",
                "constructor": true,
                "start_point": {
                    "row": 29,
                    "column": 1
                },
                "end_point": {
                    "row": 31,
                    "column": 2
                }
            }
        ]
    },
    {
        "rev_path": "src/main/java/com/calclab/suco/testing/ioc/MockProvider.java",
        "definition": "public class MockProvider<C> implements Provider<C> {\n    private final Class<C> type;\n\n    public MockProvider(final Class<C> type) {\n\tthis.type = type;\n    }\n\n    public C get() {\n\treturn Mockito.mock(type);\n    }\n}",
        "package": "package com.calclab.suco.testing.ioc;",
        "tree_path": "MockProvider",
        "name": "MockProvider",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": "implements Provider<C>",
        "body": "{\n    private final Class<C> type;\n\n    public MockProvider(final Class<C> type) {\n\tthis.type = type;\n    }\n\n    public C get() {\n\treturn Mockito.mock(type);\n    }\n}",
        "start_point": {
            "row": 27,
            "column": 0
        },
        "end_point": {
            "row": 37,
            "column": 1
        },
        "file_mode": "Renamed",
        "map_path": "src/test/java/com/calclab/suco/testing/ioc/MockProvider.java",
        "methods": [
            {
                "definition": "public MockProvider(final Class<C> type) {\ns.type = type;\n}",
                "name": "MockProvider",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "final",
                        "name": "Class<C>"
                    }
                ],
                "body": "{\ns.type = type;\n}",
                "constructor": true,
                "start_point": {
                    "row": 30,
                    "column": 4
                },
                "end_point": {
                    "row": 32,
                    "column": 5
                }
            },
            {
                "definition": "public C get() {\nurn Mockito.mock(type);\n}",
                "name": "get",
                "modifiers": "public",
                "return_type": "C",
                "parameters": [],
                "body": "{\nurn Mockito.mock(type);\n}",
                "start_point": {
                    "row": 34,
                    "column": 4
                },
                "end_point": {
                    "row": 36,
                    "column": 5
                }
            }
        ]
    }
]