[
    {
        "rev_path": "hippo-client/src/main/java/com/github/hippo/hystrix/HippoCommand.java",
        "definition": "public class HippoCommand extends HystrixCommand<Object> {\n\n\tprivate HippoRequest hippoRequest;\n\n\tprivate int timeOut;\n\n\tprivate int retryTimes;\n\n\tprivate ServiceGovern serviceGovern;\n\n\tprivate HippoFailPolicy<?> hippoFailPolicy;\n\n\tpublic HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes, boolean isCircuitBreaker,\n\t\t\tint semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy, ServiceGovern serviceGovern)\n\t\t\tthrows InstantiationException, IllegalAccessException {\n\n\t\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\t\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\t\tthis.hippoRequest = hippoRequest;\n\t\tthis.timeOut = timeOut;\n\t\tthis.retryTimes = retryTimes;\n\t\tthis.serviceGovern = serviceGovern;\n\t\tinit(downgradeStrategy);\n\n\t}\n\n\tprivate void init(Class<?> downgradeStrategy) throws InstantiationException, IllegalAccessException {\n\n\t\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\t\tif (bean == null) {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t\t} else {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t\t}\n\t\t} else {\n\t\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t\t}\n\t}\n\n\t@Override\n\tprotected Object run() throws Exception {\n\n\t\ttry {\n\t\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t\t} catch (Throwable e) {\n\t\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t\t}\n\n\t}\n\n\t@Override\n\tprotected Object getFallback() {\n\t\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n\t}\n\n\tpublic Object getHippoResponse(HippoRequest request, int timeout, int retryTimes) throws Throwable {\n\n\t\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\t\tint index = retryTimes;\n\t\tif (retryTimes >= 5) {\n\t\t\tindex = 5;\n\t\t}\n\t\tHippoResponse result = getResult(request, timeout);\n\t\tif (result.isError()) {\n\t\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t\t} else {\n\t\t\t\tthrow result.getThrowable();\n\t\t\t}\n\t\t}\n\t\treturn result.getResult();\n\t}\n\n\tprivate HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n\t\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\t\tserviceGovern);\n\t\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\t\treturn callback.getResult();\n\t}\n\n}",
        "package": "package com.github.hippo.hystrix;",
        "tree_path": "HippoCommand",
        "name": "HippoCommand",
        "modifiers": "public",
        "superclass": "extends HystrixCommand<Object>",
        "super_interfaces": null,
        "body": "{\n\n\tprivate HippoRequest hippoRequest;\n\n\tprivate int timeOut;\n\n\tprivate int retryTimes;\n\n\tprivate ServiceGovern serviceGovern;\n\n\tprivate HippoFailPolicy<?> hippoFailPolicy;\n\n\tpublic HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes, boolean isCircuitBreaker,\n\t\t\tint semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy, ServiceGovern serviceGovern)\n\t\t\tthrows InstantiationException, IllegalAccessException {\n\n\t\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\t\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\t\tthis.hippoRequest = hippoRequest;\n\t\tthis.timeOut = timeOut;\n\t\tthis.retryTimes = retryTimes;\n\t\tthis.serviceGovern = serviceGovern;\n\t\tinit(downgradeStrategy);\n\n\t}\n\n\tprivate void init(Class<?> downgradeStrategy) throws InstantiationException, IllegalAccessException {\n\n\t\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\t\tif (bean == null) {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t\t} else {\n\t\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t\t}\n\t\t} else {\n\t\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t\t}\n\t}\n\n\t@Override\n\tprotected Object run() throws Exception {\n\n\t\ttry {\n\t\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t\t} catch (Throwable e) {\n\t\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t\t}\n\n\t}\n\n\t@Override\n\tprotected Object getFallback() {\n\t\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n\t}\n\n\tpublic Object getHippoResponse(HippoRequest request, int timeout, int retryTimes) throws Throwable {\n\n\t\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\t\tint index = retryTimes;\n\t\tif (retryTimes >= 5) {\n\t\t\tindex = 5;\n\t\t}\n\t\tHippoResponse result = getResult(request, timeout);\n\t\tif (result.isError()) {\n\t\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t\t} else {\n\t\t\t\tthrow result.getThrowable();\n\t\t\t}\n\t\t}\n\t\treturn result.getResult();\n\t}\n\n\tprivate HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n\t\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\t\tserviceGovern);\n\t\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\t\treturn callback.getResult();\n\t}\n\n}",
        "start_point": {
            "row": 22,
            "column": 0
        },
        "end_point": {
            "row": 116,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "public HippoCommand(HippoRequest hippoRequest, int timeOut, int retryTimes, boolean isCircuitBreaker,\n\t\tint semaphoreMaxConcurrentRequests, Class<?> downgradeStrategy, ServiceGovern serviceGovern)\n\t\tthrows InstantiationException, IllegalAccessException {\n\n\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\tthis.hippoRequest = hippoRequest;\n\tthis.timeOut = timeOut;\n\tthis.retryTimes = retryTimes;\n\tthis.serviceGovern = serviceGovern;\n\tinit(downgradeStrategy);\n\n}",
                "name": "HippoCommand",
                "modifiers": "public",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "hippoRequest"
                    },
                    {
                        "type": "int",
                        "name": "timeOut"
                    },
                    {
                        "type": "int",
                        "name": "retryTimes"
                    },
                    {
                        "type": "boolean",
                        "name": "isCircuitBreaker"
                    },
                    {
                        "type": "int",
                        "name": "semaphoreMaxConcurrentRequests"
                    },
                    {
                        "type": "Class<?>",
                        "name": "downgradeStrategy"
                    },
                    {
                        "type": "ServiceGovern",
                        "name": "serviceGovern"
                    }
                ],
                "body": "{\n\n\t// \u9ed8\u8ba4\u9694\u79bb\u7b56\u7565\u662f\u7ebf\u7a0b \u4e5f\u53ef\u4ee5\u662f\u4fe1\u53f7\u91cf,\u73b0\u5728\u91c7\u7528\u7684\u662f\u4fe1\u53f7\u91cf\u7684\u6a21\u5f0f\n\t// \u4fe1\u53f7\u91cf\u9694\u79bb\u662f\u4e2a\u9650\u6d41\u7684\u7b56\u7565\n\t// \u56e0\u4e3a\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\u8d85\u65f6\u673a\u5236\uff0c\u6240\u4ee5\u5173\u95edhystrix\u7684\u8d85\u65f6\u673a\u5236\n\tsuper(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(hippoRequest.getServiceName()))\n\t\t\t.andCommandKey(HystrixCommandKey.Factory.asKey(hippoRequest.getClassName()))\n\t\t\t.andCommandPropertiesDefaults(\n\t\t\t\t\tHystrixCommandProperties.Setter()\n\t\t\t\t\t\t\t.withExecutionIsolationStrategy(\n\t\t\t\t\t\t\t\t\tHystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE)\n\t\t\t\t\t\t\t.withExecutionIsolationSemaphoreMaxConcurrentRequests(semaphoreMaxConcurrentRequests)\n\t\t\t\t\t\t\t.withCircuitBreakerEnabled(isCircuitBreaker).withExecutionTimeoutEnabled(false)));\n\n\tthis.hippoRequest = hippoRequest;\n\tthis.timeOut = timeOut;\n\tthis.retryTimes = retryTimes;\n\tthis.serviceGovern = serviceGovern;\n\tinit(downgradeStrategy);\n\n}",
                "constructor": true,
                "start_point": {
                    "row": 34,
                    "column": 1
                },
                "end_point": {
                    "row": 56,
                    "column": 2
                }
            },
            {
                "definition": "private void init(Class<?> downgradeStrategy) throws InstantiationException, IllegalAccessException {\n\n\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\tif (bean == null) {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t} else {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t}\n\t} else {\n\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t}\n}",
                "name": "init",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Class<?>",
                        "name": "downgradeStrategy"
                    }
                ],
                "body": "{\n\n\tif (downgradeStrategy.getSuperclass().isAssignableFrom(HippoFailPolicy.class)) {\n\t\t// \u5148\u4ecespring\u5bb9\u5668\u91cc\u9762\u62ff\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219new\n\t\tObject bean = HippoClientInit.getApplicationContext().getBean(downgradeStrategy);\n\t\tif (bean == null) {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) downgradeStrategy.newInstance();\n\t\t} else {\n\t\t\thippoFailPolicy = (HippoFailPolicy<?>) bean;\n\t\t}\n\t} else {\n\t\thippoFailPolicy = new HippoFailPolicyDefaultImpl();\n\t}\n}",
                "start_point": {
                    "row": 58,
                    "column": 1
                },
                "end_point": {
                    "row": 71,
                    "column": 2
                }
            },
            {
                "definition": "@Override\nprotected Object run() throws Exception {\n\n\ttry {\n\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t} catch (Throwable e) {\n\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t}\n\n}",
                "name": "run",
                "modifiers": "@Override\n\tprotected",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n\n\ttry {\n\t\treturn getHippoResponse(hippoRequest, timeOut, retryTimes);\n\t} catch (Throwable e) {\n\t\t// \u4e1a\u52a1\u5f02\u5e38\u53ea\u6709\u5305\u88c5\u6210HystrixBadRequestException \u624d\u4e0d\u4f1a\u89e6\u53d1getFallback();\n\t\tthrow new HystrixBadRequestException(\"\u4e1a\u52a1\u5f02\u5e38\", e);\n\t}\n\n}",
                "start_point": {
                    "row": 73,
                    "column": 1
                },
                "end_point": {
                    "row": 83,
                    "column": 2
                }
            },
            {
                "definition": "@Override\nprotected Object getFallback() {\n\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n}",
                "name": "getFallback",
                "modifiers": "@Override\n\tprotected",
                "return_type": "Object",
                "parameters": [],
                "body": "{\n\treturn hippoFailPolicy.failCallBack(hippoRequest.getServiceName());\n}",
                "start_point": {
                    "row": 85,
                    "column": 1
                },
                "end_point": {
                    "row": 88,
                    "column": 2
                }
            },
            {
                "definition": "public Object getHippoResponse(HippoRequest request, int timeout, int retryTimes) throws Throwable {\n\n\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\tint index = retryTimes;\n\tif (retryTimes >= 5) {\n\t\tindex = 5;\n\t}\n\tHippoResponse result = getResult(request, timeout);\n\tif (result.isError()) {\n\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t} else {\n\t\t\tthrow result.getThrowable();\n\t\t}\n\t}\n\treturn result.getResult();\n}",
                "name": "getHippoResponse",
                "modifiers": "public",
                "return_type": "Object",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "timeout"
                    },
                    {
                        "type": "int",
                        "name": "retryTimes"
                    }
                ],
                "body": "{\n\n\t// \u91cd\u8bd5\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e5\u6b21\n\tint index = retryTimes;\n\tif (retryTimes >= 5) {\n\t\tindex = 5;\n\t}\n\tHippoResponse result = getResult(request, timeout);\n\tif (result.isError()) {\n\t\tif (result.getThrowable() instanceof HippoReadTimeoutException && index > 0) {\n\t\t\treturn getHippoResponse(request, timeout, retryTimes - 1);\n\t\t} else {\n\t\t\tthrow result.getThrowable();\n\t\t}\n\t}\n\treturn result.getResult();\n}",
                "start_point": {
                    "row": 90,
                    "column": 1
                },
                "end_point": {
                    "row": 106,
                    "column": 2
                }
            },
            {
                "definition": "private HippoResponse getResult(HippoRequest request, int timeout) throws Exception {\n\n\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\tserviceGovern);\n\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\treturn callback.getResult();\n}",
                "name": "getResult",
                "modifiers": "private",
                "return_type": "HippoResponse",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    },
                    {
                        "type": "int",
                        "name": "timeout"
                    }
                ],
                "body": "{\n\n\tHippoClientBootstrap hippoClientBootstrap = HippoClientBootstrap.getBootstrap(request.getServiceName(), timeout,\n\t\t\tserviceGovern);\n\tHippoResultCallBack callback = hippoClientBootstrap.sendAsync(request);\n\treturn callback.getResult();\n}",
                "start_point": {
                    "row": 108,
                    "column": 1
                },
                "end_point": {
                    "row": 114,
                    "column": 2
                }
            }
        ]
    },
    {
        "rev_path": "hippo-server/src/main/java/com/github/hippo/netty/HippoServerHandler.java",
        "definition": "@Sharable\npublic class HippoServerHandler extends SimpleChannelInboundHandler<HippoRequest> {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(HippoServerHandler.class);\n  private static final ExecutorService pool =\n      Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n\n  private void handle(ChannelHandlerContext ctx, HippoRequest request) {\n    long start = System.currentTimeMillis();\n    HippoResponse response = new HippoResponse();\n    response.setChainId(request.getChainId());\n    response.setChainOrder(request.getChainOrder());\n    response.setServiceName(request.getServiceName());\n    HippoRequestEnum hippoRequestEnum = HippoRequestEnum.getByType(request.getRequestType());\n    if (hippoRequestEnum != HippoRequestEnum.PING) {\n      LOGGER.info(\"hippo in param:{}\", request);\n    }\n    try {\n      ChainThreadLocal.INSTANCE.setChainId(request.getChainId());\n      ChainThreadLocal.INSTANCE.incChainOrder(request.getChainOrder());\n      response.setRequestId(request.getRequestId());\n      if (hippoRequestEnum == null) {\n        response.setError(true);\n        response.setThrowable(new HippoRequestTypeNotExistException(\n            \"HippoRequest requestType not exist.current requestType is:\"\n                + request.getRequestType()));\n      } else if (hippoRequestEnum == HippoRequestEnum.API) {\n        response.setResult(apiProcess(request));\n      } else if (hippoRequestEnum == HippoRequestEnum.RPC) {\n        response.setResult(rpcProcess(request));\n      } else if (hippoRequestEnum == HippoRequestEnum.PING) {\n        response.setResult(\"ping success\");\n        response.setRequestId(\"-99\");\n      }\n    } catch (Exception e1) {\n      LOGGER.error(\"handle error:\" + request, e1);\n      if (e1 instanceof InvocationTargetException) {\n        response.setThrowable(e1.getCause());\n      } else {\n        response.setThrowable(e1);\n      }\n      response.setRequestId(request.getRequestId());\n      response.setResult(request);\n      response.setError(true);\n    }\n    ChainThreadLocal.INSTANCE.clearTL();\n    if (hippoRequestEnum != HippoRequestEnum.PING) {\n      LOGGER.info(\"hippo out result:{},\u8017\u65f6:{}\u6beb\u79d2\", response, System.currentTimeMillis() - start);\n    }\n\n    ctx.writeAndFlush(response);\n  }\n\n  private Object rpcProcess(HippoRequest paras) throws InvocationTargetException {\n    Object serviceBean =\n        HippoServiceImplCache.INSTANCE.getImplObjectMap().get(paras.getClassName());\n    FastClass serviceFastClass = FastClass.create(serviceBean.getClass());\n    FastMethod serviceFastMethod =\n        serviceFastClass.getMethod(paras.getMethodName(), paras.getParameterTypes());\n    return serviceFastMethod.invoke(serviceBean, paras.getParameters());\n  }\n\n  /**\n   * apiProcess \u4e0d\u53ef\u80fd\u67092\u4e2aDto\u7684\u63a5\u53e3,\u4f46\u662f\u53ef\u80fd\u6709\u591a\u4e2a\u57fa\u7840\u7c7b\u578b test(User user,Address add)//\u4e0d\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5,\u6709\u4e5f\u4e0d\u652f\u6301 test(String\n   * userName,String pwd)//\u4f1a\u6709\n   * \n   * @param paras\n   * @return\n   * @throws Exception\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Object apiProcess(HippoRequest paras) throws Exception {/* \u5148\u4e0d\u7ba1\u91cd\u8f7d \u4e0d\u7ba1\u7f13\u5b58 */\n    Object serviceBean = HippoServiceImplCache.INSTANCE.getCacheBySimpleName(paras.getClassName());\n    Class<?> serviceBeanClass = serviceBean.getClass();\n    Method[] methods = serviceBeanClass.getDeclaredMethods();\n    Object[] requestDto = null;\n    for (Method method : methods) {\n      if (!method.getName().equals(paras.getMethodName())) {\n        continue;\n      }\n      Object[] objects = paras.getParameters();\n\n      Map<String, Object> map;\n      if (objects != null && objects.length == 1) {\n        // \u5982\u679c\u662fjson\u7edf\u4e00\u8f6c\u6210map\u5904\u7406\n        if (objects[0] instanceof String) {\n          map = GsonConvertUtils.jsonToMap((String) objects[0]);\n        } else {\n          map = (Map<String, Object>) objects[0];\n        }\n      } else {\n        map = new HashMap<>();\n      }\n      Class<?>[] parameterTypes = method.getParameterTypes();\n      if (parameterTypes.length == 0) {// \u65e0\u53c2\u6570\n        requestDto = null;\n      } else if (parameterTypes.length == 1) {// \u4e00\u4e2a\u53c2\u6570(\u662f\u5426\u662fDto)\n        Class<?> parameterType = parameterTypes[0];\n\n        requestDto = new Object[1];\n        // \u975e\u81ea\u5b9a\u4e49dto\u5c31\u662fjava\u539f\u751f\u7c7b\u4e86\n        if (isJavaClass(parameterType)) {\n          requestDto[0] = GsonConvertUtils\n              .cleanseToObjectClass(map.get(method.getParameters()[0].getName()), parameterType);\n        } else {\n          requestDto[0] =\n              GsonConvertUtils.cleanseToObjectClass(paras.getParameters()[0], parameterType);\n        }\n      }\n      // \u591a\u53c2\n      else {\n        Parameter[] parameters = method.getParameters();\n        requestDto = new Object[parameters.length];\n        String paramName;\n        int index = 0;\n        for (Parameter parameter : parameters) {\n          paramName = parameter.getName();\n          requestDto[index] =\n              GsonConvertUtils.cleanseToObjectClass(map.get(paramName), parameter.getType());\n          index++;\n        }\n      }\n      // \u62ff\u5230\u8fd4\u56de\n      return GsonConvertUtils.cleanseToObject(method.invoke(serviceBean, requestDto));\n    }\n    throw new NoSuchMethodException(paras.getMethodName());\n  }\n\n  @Override\n  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n    LOGGER.error(\"netty server error\", cause.fillInStackTrace());\n    ctx.close();\n  }\n\n\n  @Override\n  protected void channelRead0(ChannelHandlerContext ctx, HippoRequest request) throws Exception {\n    pool.execute(() -> handle(ctx, request));\n  }\n\n  private boolean isJavaClass(Class<?> clz) {\n    return clz != null && clz.getClassLoader() == null;\n  }\n}",
        "package": "package com.github.hippo.netty;",
        "tree_path": "HippoServerHandler",
        "name": "HippoServerHandler",
        "modifiers": "@Sharable\npublic",
        "superclass": "extends SimpleChannelInboundHandler<HippoRequest>",
        "super_interfaces": null,
        "body": "{\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(HippoServerHandler.class);\n  private static final ExecutorService pool =\n      Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n\n  private void handle(ChannelHandlerContext ctx, HippoRequest request) {\n    long start = System.currentTimeMillis();\n    HippoResponse response = new HippoResponse();\n    response.setChainId(request.getChainId());\n    response.setChainOrder(request.getChainOrder());\n    response.setServiceName(request.getServiceName());\n    HippoRequestEnum hippoRequestEnum = HippoRequestEnum.getByType(request.getRequestType());\n    if (hippoRequestEnum != HippoRequestEnum.PING) {\n      LOGGER.info(\"hippo in param:{}\", request);\n    }\n    try {\n      ChainThreadLocal.INSTANCE.setChainId(request.getChainId());\n      ChainThreadLocal.INSTANCE.incChainOrder(request.getChainOrder());\n      response.setRequestId(request.getRequestId());\n      if (hippoRequestEnum == null) {\n        response.setError(true);\n        response.setThrowable(new HippoRequestTypeNotExistException(\n            \"HippoRequest requestType not exist.current requestType is:\"\n                + request.getRequestType()));\n      } else if (hippoRequestEnum == HippoRequestEnum.API) {\n        response.setResult(apiProcess(request));\n      } else if (hippoRequestEnum == HippoRequestEnum.RPC) {\n        response.setResult(rpcProcess(request));\n      } else if (hippoRequestEnum == HippoRequestEnum.PING) {\n        response.setResult(\"ping success\");\n        response.setRequestId(\"-99\");\n      }\n    } catch (Exception e1) {\n      LOGGER.error(\"handle error:\" + request, e1);\n      if (e1 instanceof InvocationTargetException) {\n        response.setThrowable(e1.getCause());\n      } else {\n        response.setThrowable(e1);\n      }\n      response.setRequestId(request.getRequestId());\n      response.setResult(request);\n      response.setError(true);\n    }\n    ChainThreadLocal.INSTANCE.clearTL();\n    if (hippoRequestEnum != HippoRequestEnum.PING) {\n      LOGGER.info(\"hippo out result:{},\u8017\u65f6:{}\u6beb\u79d2\", response, System.currentTimeMillis() - start);\n    }\n\n    ctx.writeAndFlush(response);\n  }\n\n  private Object rpcProcess(HippoRequest paras) throws InvocationTargetException {\n    Object serviceBean =\n        HippoServiceImplCache.INSTANCE.getImplObjectMap().get(paras.getClassName());\n    FastClass serviceFastClass = FastClass.create(serviceBean.getClass());\n    FastMethod serviceFastMethod =\n        serviceFastClass.getMethod(paras.getMethodName(), paras.getParameterTypes());\n    return serviceFastMethod.invoke(serviceBean, paras.getParameters());\n  }\n\n  /**\n   * apiProcess \u4e0d\u53ef\u80fd\u67092\u4e2aDto\u7684\u63a5\u53e3,\u4f46\u662f\u53ef\u80fd\u6709\u591a\u4e2a\u57fa\u7840\u7c7b\u578b test(User user,Address add)//\u4e0d\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5,\u6709\u4e5f\u4e0d\u652f\u6301 test(String\n   * userName,String pwd)//\u4f1a\u6709\n   * \n   * @param paras\n   * @return\n   * @throws Exception\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Object apiProcess(HippoRequest paras) throws Exception {/* \u5148\u4e0d\u7ba1\u91cd\u8f7d \u4e0d\u7ba1\u7f13\u5b58 */\n    Object serviceBean = HippoServiceImplCache.INSTANCE.getCacheBySimpleName(paras.getClassName());\n    Class<?> serviceBeanClass = serviceBean.getClass();\n    Method[] methods = serviceBeanClass.getDeclaredMethods();\n    Object[] requestDto = null;\n    for (Method method : methods) {\n      if (!method.getName().equals(paras.getMethodName())) {\n        continue;\n      }\n      Object[] objects = paras.getParameters();\n\n      Map<String, Object> map;\n      if (objects != null && objects.length == 1) {\n        // \u5982\u679c\u662fjson\u7edf\u4e00\u8f6c\u6210map\u5904\u7406\n        if (objects[0] instanceof String) {\n          map = GsonConvertUtils.jsonToMap((String) objects[0]);\n        } else {\n          map = (Map<String, Object>) objects[0];\n        }\n      } else {\n        map = new HashMap<>();\n      }\n      Class<?>[] parameterTypes = method.getParameterTypes();\n      if (parameterTypes.length == 0) {// \u65e0\u53c2\u6570\n        requestDto = null;\n      } else if (parameterTypes.length == 1) {// \u4e00\u4e2a\u53c2\u6570(\u662f\u5426\u662fDto)\n        Class<?> parameterType = parameterTypes[0];\n\n        requestDto = new Object[1];\n        // \u975e\u81ea\u5b9a\u4e49dto\u5c31\u662fjava\u539f\u751f\u7c7b\u4e86\n        if (isJavaClass(parameterType)) {\n          requestDto[0] = GsonConvertUtils\n              .cleanseToObjectClass(map.get(method.getParameters()[0].getName()), parameterType);\n        } else {\n          requestDto[0] =\n              GsonConvertUtils.cleanseToObjectClass(paras.getParameters()[0], parameterType);\n        }\n      }\n      // \u591a\u53c2\n      else {\n        Parameter[] parameters = method.getParameters();\n        requestDto = new Object[parameters.length];\n        String paramName;\n        int index = 0;\n        for (Parameter parameter : parameters) {\n          paramName = parameter.getName();\n          requestDto[index] =\n              GsonConvertUtils.cleanseToObjectClass(map.get(paramName), parameter.getType());\n          index++;\n        }\n      }\n      // \u62ff\u5230\u8fd4\u56de\n      return GsonConvertUtils.cleanseToObject(method.invoke(serviceBean, requestDto));\n    }\n    throw new NoSuchMethodException(paras.getMethodName());\n  }\n\n  @Override\n  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n    LOGGER.error(\"netty server error\", cause.fillInStackTrace());\n    ctx.close();\n  }\n\n\n  @Override\n  protected void channelRead0(ChannelHandlerContext ctx, HippoRequest request) throws Exception {\n    pool.execute(() -> handle(ctx, request));\n  }\n\n  private boolean isJavaClass(Class<?> clz) {\n    return clz != null && clz.getClassLoader() == null;\n  }\n}",
        "start_point": {
            "row": 33,
            "column": 0
        },
        "end_point": {
            "row": 176,
            "column": 1
        },
        "file_mode": "Modified",
        "map_path": null,
        "methods": [
            {
                "definition": "private void handle(ChannelHandlerContext ctx, HippoRequest request) {\n  long start = System.currentTimeMillis();\n  HippoResponse response = new HippoResponse();\n  response.setChainId(request.getChainId());\n  response.setChainOrder(request.getChainOrder());\n  response.setServiceName(request.getServiceName());\n  HippoRequestEnum hippoRequestEnum = HippoRequestEnum.getByType(request.getRequestType());\n  if (hippoRequestEnum != HippoRequestEnum.PING) {\n    LOGGER.info(\"hippo in param:{}\", request);\n  }\n  try {\n    ChainThreadLocal.INSTANCE.setChainId(request.getChainId());\n    ChainThreadLocal.INSTANCE.incChainOrder(request.getChainOrder());\n    response.setRequestId(request.getRequestId());\n    if (hippoRequestEnum == null) {\n      response.setError(true);\n      response.setThrowable(new HippoRequestTypeNotExistException(\n          \"HippoRequest requestType not exist.current requestType is:\"\n              + request.getRequestType()));\n    } else if (hippoRequestEnum == HippoRequestEnum.API) {\n      response.setResult(apiProcess(request));\n    } else if (hippoRequestEnum == HippoRequestEnum.RPC) {\n      response.setResult(rpcProcess(request));\n    } else if (hippoRequestEnum == HippoRequestEnum.PING) {\n      response.setResult(\"ping success\");\n      response.setRequestId(\"-99\");\n    }\n  } catch (Exception e1) {\n    LOGGER.error(\"handle error:\" + request, e1);\n    if (e1 instanceof InvocationTargetException) {\n      response.setThrowable(e1.getCause());\n    } else {\n      response.setThrowable(e1);\n    }\n    response.setRequestId(request.getRequestId());\n    response.setResult(request);\n    response.setError(true);\n  }\n  ChainThreadLocal.INSTANCE.clearTL();\n  if (hippoRequestEnum != HippoRequestEnum.PING) {\n    LOGGER.info(\"hippo out result:{},\u8017\u65f6:{}\u6beb\u79d2\", response, System.currentTimeMillis() - start);\n  }\n\n  ctx.writeAndFlush(response);\n}",
                "name": "handle",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "ChannelHandlerContext",
                        "name": "ctx"
                    },
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    }
                ],
                "body": "{\n  long start = System.currentTimeMillis();\n  HippoResponse response = new HippoResponse();\n  response.setChainId(request.getChainId());\n  response.setChainOrder(request.getChainOrder());\n  response.setServiceName(request.getServiceName());\n  HippoRequestEnum hippoRequestEnum = HippoRequestEnum.getByType(request.getRequestType());\n  if (hippoRequestEnum != HippoRequestEnum.PING) {\n    LOGGER.info(\"hippo in param:{}\", request);\n  }\n  try {\n    ChainThreadLocal.INSTANCE.setChainId(request.getChainId());\n    ChainThreadLocal.INSTANCE.incChainOrder(request.getChainOrder());\n    response.setRequestId(request.getRequestId());\n    if (hippoRequestEnum == null) {\n      response.setError(true);\n      response.setThrowable(new HippoRequestTypeNotExistException(\n          \"HippoRequest requestType not exist.current requestType is:\"\n              + request.getRequestType()));\n    } else if (hippoRequestEnum == HippoRequestEnum.API) {\n      response.setResult(apiProcess(request));\n    } else if (hippoRequestEnum == HippoRequestEnum.RPC) {\n      response.setResult(rpcProcess(request));\n    } else if (hippoRequestEnum == HippoRequestEnum.PING) {\n      response.setResult(\"ping success\");\n      response.setRequestId(\"-99\");\n    }\n  } catch (Exception e1) {\n    LOGGER.error(\"handle error:\" + request, e1);\n    if (e1 instanceof InvocationTargetException) {\n      response.setThrowable(e1.getCause());\n    } else {\n      response.setThrowable(e1);\n    }\n    response.setRequestId(request.getRequestId());\n    response.setResult(request);\n    response.setError(true);\n  }\n  ChainThreadLocal.INSTANCE.clearTL();\n  if (hippoRequestEnum != HippoRequestEnum.PING) {\n    LOGGER.info(\"hippo out result:{},\u8017\u65f6:{}\u6beb\u79d2\", response, System.currentTimeMillis() - start);\n  }\n\n  ctx.writeAndFlush(response);\n}",
                "start_point": {
                    "row": 40,
                    "column": 2
                },
                "end_point": {
                    "row": 84,
                    "column": 3
                }
            },
            {
                "definition": "private Object rpcProcess(HippoRequest paras) throws InvocationTargetException {\n  Object serviceBean =\n      HippoServiceImplCache.INSTANCE.getImplObjectMap().get(paras.getClassName());\n  FastClass serviceFastClass = FastClass.create(serviceBean.getClass());\n  FastMethod serviceFastMethod =\n      serviceFastClass.getMethod(paras.getMethodName(), paras.getParameterTypes());\n  return serviceFastMethod.invoke(serviceBean, paras.getParameters());\n}",
                "name": "rpcProcess",
                "modifiers": "private",
                "return_type": "Object",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "paras"
                    }
                ],
                "body": "{\n  Object serviceBean =\n      HippoServiceImplCache.INSTANCE.getImplObjectMap().get(paras.getClassName());\n  FastClass serviceFastClass = FastClass.create(serviceBean.getClass());\n  FastMethod serviceFastMethod =\n      serviceFastClass.getMethod(paras.getMethodName(), paras.getParameterTypes());\n  return serviceFastMethod.invoke(serviceBean, paras.getParameters());\n}",
                "start_point": {
                    "row": 86,
                    "column": 2
                },
                "end_point": {
                    "row": 93,
                    "column": 3
                }
            },
            {
                "definition": "@SuppressWarnings(\"unchecked\")\nprivate Object apiProcess(HippoRequest paras) throws Exception {/* \u5148\u4e0d\u7ba1\u91cd\u8f7d \u4e0d\u7ba1\u7f13\u5b58 */\n  Object serviceBean = HippoServiceImplCache.INSTANCE.getCacheBySimpleName(paras.getClassName());\n  Class<?> serviceBeanClass = serviceBean.getClass();\n  Method[] methods = serviceBeanClass.getDeclaredMethods();\n  Object[] requestDto = null;\n  for (Method method : methods) {\n    if (!method.getName().equals(paras.getMethodName())) {\n      continue;\n    }\n    Object[] objects = paras.getParameters();\n\n    Map<String, Object> map;\n    if (objects != null && objects.length == 1) {\n      // \u5982\u679c\u662fjson\u7edf\u4e00\u8f6c\u6210map\u5904\u7406\n      if (objects[0] instanceof String) {\n        map = GsonConvertUtils.jsonToMap((String) objects[0]);\n      } else {\n        map = (Map<String, Object>) objects[0];\n      }\n    } else {\n      map = new HashMap<>();\n    }\n    Class<?>[] parameterTypes = method.getParameterTypes();\n    if (parameterTypes.length == 0) {// \u65e0\u53c2\u6570\n      requestDto = null;\n    } else if (parameterTypes.length == 1) {// \u4e00\u4e2a\u53c2\u6570(\u662f\u5426\u662fDto)\n      Class<?> parameterType = parameterTypes[0];\n\n      requestDto = new Object[1];\n      // \u975e\u81ea\u5b9a\u4e49dto\u5c31\u662fjava\u539f\u751f\u7c7b\u4e86\n      if (isJavaClass(parameterType)) {\n        requestDto[0] = GsonConvertUtils\n            .cleanseToObjectClass(map.get(method.getParameters()[0].getName()), parameterType);\n      } else {\n        requestDto[0] =\n            GsonConvertUtils.cleanseToObjectClass(paras.getParameters()[0], parameterType);\n      }\n    }\n    // \u591a\u53c2\n    else {\n      Parameter[] parameters = method.getParameters();\n      requestDto = new Object[parameters.length];\n      String paramName;\n      int index = 0;\n      for (Parameter parameter : parameters) {\n        paramName = parameter.getName();\n        requestDto[index] =\n            GsonConvertUtils.cleanseToObjectClass(map.get(paramName), parameter.getType());\n        index++;\n      }\n    }\n    // \u62ff\u5230\u8fd4\u56de\n    return GsonConvertUtils.cleanseToObject(method.invoke(serviceBean, requestDto));\n  }\n  throw new NoSuchMethodException(paras.getMethodName());\n}",
                "name": "apiProcess",
                "modifiers": "@SuppressWarnings(\"unchecked\")\n  private",
                "return_type": "Object",
                "parameters": [
                    {
                        "type": "HippoRequest",
                        "name": "paras"
                    }
                ],
                "body": "{/* \u5148\u4e0d\u7ba1\u91cd\u8f7d \u4e0d\u7ba1\u7f13\u5b58 */\n  Object serviceBean = HippoServiceImplCache.INSTANCE.getCacheBySimpleName(paras.getClassName());\n  Class<?> serviceBeanClass = serviceBean.getClass();\n  Method[] methods = serviceBeanClass.getDeclaredMethods();\n  Object[] requestDto = null;\n  for (Method method : methods) {\n    if (!method.getName().equals(paras.getMethodName())) {\n      continue;\n    }\n    Object[] objects = paras.getParameters();\n\n    Map<String, Object> map;\n    if (objects != null && objects.length == 1) {\n      // \u5982\u679c\u662fjson\u7edf\u4e00\u8f6c\u6210map\u5904\u7406\n      if (objects[0] instanceof String) {\n        map = GsonConvertUtils.jsonToMap((String) objects[0]);\n      } else {\n        map = (Map<String, Object>) objects[0];\n      }\n    } else {\n      map = new HashMap<>();\n    }\n    Class<?>[] parameterTypes = method.getParameterTypes();\n    if (parameterTypes.length == 0) {// \u65e0\u53c2\u6570\n      requestDto = null;\n    } else if (parameterTypes.length == 1) {// \u4e00\u4e2a\u53c2\u6570(\u662f\u5426\u662fDto)\n      Class<?> parameterType = parameterTypes[0];\n\n      requestDto = new Object[1];\n      // \u975e\u81ea\u5b9a\u4e49dto\u5c31\u662fjava\u539f\u751f\u7c7b\u4e86\n      if (isJavaClass(parameterType)) {\n        requestDto[0] = GsonConvertUtils\n            .cleanseToObjectClass(map.get(method.getParameters()[0].getName()), parameterType);\n      } else {\n        requestDto[0] =\n            GsonConvertUtils.cleanseToObjectClass(paras.getParameters()[0], parameterType);\n      }\n    }\n    // \u591a\u53c2\n    else {\n      Parameter[] parameters = method.getParameters();\n      requestDto = new Object[parameters.length];\n      String paramName;\n      int index = 0;\n      for (Parameter parameter : parameters) {\n        paramName = parameter.getName();\n        requestDto[index] =\n            GsonConvertUtils.cleanseToObjectClass(map.get(paramName), parameter.getType());\n        index++;\n      }\n    }\n    // \u62ff\u5230\u8fd4\u56de\n    return GsonConvertUtils.cleanseToObject(method.invoke(serviceBean, requestDto));\n  }\n  throw new NoSuchMethodException(paras.getMethodName());\n}",
                "start_point": {
                    "row": 103,
                    "column": 2
                },
                "end_point": {
                    "row": 159,
                    "column": 3
                }
            },
            {
                "definition": "@Override\npublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n  LOGGER.error(\"netty server error\", cause.fillInStackTrace());\n  ctx.close();\n}",
                "name": "exceptionCaught",
                "modifiers": "@Override\n  public",
                "return_type": null,
                "parameters": [
                    {
                        "type": "ChannelHandlerContext",
                        "name": "ctx"
                    },
                    {
                        "type": "Throwable",
                        "name": "cause"
                    }
                ],
                "body": "{\n  LOGGER.error(\"netty server error\", cause.fillInStackTrace());\n  ctx.close();\n}",
                "start_point": {
                    "row": 161,
                    "column": 2
                },
                "end_point": {
                    "row": 165,
                    "column": 3
                }
            },
            {
                "definition": "@Override\nprotected void channelRead0(ChannelHandlerContext ctx, HippoRequest request) throws Exception {\n  pool.execute(() -> handle(ctx, request));\n}",
                "name": "channelRead0",
                "modifiers": "@Override\n  protected",
                "return_type": null,
                "parameters": [
                    {
                        "type": "ChannelHandlerContext",
                        "name": "ctx"
                    },
                    {
                        "type": "HippoRequest",
                        "name": "request"
                    }
                ],
                "body": "{\n  pool.execute(() -> handle(ctx, request));\n}",
                "start_point": {
                    "row": 168,
                    "column": 2
                },
                "end_point": {
                    "row": 171,
                    "column": 3
                }
            },
            {
                "definition": "private boolean isJavaClass(Class<?> clz) {\n  return clz != null && clz.getClassLoader() == null;\n}",
                "name": "isJavaClass",
                "modifiers": "private",
                "return_type": null,
                "parameters": [
                    {
                        "type": "Class<?>",
                        "name": "clz"
                    }
                ],
                "body": "{\n  return clz != null && clz.getClassLoader() == null;\n}",
                "start_point": {
                    "row": 173,
                    "column": 2
                },
                "end_point": {
                    "row": 175,
                    "column": 3
                }
            }
        ]
    },
    {
        "rev_path": "hippo-common/src/main/java/com/github/hippo/util/GsonConvertUtils.java",
        "definition": "public class GsonConvertUtils {\n\n  private static final Gson gson = new Gson();\n\n  /**\n   * hippo-server used \u6e05\u6d17\u5bf9\u8c61\u683c\u5f0f\n   * \n   * @param obj origin obj\n   * @return obj\n   */\n  public static Object cleanseToObject(Object obj) {\n    if (obj == null) return null;\n    try {\n      if (obj.getClass().isPrimitive())\n        return obj;\n      else\n        return gson.fromJson(gson.toJson(obj), Object.class);\n    } catch (Exception e) {\n      throw new ClassCastException(\"obj cleanse:\" + ToStringBuilder.reflectionToString(obj));\n    }\n  }\n\n  /**\n   * hippo-server used \u83b7\u53d6\u5230json\u8f6c\u4e3aT\n   * \n   * @param obj origin obj\n   * @param objectClass objectClass\n   * @param <T> \u6cdb\u578b\n   * @return objectClass.instance\n   */\n  public static <T> T cleanseToObjectClass(Object obj, Class<T> objectClass) {\n    if (obj == null) return null;\n    try {\n      return gson.fromJson(gson.toJson(obj), objectClass);\n    } catch (Exception e) {\n      throw new ClassCastException(\n          \"json to obj:\" + ToStringBuilder.reflectionToString(obj) + \",\" + objectClass);\n    }\n  }\n\n  public static Map<String, Object> jsonToMap(String data) {\n    return new GsonBuilder().create().fromJson(data,\n        new TypeToken<Map<String, Object>>() {}.getType());\n  }\n}",
        "package": "package com.github.hippo.util;",
        "tree_path": "GsonConvertUtils",
        "name": "GsonConvertUtils",
        "modifiers": "public",
        "superclass": null,
        "super_interfaces": null,
        "body": "{\n\n  private static final Gson gson = new Gson();\n\n  /**\n   * hippo-server used \u6e05\u6d17\u5bf9\u8c61\u683c\u5f0f\n   * \n   * @param obj origin obj\n   * @return obj\n   */\n  public static Object cleanseToObject(Object obj) {\n    if (obj == null) return null;\n    try {\n      if (obj.getClass().isPrimitive())\n        return obj;\n      else\n        return gson.fromJson(gson.toJson(obj), Object.class);\n    } catch (Exception e) {\n      throw new ClassCastException(\"obj cleanse:\" + ToStringBuilder.reflectionToString(obj));\n    }\n  }\n\n  /**\n   * hippo-server used \u83b7\u53d6\u5230json\u8f6c\u4e3aT\n   * \n   * @param obj origin obj\n   * @param objectClass objectClass\n   * @param <T> \u6cdb\u578b\n   * @return objectClass.instance\n   */\n  public static <T> T cleanseToObjectClass(Object obj, Class<T> objectClass) {\n    if (obj == null) return null;\n    try {\n      return gson.fromJson(gson.toJson(obj), objectClass);\n    } catch (Exception e) {\n      throw new ClassCastException(\n          \"json to obj:\" + ToStringBuilder.reflectionToString(obj) + \",\" + objectClass);\n    }\n  }\n\n  public static Map<String, Object> jsonToMap(String data) {\n    return new GsonBuilder().create().fromJson(data,\n        new TypeToken<Map<String, Object>>() {}.getType());\n  }\n}",
        "start_point": {
            "row": 16,
            "column": 0
        },
        "end_point": {
            "row": 60,
            "column": 1
        },
        "file_mode": "Deleted",
        "map_path": null,
        "methods": [
            {
                "definition": "public static Object cleanseToObject(Object obj) {\n  if (obj == null) return null;\n  try {\n    if (obj.getClass().isPrimitive())\n      return obj;\n    else\n      return gson.fromJson(gson.toJson(obj), Object.class);\n  } catch (Exception e) {\n    throw new ClassCastException(\"obj cleanse:\" + ToStringBuilder.reflectionToString(obj));\n  }\n}",
                "name": "cleanseToObject",
                "modifiers": "public static",
                "return_type": "Object",
                "parameters": [
                    {
                        "type": "Object",
                        "name": "obj"
                    }
                ],
                "body": "{\n  if (obj == null) return null;\n  try {\n    if (obj.getClass().isPrimitive())\n      return obj;\n    else\n      return gson.fromJson(gson.toJson(obj), Object.class);\n  } catch (Exception e) {\n    throw new ClassCastException(\"obj cleanse:\" + ToStringBuilder.reflectionToString(obj));\n  }\n}",
                "start_point": {
                    "row": 26,
                    "column": 2
                },
                "end_point": {
                    "row": 36,
                    "column": 3
                }
            },
            {
                "definition": "public static <T> T cleanseToObjectClass(Object obj, Class<T> objectClass) {\n  if (obj == null) return null;\n  try {\n    return gson.fromJson(gson.toJson(obj), objectClass);\n  } catch (Exception e) {\n    throw new ClassCastException(\n        \"json to obj:\" + ToStringBuilder.reflectionToString(obj) + \",\" + objectClass);\n  }\n}",
                "name": "cleanseToObjectClass",
                "modifiers": "public static",
                "return_type": "T",
                "parameters": [
                    {
                        "type": "Object",
                        "name": "obj"
                    },
                    {
                        "type": "Class<T>",
                        "name": "objectClass"
                    }
                ],
                "body": "{\n  if (obj == null) return null;\n  try {\n    return gson.fromJson(gson.toJson(obj), objectClass);\n  } catch (Exception e) {\n    throw new ClassCastException(\n        \"json to obj:\" + ToStringBuilder.reflectionToString(obj) + \",\" + objectClass);\n  }\n}",
                "start_point": {
                    "row": 46,
                    "column": 2
                },
                "end_point": {
                    "row": 54,
                    "column": 3
                }
            },
            {
                "definition": "public static Map<String, Object> jsonToMap(String data) {\n  return new GsonBuilder().create().fromJson(data,\n      new TypeToken<Map<String, Object>>() {}.getType());\n}",
                "name": "jsonToMap",
                "modifiers": "public static",
                "return_type": null,
                "parameters": [
                    {
                        "type": "String",
                        "name": "data"
                    }
                ],
                "body": "{\n  return new GsonBuilder().create().fromJson(data,\n      new TypeToken<Map<String, Object>>() {}.getType());\n}",
                "start_point": {
                    "row": 56,
                    "column": 2
                },
                "end_point": {
                    "row": 59,
                    "column": 3
                }
            }
        ]
    }
]