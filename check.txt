68
package club.newtech.qbike.domain.core.vo;

import lombok.Data;

import javax.persistence.Embeddable;

@Embeddable
@Data
public class User {
    private int id;
    private String name;
    private String mobile;
}

============================================
package club.newtech.qbike.trip.domain.core.vo;

import lombok.Data;

import javax.persistence.Embeddable;

@Embeddable
@Data
public class Driver {
    private int id;
    private String name;
    private String mobile;
}

============================================
============================================
59
package club.newtech.qbike.domain.core.service;

import club.newtech.qbike.domain.core.vo.User;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class UserRibbonHystrixService {
    private static final Logger LOGGER = LoggerFactory.getLogger(UserRibbonHystrixService.class);
    @Autowired
    private RestTemplate restTemplate;

    /**
     * 使用@HystrixCommand注解指定当该方法发生异常时调用的方法
     *
     * @param id id
     * @return 通过id查询到的用户
     */
    @HystrixCommand(fallbackMethod = "fallback")
    public User findById(Integer id) {
        return this.restTemplate.getForObject("http://QBIKE-UC/users/" + id, User.class);
    }

    /**
     * hystrix fallback方法
     *
     * @param id id
     * @return 默认的用户
     */
    public User fallback(Integer id) {
        UserRibbonHystrixService.LOGGER.info("异常发生，进入fallback方法，接收的参数：id = {}", id);
        User user = new User();
        user.setId(-1);
        user.setName("default username");
        user.setMobile("0000");
        return user;
    }
}

============================================
package club.newtech.qbike.trip.infrastructure;

import club.newtech.qbike.trip.domain.core.vo.Driver;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class UserRibbonHystrixApi {
    private static final Logger LOGGER = LoggerFactory.getLogger(UserRibbonHystrixApi.class);
    @Autowired
    private RestTemplate restTemplate;

    /**
     * 使用@HystrixCommand注解指定当该方法发生异常时调用的方法
     *
     * @param id id
     * @return 通过id查询到的用户
     */
    @HystrixCommand(fallbackMethod = "fallback")
    public Driver findById(Integer id) {
        return this.restTemplate.getForObject("http://QBIKE-UC/users/" + id, Driver.class);
    }

    /**
     * hystrix fallback方法
     *
     * @param id id
     * @return 默认的用户
     */
    public Driver fallback(Integer id) {
        UserRibbonHystrixApi.LOGGER.info("异常发生，进入fallback方法，接收的参数：id = {}", id);
        Driver driver = new Driver();
        driver.setId(-1);
        driver.setName("default driver");
        driver.setMobile("0000");
        return driver;
    }
}

============================================
============================================
65
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.oauth2;

import io.gravitee.am.management.handlers.oauth2.provider.endpoint.ScopeApprovalEndpoint;
import io.gravitee.am.management.handlers.oauth2.service.DomainScopeService;
import io.gravitee.am.management.handlers.oauth2.view.ThymeleafConfiguration;
import io.gravitee.am.model.Domain;
import io.gravitee.am.model.login.LoginForm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.oauth2.provider.ClientDetailsService;
import org.springframework.security.oauth2.provider.approval.ApprovalStore;
import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
@Configuration
@ComponentScan("io.gravitee.am.management.handlers.oauth2.controller")
@EnableWebMvc
@Import(ThymeleafConfiguration.class)
public class WebMvcConfiguration extends WebMvcConfigurerAdapter {

    @Autowired
    private Domain domain;

    @Bean
    public ScopeApprovalEndpoint accessConfirmationController(ClientDetailsService clientDetailsService,
                                                              ApprovalStore approvalStore,
                                                              DomainScopeService scopeService) {
        ScopeApprovalEndpoint accessConfirmationController = new ScopeApprovalEndpoint();
        accessConfirmationController.setClientDetailsService(clientDetailsService);
        accessConfirmationController.setApprovalStore(approvalStore);
        accessConfirmationController.setScopeService(scopeService);
        return accessConfirmationController;
    }

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        LoginForm loginForm = domain.getLoginForm();
        if (loginForm != null && loginForm.isEnabled() && loginForm.getAssets() != null) {
            registry
                    .addResourceHandler("/oauth/assets/**", "/assets/**")
                    .addResourceLocations("file:" + loginForm.getAssets());
        } else {
            registry
                    .addResourceHandler("/oauth/assets/**", "/assets/**")
                    .addResourceLocations("classpath:/assets/");
        }
    }

    @Override
    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
        configurer.defaultContentType(MediaType.APPLICATION_JSON);
    }
}
============================================
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.admin;

import io.gravitee.am.management.handlers.admin.view.ThymeleafConfiguration;
import io.gravitee.am.model.Domain;
import io.gravitee.am.model.login.LoginForm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
@Configuration
@EnableWebMvc
@Import(ThymeleafConfiguration.class)
public class WebMvcConfiguration extends WebMvcConfigurerAdapter {

    @Autowired
    private Domain domain;

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        LoginForm loginForm = domain.getLoginForm();
        if (loginForm != null && loginForm.isEnabled() && loginForm.getAssets() != null) {
            registry
                    .addResourceHandler("/oauth/assets/**", "/assets/**")
                    .addResourceLocations("file:" + loginForm.getAssets());
        } else {
            registry
                    .addResourceHandler("/oauth/assets/**", "/assets/**")
                    .addResourceLocations("classpath:/assets/");
        }
    }

    @Override
    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
        configurer.defaultContentType(MediaType.APPLICATION_JSON);
    }
}
============================================
============================================
74
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.oauth2.authentication;

import io.gravitee.common.http.HttpHeaders;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
public class OAuth2LoginUrlAuthenticationEntryPoint extends LoginUrlAuthenticationEntryPoint {

    public OAuth2LoginUrlAuthenticationEntryPoint(String loginFormUrl) {
        super(loginFormUrl);
    }

    @Override
    protected String determineUrlToUseForThisRequest(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) {
        String url = super.determineUrlToUseForThisRequest(request, response, exception);
        return UriComponentsBuilder.fromPath(url).queryParam("client_id", request.getParameter("client_id")).toUriString();
    }

    @Override
    protected String buildRedirectUrlToLoginPage(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) {
        String url = super.buildRedirectUrlToLoginPage(request, response, authException);

        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);

        String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);
        if (scheme != null && !scheme.isEmpty()) {
            builder.scheme(scheme);
        }

        String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);
        if (host != null && !host.isEmpty()) {
            if (host.contains(":")) {
                // Forwarded host contains both host and port
                String [] parts = host.split(":");
                builder.host(parts[0]);
                builder.port(parts[1]);
            } else {
                builder.host(host);
            }
        }

        return builder.toUriString();
    }
}

============================================
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.admin.authentication;

import io.gravitee.common.http.HttpHeaders;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
public class LoginUrlAuthenticationEntryPoint extends org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint {

    public LoginUrlAuthenticationEntryPoint(String loginFormUrl) {
        super(loginFormUrl);
    }

    @Override
    protected String buildRedirectUrlToLoginPage(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) {
        String url = super.buildRedirectUrlToLoginPage(request, response, authException);

        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);

        String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);
        if (scheme != null && !scheme.isEmpty()) {
            builder.scheme(scheme);
        }

        String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);
        if (host != null && !host.isEmpty()) {
            if (host.contains(":")) {
                // Forwarded host contains both host and port
                String [] parts = host.split(":");
                builder.host(parts[0]);
                builder.port(parts[1]);
            } else {
                builder.host(host);
            }
        }

        return builder.toUriString();
    }
}

============================================
============================================
77
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.oauth2.context;

import io.gravitee.am.management.handlers.oauth2.spring.OAuth2Configuration;
import io.gravitee.am.management.handlers.spring.SpringServletContext;
import io.gravitee.am.model.Domain;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.web.filter.DelegatingFilterProxy;
import org.springframework.web.servlet.DispatcherServlet;

import javax.servlet.Filter;
import javax.servlet.Servlet;
import java.util.*;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
public class OAuth2SpringServletContext extends SpringServletContext<Domain> {

    private final Domain domain;

    private OAuth2SpringServletContext(Domain domain) {
        this.domain = domain;
    }

    @Override
    public List<Servlet> servlets() {
        return Collections.singletonList(new DispatcherServlet(applicationContext()));
    }

    @Override
    public List<Filter> filters() {
        return Collections.singletonList(new DelegatingFilterProxy("springSecurityFilterChain"));
    }

    @Override
    public List<EventListener> listeners() {
        return Collections.singletonList(new OAuth2ContextLoaderListener(applicationContext()));
    }

    @Override
    public Domain deployable() {
        return domain;
    }

    @Override
    protected Set<Class<?>> annotatedClasses() {
        return new HashSet<>(Arrays.asList(OAuth2Configuration.class));
    }

    @Override
    protected Set<? extends BeanFactoryPostProcessor> beanFactoryPostProcessors() {
        return Collections.singleton(new OAuth2DomainBeanFactoryPostProcessor((Domain) deployable()));
    }

    static Builder create(Domain domain) {
        return new Builder(domain);
    }

    static class Builder {

        private final Domain domain;

        private Builder(Domain domain) {
            this.domain = domain;
        }

        SpringServletContext<Domain> build() {
            return new OAuth2SpringServletContext(domain);
        }
    }
}

============================================
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.admin.context;

import io.gravitee.am.management.handlers.admin.spring.AdminConfiguration;
import io.gravitee.am.management.handlers.spring.SpringServletContext;
import io.gravitee.am.model.Domain;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.web.filter.DelegatingFilterProxy;
import org.springframework.web.servlet.DispatcherServlet;

import javax.servlet.Filter;
import javax.servlet.Servlet;
import java.util.*;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
public class AdminSpringServletContext extends SpringServletContext<Domain> {

    private final Domain domain;

    private AdminSpringServletContext(Domain domain) {
        this.domain = domain;
    }

    @Override
    public List<Servlet> servlets() {
        return Collections.singletonList(new DispatcherServlet(applicationContext()));
    }

    @Override
    public List<Filter> filters() {
        return Collections.singletonList(new DelegatingFilterProxy("springSecurityFilterChain"));
    }

    @Override
    public List<EventListener> listeners() {
        return Collections.singletonList(new AdminContextLoaderListener(applicationContext()));
    }

    @Override
    public Domain deployable() {
        return domain;
    }

    @Override
    protected Set<Class<?>> annotatedClasses() {
        return new HashSet<>(Arrays.asList(AdminConfiguration.class));
    }

    @Override
    protected Set<? extends BeanFactoryPostProcessor> beanFactoryPostProcessors() {
        return Collections.singleton(new AdminDomainBeanFactoryPostProcessor((Domain) deployable()));
    }

    static Builder create(Domain domain) {
        return new Builder(domain);
    }

    static class Builder {

        private final Domain domain;

        private Builder(Domain domain) {
            this.domain = domain;
        }

        SpringServletContext<Domain> build() {
            return new AdminSpringServletContext(domain);
        }
    }
}

============================================
============================================
73
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.oauth2.controller;

import io.gravitee.am.identityprovider.api.oauth2.OAuth2AuthenticationProvider;
import io.gravitee.am.identityprovider.api.oauth2.OAuth2IdentityProviderConfiguration;
import io.gravitee.am.management.handlers.oauth2.security.IdentityProviderManager;
import io.gravitee.am.model.Client;
import io.gravitee.am.model.Domain;
import io.gravitee.am.model.IdentityProvider;
import io.gravitee.am.service.ClientService;
import io.gravitee.common.http.HttpHeaders;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.common.util.OAuth2Utils;
import org.springframework.security.web.savedrequest.SavedRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
@Controller
public class LoginController {

    private final static Logger logger = LoggerFactory.getLogger(LoginController.class);
    private final static String LOGIN_VIEW = "login";
    private final static List<String> socialProviders = Arrays.asList("github", "google", "twitter", "facebook", "bitbucket");
    private final static String errorPage = "forward:/oauth/error";
    private static final String SAVED_REQUEST = "GRAVITEEIO_AM_SAVED_REQUEST";

    @Autowired
    private ClientService clientService;

    @Autowired
    private Domain domain;

    @Autowired
    private IdentityProviderManager identityProviderManager;

    @RequestMapping(value = "/login")
    public ModelAndView login(
            @RequestParam(value = OAuth2Utils.CLIENT_ID) String clientId, HttpServletRequest request) {
        if (clientId == null || clientId.isEmpty()) {
            logger.error(OAuth2Utils.CLIENT_ID + " parameter is required");
            return new ModelAndView(errorPage, Collections.singletonMap("error", OAuth2Utils.CLIENT_ID + " parameter is required"));
        }

        Client client;
        try {
            // TODO async call
            client = clientService.findByDomainAndClientId(domain.getId(), clientId).blockingGet();
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return new ModelAndView(errorPage, Collections.singletonMap("error", e.getMessage()));
        }

        Map<String, Object> params = new HashMap<>();
        params.put(OAuth2Utils.CLIENT_ID, client.getClientId());
        params.put("domain", domain);

        Set<String> clientOAuth2Providers = client.getOauth2Identities();
        if (clientOAuth2Providers != null && !clientOAuth2Providers.isEmpty()) {
            params.put("oauth2Providers", clientOAuth2Providers.stream().map(id -> {
                IdentityProvider identityProvider = identityProviderManager.getIdentityProvider(id);
                String identityProviderType = identityProvider.getType();
                Optional<String> identityProviderSocialType = socialProviders.stream().filter(socialProvider -> identityProviderType.toLowerCase().contains(socialProvider)).findFirst();
                if (identityProviderSocialType.isPresent()) {
                    identityProvider.setType(identityProviderSocialType.get());
                }
                return identityProvider;
            }).collect(Collectors.toSet()));

            Map<String, String> authorizeUrls = new HashMap<>();
            clientOAuth2Providers.forEach(identity -> {
                OAuth2AuthenticationProvider oAuth2AuthenticationProvider = (OAuth2AuthenticationProvider) identityProviderManager.get(identity);
                if (oAuth2AuthenticationProvider != null) {
                    OAuth2IdentityProviderConfiguration configuration = oAuth2AuthenticationProvider.configuration();
                    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
                    builder.queryParam(OAuth2Utils.CLIENT_ID, configuration.getClientId());
                    builder.queryParam(OAuth2Utils.REDIRECT_URI, buildRedirectUri(request, identity));
                    builder.queryParam(OAuth2Utils.RESPONSE_TYPE, "code");
                    if (configuration.getScopes() != null && !configuration.getScopes().isEmpty()) {
                        builder.queryParam(OAuth2Utils.SCOPE, String.join(" ", configuration.getScopes()));
                    }
                    authorizeUrls.put(identity, builder.build(false).toUriString());
                }
            });
            params.put("authorizeUrls", authorizeUrls);
        }

        return new ModelAndView(LOGIN_VIEW, params);
    }

    @RequestMapping(value = "/login/callback")
    public void loginCallback(HttpServletResponse response, HttpSession session) throws IOException {
        if (session != null && session.getAttribute(SAVED_REQUEST) != null) {
            final SavedRequest savedRequest = (SavedRequest) session.getAttribute(SAVED_REQUEST);
            response.sendRedirect(savedRequest.getRedirectUrl());
        } else {
            response.sendRedirect("/login");
        }
    }

    private String buildRedirectUri(HttpServletRequest request, String identity) {
        UriComponentsBuilder builder = UriComponentsBuilder.newInstance();

        String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);
        if (scheme != null && !scheme.isEmpty()) {
            builder.scheme(scheme);
        } else {
            builder.scheme(request.getScheme());
        }

        String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);
        if (host != null && !host.isEmpty()) {
            if (host.contains(":")) {
                // Forwarded host contains both host and port
                String [] parts = host.split(":");
                builder.host(parts[0]);
                builder.port(parts[1]);
            } else {
                builder.host(host);
            }
        } else {
            builder.host(request.getServerName());
            if (request.getServerPort() != 80 && request.getServerPort() != 443) {
                builder.port(request.getServerPort());
            }
        }
        // append context path
        builder.path(request.getContextPath());
        builder.pathSegment("login/callback");

        // append identity provider id
        builder.queryParam("provider", identity);

        return builder.build().toUriString();
    }

}

============================================
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.admin.controller;

import io.gravitee.am.identityprovider.api.oauth2.OAuth2AuthenticationProvider;
import io.gravitee.am.identityprovider.api.oauth2.OAuth2IdentityProviderConfiguration;
import io.gravitee.am.management.handlers.admin.security.IdentityProviderManager;
import io.gravitee.am.model.Domain;
import io.gravitee.am.model.IdentityProvider;
import io.gravitee.common.http.HttpHeaders;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.web.savedrequest.SavedRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author Titouan COMPIEGNE (titouan.compiegne at graviteesource.com)
 * @author GraviteeSource Team
 */
@Controller
public class LoginController {

    private static final String LOGIN_VIEW = "login";
    private static final List<String> socialProviders = Arrays.asList("github", "google", "twitter", "facebook", "bitbucket");
    private static final String SAVED_REQUEST = "GRAVITEEIO_AM_SAVED_REQUEST";
    private static final String CLIENT_ID = "client_id";
    private static final String REDIRECT_URI = "redirect_uri";
    private static final String RESPONSE_TYPE = "response_type";
    private static final String SCOPE = "scope";

    @Autowired
    private Domain domain;

    @Autowired
    private IdentityProviderManager identityProviderManager;

    @RequestMapping(value = "/login")
    public ModelAndView login(HttpServletRequest request) {
        Map<String, Object> params = new HashMap<>();
        params.put("domain", domain);
        Set<String> clientOAuth2Providers = domain.getOauth2Identities();
        if (clientOAuth2Providers != null && !clientOAuth2Providers.isEmpty()) {
            params.put("oauth2Providers", clientOAuth2Providers.stream().map(id -> {
                IdentityProvider identityProvider = identityProviderManager.getIdentityProvider(id);
                String identityProviderType = identityProvider.getType();
                Optional<String> identityProviderSocialType = socialProviders.stream().filter(socialProvider -> identityProviderType.toLowerCase().contains(socialProvider)).findFirst();
                if (identityProviderSocialType.isPresent()) {
                    identityProvider.setType(identityProviderSocialType.get());
                }
                return identityProvider;
            }).collect(Collectors.toSet()));

            Map<String, String> authorizeUrls = new HashMap<>();
            clientOAuth2Providers.forEach(identity -> {
                OAuth2AuthenticationProvider oAuth2AuthenticationProvider = (OAuth2AuthenticationProvider) identityProviderManager.get(identity);
                if (oAuth2AuthenticationProvider != null) {
                    OAuth2IdentityProviderConfiguration configuration = oAuth2AuthenticationProvider.configuration();
                    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
                    builder.queryParam(CLIENT_ID, configuration.getClientId());
                    builder.queryParam(REDIRECT_URI, buildRedirectUri(request, identity));
                    builder.queryParam(RESPONSE_TYPE, "code");
                    if (configuration.getScopes() != null && !configuration.getScopes().isEmpty()) {
                        builder.queryParam(SCOPE, String.join(" ", configuration.getScopes()));
                    }
                    authorizeUrls.put(identity, builder.build(false).toUriString());
                }
            });
            params.put("authorizeUrls", authorizeUrls);
        }

        return new ModelAndView(LOGIN_VIEW, params);
    }

    @RequestMapping(value = "/login/callback")
    public void loginCallback(HttpServletResponse response, HttpSession session) throws IOException {
        if (session != null && session.getAttribute(SAVED_REQUEST) != null) {
            final SavedRequest savedRequest = (SavedRequest) session.getAttribute(SAVED_REQUEST);
            response.sendRedirect(savedRequest.getRedirectUrl());
        } else {
            response.sendRedirect("/login");
        }
    }

    private String buildRedirectUri(HttpServletRequest request, String identity) {
        UriComponentsBuilder builder = UriComponentsBuilder.newInstance();

        String scheme = request.getHeader(HttpHeaders.X_FORWARDED_PROTO);
        if (scheme != null && !scheme.isEmpty()) {
            builder.scheme(scheme);
        } else {
            builder.scheme(request.getScheme());
        }

        String host = request.getHeader(HttpHeaders.X_FORWARDED_HOST);
        if (host != null && !host.isEmpty()) {
            if (host.contains(":")) {
                // Forwarded host contains both host and port
                String [] parts = host.split(":");
                builder.host(parts[0]);
                builder.port(parts[1]);
            } else {
                builder.host(host);
            }
        } else {
            builder.host(request.getServerName());
            if (request.getServerPort() != 80 && request.getServerPort() != 443) {
                builder.port(request.getServerPort());
            }
        }
        // append context path
        builder.path(request.getContextPath());
        builder.pathSegment("login/callback");

        // append identity provider id
        builder.queryParam("provider", identity);

        return builder.build().toUriString();
    }

}

============================================
============================================
50
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.oauth2.security;

import io.gravitee.am.extensiongrant.api.ExtensionGrantProvider;
import io.gravitee.am.model.ExtensionGrant;

import java.util.Map;

/**
 * @author Titouan COMPIEGNE (titouan.compiegne at graviteesource.com)
 * @author GraviteeSource Team
 */
public interface ExtensionGrantManager {

    Map<String, ExtensionGrantProvider> providers();

    ExtensionGrantProvider get(String id);

    ExtensionGrant getTokenGranter(String id);
}

============================================
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.admin.handler;

import io.gravitee.common.http.HttpHeaders;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.logout.LogoutHandler;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @author Titouan COMPIEGNE (titouan.compiegne at graviteesource.com)
 * @author GraviteeSource Team
 */
public class CookieClearingLogoutHandler implements LogoutHandler {

    @Override
    public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {
        Cookie cookie = new Cookie(HttpHeaders.AUTHORIZATION, null);
        cookie.setPath("/");
        cookie.setMaxAge(0);
        response.addCookie(cookie);
    }
}

============================================
============================================
50
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.oauth2;

import io.gravitee.am.management.handlers.oauth2.provider.endpoint.RevokeTokenEndpoint;
import org.springframework.context.annotation.Bean;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author GraviteeSource Team
 */
public class CustomAuthorizationServerEndpointsConfiguration extends AuthorizationServerEndpointsConfiguration {

    @Bean
    public RevokeTokenEndpoint revokeTokenEndpoint() {
        RevokeTokenEndpoint endpoint = new RevokeTokenEndpoint(
                getEndpointsConfigurer().getTokenStore(),
                getEndpointsConfigurer().getResourceServerTokenServices());
        endpoint.setExceptionTranslator(getEndpointsConfigurer().getExceptionTranslator());
        return endpoint;
    }
}
============================================
/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gravitee.am.management.handlers.admin.spring;

import io.gravitee.am.management.handlers.admin.SecurityConfiguration;
import io.gravitee.am.management.handlers.admin.WebMvcConfiguration;
import io.gravitee.am.management.handlers.admin.provider.jwt.JWTCookieGenerator;
import io.gravitee.am.management.handlers.admin.security.IdentityProviderManager;
import io.gravitee.am.management.handlers.admin.security.impl.IdentityProviderManagerImpl;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

/**
 * @author David BRASSELY (david.brassely at graviteesource.com)
 * @author Titouan COMPIEGNE (titouan.compiegne at graviteesource.com)
 * @author GraviteeSource Team
 */
@Configuration
@Import({
        WebMvcConfiguration.class,
        SecurityConfiguration.class
})
public class AdminConfiguration {

}

============================================
============================================
